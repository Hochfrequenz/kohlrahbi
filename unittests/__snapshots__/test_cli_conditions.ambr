# serializer version: 1
# name: TestCliConditions.test_cli_conditions[COMDIS]
  False
# ---
# name: TestCliConditions.test_cli_conditions[COMDIS].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'wenn SG3 AJT+Z61+S_0109 oder SG3 AJT+Z62+S_0109 vorhanden.',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'wenn SG3 AJT+Z58+S_0109 oder SG3 AJT+Z59+S_0109 oder SG3 AJT+Z60+S_0109 vorhanden.',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'wenn SG3 AJT+Z58/Z59/ Z60/Z61/Z62+S_0109vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'wenn SG3 AJT+A01/A02/ A03/A04/A06/A07/A09/A12/ A15+E_0504 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'wenn SG3 AJT+A07+E_0504 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'wenn SG3 AJT+A02+E_0504 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'wenn SG3 AJT+A01/A04/ A06/A09/A12+E_0504 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'wenn SG3 AJT+A05/A10/ A11/A14+E_0504 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'wenn SG3 AJT+A03+E_0504 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'wenn SG3 AJT+A15+E_0504 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'wenn SG3 AJT+A99+S_0109 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '13',
      'condition_text': 'wenn SG3 AJT+A07+E_1008 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'wenn SG3 AJT+A02+E_1008 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'wenn SG3 AJT+A01/ A04/A06/A09+E_1008 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'wenn SG3 AJT+A03+E_1008 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'wenn SG3 AJT+A15+E_1008 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'wenn SG3 AJT+A05/ A10/A11+E_1008 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '19',
      'condition_text': 'wenn SG3 AJT+A99+E_0265/E_0516/ E_0520/E_0567 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '20',
      'condition_text': 'wenn SG3 AJT+A01/ A02/A03/A04/A06/A07/A09/ A15+E_1008 vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '21',
      'condition_text': 'wenn im DE3155 in demselben COM der Code EM vorhanden ist',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'wenn im DE3155 in demselben COM der Code TE / FX / AJ / AL vorhanden ist',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '23',
      'condition_text': 'Wenn MP-ID in NAD+MS (Nachrichtensender) mit Rolle MSB vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) mit Rolle ESA vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '25',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) mit Rolle LF vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) mit Rolle NB vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn MP-ID in NAD+MS (Nachrichtensender) mit Rolle NB vorhanden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Strom',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Gas',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '505',
      'condition_text': 'Hinweis: BGM DE1004 aus der vorher per REMADV abgelehnten INVOIC-Nachricht',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '506',
      'condition_text': 'Hinweis: BGM DE1004 aus der vorher per IFTSTA abgelehnten MSCONS- Nachricht',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '508',
      'condition_text': 'Hinweis: Es darf nur eine Information im DE3148 übermittelt werden',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '930',
      'condition_text': 'Format: max. 2 Nachkommastellen',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '939',
      'condition_text': 'Format: Die Zeichenkette muss die Zeichen @ und . enthalten',
      'edifact_format': 'COMDIS',
    }),
    dict({
      'condition_key': '940',
      'condition_text': 'Format: Die Zeichenkette muss mit dem Zeichen + beginnen und danach dürfen nur noch Ziffern folgen',
      'edifact_format': 'COMDIS',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[COMDIS].2
  None
# ---
# name: TestCliConditions.test_cli_conditions[IFTSTA]
  False
# ---
# name: TestCliConditions.test_cli_conditions[IFTSTA].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Wenn die Übermittlung nicht codierbarer Informationen nötig ist.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Wenn SG7 STS+Z01 nicht vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Wenn SG7 STS+Z02 nicht vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'Wenn SG7 STS+Z03 nicht vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'Wenn für das 3-Tupel (MaBiS-ZP, Betrachtungszeitraum, Version der Summenzeitreihe) dem BIKO der Prüfstatus vorliegt, so ist dieser immer zusammen mit dem Datenstatus zu übertragen.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'Wenn der Datenstatus "Abgerechnete Daten" bzw. "Abgerechnete Daten Korrektur-BKA" nicht vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'Wenn derDatenstatus einer NZR vom BIKO an NB nicht vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'Wenn Meldung des BKV/NB/ÜNB nach Fristeingeht.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'Wenn MP-ID in SG1 NAD+MR in der Rolle BKV',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Wenn Meldung des BKV auf falscher Aggregationsebene eingeht.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn SG15 STS+Z19 nicht vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '19',
      'condition_text': 'Wenn SG15 STS+Z24 nicht vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '20',
      'condition_text': 'Wenn MP-ID in SG1 NAD+MR in der Rolle LF',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '23',
      'condition_text': 'Wenn SG15 STS+Z25+Z31+A06 / A09 / A10 / A11 / A13 / A14 / A15 / A16 vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn MP-ID in SG1 NAD+MR in der Rolle NB',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Nur MP-ID aus Sparte Gas',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '29',
      'condition_text': 'Wenn MP-ID in SG1 NAD+MR in der Rolle ÜNB',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '30',
      'condition_text': 'Wenn in dieser SG15 STS+Z20+Z32+A07:E_0207 vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '31',
      'condition_text': 'Wenn in dieser SG16 in QTY in DE6411 KWH/K3 vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'Wenn in dieser SG16 in QTY in DE6411 KWT/K5 vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'Wenn in dieser SG16 DTM+163 vorhanden.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '43',
      'condition_text': 'Wenn STS+Z01+Z07 vorhanden, dann sind nur Codes aus dem EBD-Cluster Zustimmung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '44',
      'condition_text': 'Wenn STS+Z01+Z08 vorhanden, dann sind nur Codes aus dem EBD-Cluster Ablehnung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '45',
      'condition_text': 'Wenn STS+Z03+Z07 vorhanden, dann sind nur Codes aus dem EBD-Cluster Zustimmung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '46',
      'condition_text': 'Wenn STS+Z03+Z08 vorhanden, dann sind nur Codes aus dem EBD-Cluster Ablehnung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '47',
      'condition_text': 'Es sind nur Codes aus dem EBD-Cluster Ablehnung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '48',
      'condition_text': 'Es sind nur Codes aus dem EBD-Cluster Zustimmung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '49',
      'condition_text': 'Wenn STS+Z25+Z30 vorhanden, dann sind nur Codes aus dem EBD-Cluster Zustimmung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '50',
      'condition_text': 'Wenn STS+Z25+Z31 vorhanden, dann sind nur Codes aus dem EBD-Cluster Ablehnung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '51',
      'condition_text': 'Es sind nur Codes aus dem EBD-Cluster Abweisung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '52',
      'condition_text': 'Wenn STS+Z27+Z32 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '53',
      'condition_text': 'Wenn STS+Z28+Z32 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '54',
      'condition_text': 'Wenn STS+Z29+Z32 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '55',
      'condition_text': 'Wenn STS+Z30+Z32 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '56',
      'condition_text': 'Wenn in dieser SG15 STS das SG15 RFF+ACW nicht identisch mit dem SG15 RFF+ACW der SG15 STS+Z27 ist',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '57',
      'condition_text': 'Wenn in dieser SG15 STS das SG15 RFF+ACW nicht identisch mit dem SG15 RFF+ACW der SG15 STS+Z28 ist',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '58',
      'condition_text': 'Wenn in dieser SG15 STS das SG15 RFF+ACW nicht identisch mit dem SG15 RFF+ACW der SG15 STS+Z29 ist',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '59',
      'condition_text': 'Wenn in dieser SG15 STS das SG15 RFF+ACW nicht identisch mit dem SG15 RFF+ACW der SG15 STS+Z30 ist',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '60',
      'condition_text': 'Wenn zusätzlich zum Fahrplananteil auch die Ausfallarbeit zu identischem Wert aus RFF+ACW nicht o.k. ist',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '61',
      'condition_text': 'Wenn zusätzlich zur Ausfallarbeit auch der Fahrplananteil zu identischem Wert aus RFF+ACW nicht o.k. ist',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '62',
      'condition_text': 'Wenn STS+Z27+Z30 vorhanden, dann sind nur Codes aus dem EBD-Cluster Zustimmung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '63',
      'condition_text': 'Wenn STS+Z27+Z32 vorhanden, dann sind nur Codes aus dem EBD-Cluster Ablehnung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '64',
      'condition_text': 'Wenn STS+Z28+Z30 vorhanden, dann sind nur Codes aus dem EBD-Cluster Zustimmung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '65',
      'condition_text': 'Wenn STS+Z28+Z32 vorhanden, dann sind nur Codes aus dem EBD-Cluster Ablehnung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '66',
      'condition_text': 'Wenn STS+Z29+Z30 vorhanden, dann sind nur Codes aus dem EBD-Cluster Zustimmung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '67',
      'condition_text': 'Wenn STS+Z29+Z32 vorhanden, dann sind nur Codes aus dem EBD-Cluster Ablehnung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '68',
      'condition_text': 'Wenn STS+Z30+Z30 vorhanden, dann sind nur Codes aus dem EBD-Cluster Zustimmung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '69',
      'condition_text': 'Wenn STS+Z30+Z32 vorhanden, dann sind nur Codes aus dem EBD-Cluster Ablehnung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '70',
      'condition_text': 'Wenn zusätzlich zumGegenvorschlag des Fahrplananteils auch der Gegenvorschlag der Ausfallarbeit zu identischem Wert aus RFF+ACW nicht o.k. ist',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '71',
      'condition_text': 'Wenn zusätzlich zum Gegenvorschlag der Ausfallarbeit auch der Gegenvorschlag des Fahrplananteils zu identischem Wert aus RFF+ACW nicht o.k. ist',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '72',
      'condition_text': 'Wenn Gegenvorschlag erstellt werden kann',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '76',
      'condition_text': 'Wenn MP-ID in SG1 NAD+MR in der Rolle ESA',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '77',
      'condition_text': 'Wenn STS+Z37+Z14 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '78',
      'condition_text': 'Wenn STS+Z38 in dieser SG14 nicht vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '79',
      'condition_text': 'Wenn STS+Z37 in dieser SG14 nicht vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '80',
      'condition_text': 'Wenn STS+Z38+Z14 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '83',
      'condition_text': 'Wenn STS+Z37+Z13+A04/ A05/A06:E_0472 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '84',
      'condition_text': 'Wenn STS+Z38+Z13+A02: E_0499 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '85',
      'condition_text': 'Wenn STS+Z37+Z32+A01: E_0501 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '91',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0472',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '92',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0501',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '93',
      'condition_text': 'Wenn STS+Z37+Z13 vorhanden, dann sind nur Codes aus dem EBD-Cluster gescheitert möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '94',
      'condition_text': 'Wenn STS+Z37+Z14 vorhanden, dann sind nur Codes aus dem EBD-Cluster erfolgreich möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '95',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0499',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '96',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0487',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '97',
      'condition_text': 'Wenn STS+Z38+Z13 vorhanden, dann sind nur Codes aus dem EBD-Cluster gescheitert möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '98',
      'condition_text': 'Wenn STS+Z38+Z14vorhanden, dann sind nur Codes aus dem EBD-Cluster erfolgreich möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '99',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0487, dann ist nur der Code A01 möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '107',
      'condition_text': 'Wenn STS+Z37+Z32 vorhanden, dann sind nur Codes aus dem EBD-Cluster Ablehnung möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '114',
      'condition_text': 'Wenn MP-ID in SG1 NAD+MS in der Rolle MSB',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '115',
      'condition_text': 'Wenn MP-ID in SG1 NAD+MS in der Rolle NB',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '117',
      'condition_text': 'Wenn MP-ID in SG1 NAD+MR in der Rolle MSB',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '118',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0526',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '119',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0528',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '120',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0529',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '121',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0536',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '129',
      'condition_text': 'Wenn STS+Z20+Z32+A99:E_0524 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '130',
      'condition_text': 'Wenn STS+Z20+Z32+A99:E_0531 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '131',
      'condition_text': 'Wenn STS+Z37+Z13+A04/ A05/A06:E_1003 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '132',
      'condition_text': 'Wenn STS+Z37+Z32+A01: E_1002 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '133',
      'condition_text': 'Wenn in diesem STS DE1131 = E_1003',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '134',
      'condition_text': 'Wenn in diesem STS DE1131 = E_1002',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '135',
      'condition_text': 'Wenn in dieser SG15 in STS+Z21 DE9013 = A99',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '136',
      'condition_text': 'Wenn STS+Z38+Z13+A02: E_1005 in dieser SG14 vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '137',
      'condition_text': 'Wenn in diesem STS DE1131 = E_1005',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '138',
      'condition_text': 'Wenn in diesem STS DE1131 = E_1020',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '139',
      'condition_text': 'Wenn in diesem STS DE1131 = E_1020, dann ist nur der Code A01 möglich.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '140',
      'condition_text': 'Wenn in diesem STS DE9013 <> A01',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '141',
      'condition_text': 'Wenn in diesem STS DE9013 = A01',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '142',
      'condition_text': 'Wenn in diesem STS DE1131 = E_0535',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '143',
      'condition_text': 'Wenn mehr als ein Grund vorliegt und die voranstehenden DE9013 dieses STS nicht ausreichen',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '144',
      'condition_text': 'Wenn RFF+Z45 in dieser SG15 nicht vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '145',
      'condition_text': 'Wenn RFF+Z17 in dieser SG15 nicht vorhanden',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Strom',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Gas',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '495',
      'condition_text': 'Der Zeitpunkt muss ≤ dem Wert im DE2380 des DTM+137 sein',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '496',
      'condition_text': 'Der Zeitpunkt muss > dem Wert im DE2380 des DTM+137 sein',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Aus QUOTES BGM DE1004',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Aus REQOTE BGM DE1004',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Auf Selbsteinbau eines iMS oder einer mME wird verzichtet',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Verwendung der ID des MaBiS-ZP',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '505',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '506',
      'condition_text': 'Hinweis: Verwendung der ID der Marktlokation',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '510',
      'condition_text': 'Hinweis: Es ist neben der Information über die Ablehnung auch der unverändert gebliebene Datenstatus informell mitzugeben.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '512',
      'condition_text': 'Hinweis: Aus MSCONS BGM DE1004',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '519',
      'condition_text': 'Hinweis: Aus ORDERS BGM DE1004',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '520',
      'condition_text': 'Hinweis: Zeitpunkt, zu dem der Wechsel erfolgt, falls er zustande kommt',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '521',
      'condition_text': 'Hinweis: Zeitpunkt, ab dem der MSBN tatsächlich den Messstellenbetrieb übernimmt',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '522',
      'condition_text': 'Hinweis: Zeitpunkt, ab dem der gMSB den Messstellenbetrieb übernimmt',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '523',
      'condition_text': 'Hinweis: Wert aus BGM DE1004 der MSCONS, auf die sich die Statusangabe bezieht',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '524',
      'condition_text': 'Hinweis: Wert aus BGM DE1004 der MSCONS, die den Gegenvorschlag enthält',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '525',
      'condition_text': 'Hinweis: Je SG14 sind nur Statusinformationen zu einer MSCONS enthalten',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '530',
      'condition_text': 'Hinweis: Hier ist die Arbeit bzw. Leistung anzugeben, die der Sender der IFTSTA im Lieferschein für den von ihm genannten Zeitraum / Leistungsperiode erwartet hätte.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '531',
      'condition_text': 'Vom MSBN in Schritt 1 des SD verwendete Vorgangsnummer, damit der LF diese bei der Bestellung einer Konfiguration beim MSBN, unter dem Vorbehalt, dass der MSB-Wechsel an der Messlokation erfolgreich sein wird, verwenden kann.',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '532',
      'condition_text': 'Hinweis: Verwendung der ID der Netzlokation',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '533',
      'condition_text': 'Hinweis: Verwendung der ID der Steuerbaren Ressource',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '902',
      'condition_text': 'Format: Wert darf nur positiv oder 0 sein',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '903',
      'condition_text': 'Format: Möglicher Wert: 1',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '906',
      'condition_text': 'Format: max. 3 Nachkommastellen',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '911',
      'condition_text': 'Format: Mögliche Werte: 1 bis n, je Nachricht bei 1 beginnend und fortlaufend aufsteigend',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '950',
      'condition_text': 'Format: Marktlokations-ID',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '951',
      'condition_text': 'Format: Zählpunktbezeichnu ng',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '960',
      'condition_text': 'Format: Netzlokations- ID',
      'edifact_format': 'IFTSTA',
    }),
    dict({
      'condition_key': '961',
      'condition_text': 'Format: SR-ID',
      'edifact_format': 'IFTSTA',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[IFTSTA].2
  None
# ---
# name: TestCliConditions.test_cli_conditions[INSRPT]
  True
# ---
# name: TestCliConditions.test_cli_conditions[INSRPT].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Wenn Nachrichtenabsender vom Kunden informiert wurde.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn SG7 STS+Z06+Z10+ZC1 vorhanden.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Wenn vorhanden.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR in der Rolle NB',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR in der Rolle LF',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'Wenn keine Störung festgestellt werden konnte.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'Wenn keine weitere SG7 mit demselben Meldepunkt und DTM+9 vorhanden',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'Wenn in dieser SG7 STS+Z06+Z10 vorhanden',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Wenn eine Störung festgestellt wurde, die durch den MSB selbständig und unverschuldet nicht behoben werden konnte.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'Wenn in diesem STS DE4405 = Z09',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Wenn in diesem STS DE4405 = Z10',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn eine Störung festgestellt wurde, die durch denMSB behoben wurde.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '13',
      'condition_text': 'Wenn DE2379 = 303',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Strom',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Gas',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '495',
      'condition_text': 'Der Zeitpunkt muss ≤ dem Wert im DE2380 des DTM+137 sein',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '500',
      'condition_text': 'Hinweis: Vorgangsnummer (DOC DE1004) aus Prozessschritt 4b „Bestätigung der Störungsmeldung“ (Gas) bzw. Prozessschritt 2 „Antwort“ (Strom).',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '506',
      'condition_text': 'Hinweis: Zu nutzen, wenn Behebung der Störung durch den MSB selbständig und unverschuldet nicht möglich ist.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '507',
      'condition_text': 'Hinweis: In SG7 FTX+AAO ist anzugeben, was die übergeordnete Ursache ist, aufgrund derer der MSB nicht in der Lage ist die Störung zu beheben.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '508',
      'condition_text': 'Hinweis: Vorgangsnummer aus DOC DE1004.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '509',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '510',
      'condition_text': 'Hinweis: Verwendung der ID der Marktlokation',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '511',
      'condition_text': 'Hinweis: Die Nummerierung beginnt in jedem Dokument bei 1',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '512',
      'condition_text': 'Hinweis: Wurde eine Störung festgestellt und durch den MSB behoben, ist die Segmentgruppe mit demselben Meldepunkt zweimal anzugeben',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '513',
      'condition_text': 'Hinweis: Wurde keine Störung festgestellt, ist die Segmentgruppe genau einmal anzugeben',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '514',
      'condition_text': 'Hinweis: Wurde eine Störung festgestellt, die nicht durch den MSB behoben werden konnte, ist die Segmentgruppe genau einmal anzugeben',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '515',
      'condition_text': 'Hinweis: "≤ dem Wert im DE2380 des DTM+137" bedeutet, dass der dort genannte Tag ≥ dem in diesem DTM genannten Tag sein muss, wenn in DE2379 der Code 102 steht.',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '908',
      'condition_text': 'Format: Mögliche Werte: 1 bis n',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '950',
      'condition_text': 'Format: Marktlokations-ID',
      'edifact_format': 'INSRPT',
    }),
    dict({
      'condition_key': '951',
      'condition_text': 'Format: Zählpunktbezeichnung',
      'edifact_format': 'INSRPT',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[INSRPT].2
  list([
    dict({
      'edifact_format': 'INSRPT',
      'package_expression': '[6]',
      'package_key': '2P',
    }),
    dict({
      'edifact_format': 'INSRPT',
      'package_expression': '[12]',
      'package_key': '3P',
    }),
    dict({
      'edifact_format': 'INSRPT',
      'package_expression': '[9]',
      'package_key': '4P',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[INVOIC]
  True
# ---
# name: TestCliConditions.test_cli_conditions[INVOIC].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Wenn in zu stornierender Rechnung gefüllt',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn es sich um eine Nutzungsüberlassung (Pacht) eines Gerätes handelt',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Wenn es sich um einen Kauf eines Gerätes handelt',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Wenn Steuerschuldnerschaft des Leistungsempfängers vorliegt',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'Wenn NAD+MR DE3207 <> „DE“',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'Wenn NAD+MR DE3207 = „DE“',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'Sofern keine Großkundenpostleitza hl verwendet wird',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'Bei zeitabhängigen Preisen',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Wenn SG26 DTM+203 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'Wenn SG26 DTM+155/156 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Wenn Abschlag anfällt',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn SG26 QTY+136 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '13',
      'condition_text': 'Wenn vorausbezahlter Betrag vorliegt',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'Wenn in selben SG26 LIN DE7140 ="9990001000748" (Mehrmenge)',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'Wenn eine Bilanzierung erfolgt ist',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'Wenn eine Netznutzung erfolgt ist',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Wenn DTM+Z11 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn IMD++WIM nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '19',
      'condition_text': 'Wenn IMD++WIM vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '20',
      'condition_text': 'Wenn fälliger Betrag (SG50 MOA+9) ≥ 0',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '21',
      'condition_text': 'Wenn fälliger Betrag (SG50 MOA+9) < 0',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'Wenn vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '23',
      'condition_text': 'Wenn im selben NAD DE3124 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Wert muss mindestens 10 WT nach Wert aus DTM+137 DE2380 liegen',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '25',
      'condition_text': 'Wert darf maximal 10 WT nach Wert aus DTM+137 DE2380 liegen',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn SG39 ALC+A+:Z04 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn SG39 ALC+C vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn Zuschlag anfällt',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '29',
      'condition_text': '[Wenn DTM+155 (Abrechnungszeitraum Beginn) nicht größer 31.12.2015',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '30',
      'condition_text': 'Wenn MP-ID in NAD+MR nicht in der Rolle MGV oder KN',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '31',
      'condition_text': 'Wenn MP-ID in NAD+MR in der Rolle MGV',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'Wenn SG39 ALC+A+:Z01 (Gemeinderabatt) vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '34',
      'condition_text': 'Wenn in Ursprungsrechnung vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'Wenn DTM+156 (Abrechnungszeitraum Ende) ≥ 01.12.2019',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '37',
      'condition_text': 'Wenn Lieferschein zuvor ausgetauscht wurde',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '40',
      'condition_text': 'Es sind nur die Artikelnummern erlaubt, die in der Codeliste der Artikelnummern und Artikel-ID mit dem entsprechenden Prüfidentifikator versehen sind oder Artikel-ID aus der Codeliste der Artikelnummern und Artikel-ID.',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '41',
      'condition_text': 'Wenn IMD++SOR vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '42',
      'condition_text': 'Wenn DTM+155 (Abrechnungszeitraum Beginn) ≥ 1.1.2023 0: 00 gesetzlicher deutscher Zeit',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '44',
      'condition_text': 'Wenn IMD++ABS nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '45',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '47',
      'condition_text': 'Wenn IMD++Z43 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '48',
      'condition_text': 'Wenn IMD++Z44 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '49',
      'condition_text': 'Wenn IMD++Z43 und IMD+Z44 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '50',
      'condition_text': 'Wenn IMD++SOR nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '51',
      'condition_text': 'Wenn SG26 DTM+156 (Positionsbezogener Abrechnungszeitraum Ende) ≤ 1.1.2023 0:00 gesetzlicher deutscher Zeit',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '53',
      'condition_text': 'Wenn IMD++Z45 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '54',
      'condition_text': 'Wenn IMD++ABR/JVR/ZVR vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '55',
      'condition_text': 'Wenn IMD++ABS vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '56',
      'condition_text': 'Wenn DTM+137 (Nachrichtendatum ≥ 1.1.2023 0: 00 gesetzlicher deutscher Zeit',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '57',
      'condition_text': 'Wenn DTM+156 (Abrechnungszeitraum Ende) ≤ 1. 1.2023 0:00 gesetzlicher deutscher Zeit',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '58',
      'condition_text': 'Wenn in dieser SG52 MOA+113 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '59',
      'condition_text': 'Wenn SG26 DTM+155 (Positionsbezogener Abrechnungszeitraum Beginn) ≥ 1.1.2023 0: 00 gesetzlicher deutscher Zeit',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '60',
      'condition_text': 'Wenn DTM+203 DE2379 in demselben Segment mit Wert 303 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '61',
      'condition_text': 'Wenn DTM+203 DE2379 in demselben Segment mit Wert 102 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '64',
      'condition_text': 'Wenn DTM+156 (Abrechnungszeitraum Ende) ≤ 1. 1.2024 0:00 gesetzlicher deutscher Zeit',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '65',
      'condition_text': 'Wenn SG26 DTM+155 (Positionsbezogener Abrechnungszeitraum Beginn) ≥ 1.1.2024 0: 00 gesetzlicher deutscher Zeit',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '66',
      'condition_text': 'Wenn IMD++KON vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '67',
      'condition_text': 'Es sind nur die Artikelnummern erlaubt, die im Kapitel 2 „Codeliste der Artikelnummer“ in der Codeliste der Artikelnummern und Artikel-ID ein „X“ für den entsprechenden Prüfidentifikatorhaben.',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '68',
      'condition_text': 'Es sind nur die Artikel-ID erlaubt, die im Kapitel 3 „Codeliste der Gruppenartikel-ID und Artikel-ID“ in der Codeliste der Artikelnummern und Artikel-ID ein „X“ in der Spalte „INVOIC Codeverwendung“ haben.',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '69',
      'condition_text': 'Es sind nur die Artikel-ID erlaubt, die im Kapitel 3 „Codeliste der Gruppenartikel-ID und Artikel-ID“ in der Codeliste der Artikelnummern und Artikel-ID ein „SOR“ in der Spalte „INVOIC Codeverwendung“ haben.',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '70',
      'condition_text': 'Wenn IMD++Z45 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '71',
      'condition_text': 'Wenn DTM+155 (Abrechnungszeitraum Beginn) ≥ 1.1.2024 0:00 gesetzlicher deutscher Zeit',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '72',
      'condition_text': 'Wenn MP-ID in NAD+MR in der Rolle LF',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '73',
      'condition_text': 'Wenn IMD++MSB vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '74',
      'condition_text': 'wenn im DE3155 in demselben COM der Code EM vorhanden ist',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '75',
      'condition_text': 'wenn im DE3155 in demselben COM der Code TE / FX / AJ / AL vorhanden ist',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '76',
      'condition_text': 'Wenn MP-ID in NAD+MR in der Rolle NB',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '77',
      'condition_text': 'Wenn SG26 DTM+156 (Positionsbezogener Abrechnungszeitraum Ende) ≤ 1.1.2024 0:00 gesetzlicher deutscher Zeit',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '78',
      'condition_text': 'Wenn GEI+Z08 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '79',
      'condition_text': 'Wenn GEI+Z09 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '80',
      'condition_text': 'Wenn GEI+Z01 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '81',
      'condition_text': 'Wenn GEI+Z04 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '82',
      'condition_text': 'Wenn GEI+Z05 nicht vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '84',
      'condition_text': 'Wenn in dieser SG39 ALC+C+:Z02 / Z03 / Z04 vorhanden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfäng er) aus Sparte Strom',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfäng er) aus Sparte Gas',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Dokumentennummer der ORDERS',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Dokumentennummer der Bilanzierungs- MSCONS',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Ein positiver Betrag ist eine Forderung des Rechnungsstellers.',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Ein positiver Betrag ist eine Forderung des Rechnungsempfängers .',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '507',
      'condition_text': 'Hinweis: Dokumentennummer der SSQNOT',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '508',
      'condition_text': 'Hinweis: Dokumentennummer der QUOTES',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '509',
      'condition_text': 'Hinweis: Verwendung der ID der Marktlokation',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '510',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '512',
      'condition_text': 'Hinweis: Hier ist entweder der Betrag aus MOA+203 oder der um den gültigen Steuerbetrag erhöhte Betrag aus MOA+203 anzugeben.',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '513',
      'condition_text': 'Hinweis: Hier ist das Ergebnis der Multiplikation von MOA+25 mit PCD+3 anzugeben.',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '514',
      'condition_text': 'Hinweis: Dokumentennummer der Lieferschein- MSCONS',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '515',
      'condition_text': 'Hinweis: BGM DE1004 aus INVOIC-Nachricht, die storniert werden soll',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '516',
      'condition_text': 'Hinweis: Ein Lieferschein zu einer Rechnung ist für alle Abrechnungszeiträum e, die erstmals nach dem 1.12.2019 abgerechnet werden und für alle Abrechnungszeiträum e, für die sich nach dem 1.12.2019 geänderte Mengen oder Leistungswerte ergeben, nötig.',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '517',
      'condition_text': 'Hinweis: Dokumentennummer der PDF- Kapazitätsrechnung',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '518',
      'condition_text': 'Hinweis: Im Fall der Stornierung des Auftrags der Unterbrechung: Der Tag an dem der NB die Stornierung empfangen hat Bei erfolgreicher Sperrung: Tag der durchgeführten Sperrung Bei erfolgloser Sperrung: Letzter Sperrversuchstag',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '519',
      'condition_text': 'Hinweis: Stornierte Abschlagsrechnungen sind nicht aufzuführen',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '520',
      'condition_text': 'Hinweis: Es sind nur dieArtikel-IDs aus dem Preisblatt erlaubt',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '521',
      'condition_text': 'Hinweis: BGM DE1004 aus der INVOIC-Nachricht, für die Verzugskosten erhoben werden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '522',
      'condition_text': 'Hinweis: Verwendung der ID der Netzlokation',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '523',
      'condition_text': 'Hinweis: Verwendung der ID der Steuerbaren Ressource',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '524',
      'condition_text': 'Hinweis: Es darf nur eine Information im DE3148 übermittelt werden',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '525',
      'condition_text': 'Hinweis: Verwendung, sofern Netzentgelte geringer als die Pauschale Netzentgeltreduzierun g',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '902',
      'condition_text': 'Format: Möglicher Wert: ≥ 0',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '906',
      'condition_text': 'Format: max. 3 Nachkommastellen',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '908',
      'condition_text': 'Format: Mögliche Werte: 1 bis n',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '910',
      'condition_text': 'Format: Möglicher Wert: < 0 oder ≥ 0',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '911',
      'condition_text': 'Format: Mögliche Werte: 1 bis n, je Nachricht oder Segmentgruppe bei 1 beginnend und fortlaufend aufsteigend',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '912',
      'condition_text': 'Format: max. 6 Nachkommastellen',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '914',
      'condition_text': 'Format: Möglicher Wert: > 0',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '927',
      'condition_text': 'Format: Möglicher Wert: -1',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '930',
      'condition_text': 'Format: max. 2 Nachkommastellen',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '937',
      'condition_text': 'Format: keine Nachkommastelle',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '939',
      'condition_text': 'Format: Die Zeichenkette muss die Zeichen @ und . enthalten',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '940',
      'condition_text': 'Format: Die Zeichenkette muss mit dem Zeichen + beginnen und danach dürfen nur noch Ziffern folgen',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '946',
      'condition_text': 'Format: max. 11 Nachkommastellen',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '950',
      'condition_text': 'Format: Marktlokations-ID',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '951',
      'condition_text': 'Format: Zählpunktbezeichnung',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '960',
      'condition_text': 'Format: Netzlokations-ID',
      'edifact_format': 'INVOIC',
    }),
    dict({
      'condition_key': '961',
      'condition_text': 'Format: SR-ID',
      'edifact_format': 'INVOIC',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[INVOIC].2
  list([
    dict({
      'edifact_format': 'INVOIC',
      'package_expression': '[492]',
      'package_key': '2P',
    }),
    dict({
      'edifact_format': 'INVOIC',
      'package_expression': '[493]',
      'package_key': '3P',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[MSCONS]
  True
# ---
# name: TestCliConditions.test_cli_conditions[MSCONS].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Sofern per ORDERS angefordert',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn das Zeitintervall zwischen ersten SG10 DTM+163 und letzten SG10 DTM+164 mindestens einen Monat umfasst',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Wenn SG9 PIA+5+7-0?: 52.0.22/7-0?:54.0.16/7-0?: 54.0.20/7-0?:54.0.22',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn nicht SG9 PIA+5+7-0?:52.0.22/7-0?:54. 0.16/7-0?:54.0.20/7-0?:54.0. 22',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Wenn nicht SG9 PIA+5+1-b?:9.99.0 (b= Kanal: Wert gemäß Codeliste der OBIS- Kennzahlen und Medien)',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn SG9 PIA+5+1-b?:9.99.0 (b= Kanal: Wert gemäß Codeliste der OBIS- Kennzahlen und Medien)',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'Wenn Aufteilung vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '23',
      'condition_text': 'Wenn UNH DE0070 mit 1 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Bei Aufteilung, in der Nachricht mit der höchsten Übermittlungsnummer',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn SG9 PIA+5+1-1?:1.9.0 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn SG9 PIA+5+1-1?:1.9.0 nicht vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'wenn MP-ID in SG2 NAD+MS in der Rolle NB',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'wenn MP-ID in SG2 NAD+MR in der Rolle LF',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '35',
      'condition_text': 'wenn MP-ID in SG2 NAD+MS in der Rolle MSB',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'wenn MP-ID in SG2 NAD+MR in der Rolle NB',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '38',
      'condition_text': 'wenn in SG6 LOC+172 DE3225 die ID der Messlokation angegeben ist',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '42',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR in der Rolle MSB',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '45',
      'condition_text': 'Wenn SG9 PIA+5+7-b:99.41. 16 (b=Kanal: Wert gemäß Codeliste der OBIS-Kennzahlen und Medien) vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '46',
      'condition_text': 'Wenn Wert in SG6 LOC+172 DE3225 genau 11 Stellen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '48',
      'condition_text': 'Wenn SG9 PIA+5+7-0?: 52.0.22',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '49',
      'condition_text': 'Wenn SG9 PIA+5+7-b?:70. 16.16/7-b?:70.16.20/7-b?:70.16. 22 (b=Kanal: Wert gemäß Codeliste der OBIS-Kennzahlen und Medien) vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '50',
      'condition_text': 'Wenn SG9 PIA+5+7-b?:70. 18.16/7-b?:70.18.20/7-b?:70.18. 22 (b=Kanal: Wert gemäß Codeliste der OBIS-Kennzahlen und Medien) vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '51',
      'condition_text': 'Wenn SG9 PIA+5+7-0?: 33.86.0 vorhanden ist, darf mittels Wiederholung SG9 LIN in derselben Nachricht das SG9 PIA+5+7-0?:52.0.22/7- 0?:54.0.16/7-0?:54.0.20/7- 0?:54.0.22 nicht mehr angegeben werden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '62',
      'condition_text': 'Wenn Wert in SG6 LOC+172 DE3225 genau 33 Stellen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '67',
      'condition_text': 'Wenn es sich um die Referenz auf eine ORDERS handelt',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '68',
      'condition_text': 'Wenn BGM+7 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '69',
      'condition_text': 'Wenn BGM+Z28 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '70',
      'condition_text': 'Wenn BGM+BK vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '71',
      'condition_text': 'Wenn BGM+Z39 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '72',
      'condition_text': 'Wenn SG9 PIA+5+1-b?:1.6.0/1-b?: 3.6.0/1-b?:4.6.0/1-66?: 13.6.0/1-66?:14.6.0 (b=Kanal: Wert gemäß Codeliste der OBIS- Kennzahlen und Medien) vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '73',
      'condition_text': 'Wenn SG9 PIA+5+1-b?:1.9.e/1-b?: 3.9.0/1-b?:4.9.0/1-66?: 13.9.0/1-66?:14.9.0 (b=Kanal: Wert gemäß Codeliste der OBIS- Kennzahlen und Medien, e=Tarif: Wert gemäß Codeliste der OBIS- Kennzahlen und Medien) vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '77',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR der RB HKN-R',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '78',
      'condition_text': 'Wenn SG9 PIA+5+1-66?:13.6.0/1- 66?:14.6.0/1-66?:13.9. 0/1-66?:14.9.0 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '79',
      'condition_text': 'Wenn SG9 PIA+5+1-66?:13.6.0/1- 66?:14.6.0/1-66?:13.9. 0/1-66?:14.9.0 nicht vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '80',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR in der Rolle ÜNB',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '81',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS in der Rolle ÜNB',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '83',
      'condition_text': 'Wenn in derselben SG9 LIN die Angabe STS+10+Z38 nicht vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '84',
      'condition_text': 'Wenn in derselben SG9 LIN die Angabe STS+10+Z39 nicht vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '85',
      'condition_text': 'Wenn in derselben SG9 LIN die Angabe STS+10+Z36 nicht vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '86',
      'condition_text': 'Wenn in derselben SG9 LIN die Angabe STS+10+Z37 nicht vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '87',
      'condition_text': 'Wenn der Wert in DTM+163 DE2380 derselben SG6 LOC+172 mit demselben Wert in SG9 PIA+5 DE7140 der früheste angegebene Zeitpunkt ist',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '88',
      'condition_text': 'Wenn der Wert in DTM+164 DE2380 derselben SG6 LOC+172 mit demselben Wert in SG9 PIA+5 DE7140 der späteste angegebene Zeitpunkt ist',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '90',
      'condition_text': 'Wenn BGM+Z41 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '91',
      'condition_text': 'Wenn BGM+Z42 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '92',
      'condition_text': 'Wenn SG10 QTY DE6063 mit Wert 67 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '93',
      'condition_text': 'Wenn SG10 QTY DE6063 mit Wert 220 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '94',
      'condition_text': 'Wenn SG10 QTY DE6063 mit Wert 201 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '95',
      'condition_text': 'Wenn SG10 QTY DE6063 mit Wert 20 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '96',
      'condition_text': 'Wenn SG10 QTY DE6063 mit Wert Z18 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '97',
      'condition_text': 'Wenn es sich um die Übermittlung eines Wertes aufgrund der Umstellung der Gasqualität handeltAnmerkung--Wie bisher ist bei allen Lastgängen der Wandlerfaktor bei der Übermittlung bereits mit eingerechnet.Wie bisher ist bei allen Lastgängen der Wandlerfaktor bei der Übermittlung bereits mit eingerechnet.Für die NetzgangzeitreiheFür die Netzgangzeitreihe----Anmerkung----Wie bisher ist bei allen Lastgängen der Wandlerfaktor bei der Übermittlung bereits mit eingerechnet.Wie bisher ist bei allen Lastgängen der Wandlerfaktor bei der Übermittlung bereits mit eingerechnet.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '98',
      'condition_text': 'Wenn SG9 PIA+5+SOL:Z08 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '99',
      'condition_text': 'Wenn SG9 PIA+5+WID:Z08 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '100',
      'condition_text': 'Wenn in derselben SG9 LIN das PIA+5+AUA:Z08 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '101',
      'condition_text': 'Wenn in derselben SG9 LIN das PIA+5+FPA:Z08 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '108',
      'condition_text': 'wenn SG9 PIA+5+7-b?:99. 41.16/7-b?:99.42.16 (b=Kanal: Wert gemäß Codeliste der OBIS- Kennzahlen und Medien) vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '111',
      'condition_text': 'Wenn SG10 DTM+9 DE2379 in demselben Segment mit Wert 303 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '113',
      'condition_text': 'wenn SG7 RFF+AGK (Konfigurations-ID) vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '117',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '118',
      'condition_text': 'Nur MP-ID aus Sparte Gas',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '119',
      'condition_text': 'wenn in SG6 LOC+172 DE3225 die ID der Marktlokation angegeben ist',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '121',
      'condition_text': 'wenn BGM+Z43 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '125',
      'condition_text': 'wenn SG9 PIA+5+7-0?:52. 0.22/7-b?:53.0.16/7-b?:55.0.16/ 7-b?:55.0.20/7-b?:55.0.22 (b=Kanal: Wert gemäß Codeliste der OBIS-Kennzahlen und Medien) vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '126',
      'condition_text': 'wenn Plausibilisierungshinweis e vorliegen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '127',
      'condition_text': 'wenn ein Korrekturgrund anzugeben ist',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '128',
      'condition_text': 'Wenn es sich um eine Ablesung handelt, welche keine Ablesung aufgrund der Änderung an der Messtechnik oder deren Konfiguration ist (z.B. Kundenablesung).',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '129',
      'condition_text': 'Wenn es sich um eine Ablesung aufgrund der Änderung an der Messtechnik oder deren Konfiguration handelt (z.B. Gerätewechsel).',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '130',
      'condition_text': 'Wenn innerhalb desselben LIN-Segments neben diesem Segment (SG10 DTM+7 Nutzungszeitpunkt) noch das SG10 DTM+60 (Ausführungs- / Änderungszeitpunkt) oder das SG10 DTM+9 (Ablesedatum) vorhanden, darf der Wert der Differenz zwischen dem größeren und dem kleineren Zeitpunkt der DTM-Segmente ausschließlich < 24 Stunden sein. Findet zwischen den beiden Zeitpunkten die Sommer/Winter- Zeitumschaltung statt, darf der Wert der Differenz ausschließlich < 25 Stunden sein. Findet zwischen den beiden Zeitpunkten die Winter/Sommer- Zeitumschaltung statt, darf der Wert der Differenz ausschließlich < 23 Stunden sein.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '131',
      'condition_text': 'wenn RFF+AGK (Konfigurations-ID) nicht vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '132',
      'condition_text': 'wenn LOC+172 (Identifikationsangabe) DE3225 nicht vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '133',
      'condition_text': 'Wenn innerhalb desselben LIN-Segments neben diesem Segment (SG10 DTM+7 Nutzungszeitpunkt) noch das SG10 DTM+9 (Ablesedatum) mit dem Code 102 im DE2379 vorhanden ist, darf der Wert der Differenz zwischen dem Wert an der Stelle CCYYMMDD des größeren und dem kleineren Zeitpunkt der DTM-Segmente an der Stelle CCYYMMDD ausschließlich 0 oder 1 Tag sein.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '134',
      'condition_text': 'Wenn SG10 DTM+9 DE2379 in demselben Segment mit Wert 102 vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '135',
      'condition_text': 'Der Wert an der Stelle CCYYMMDD muss ≤ dem Wert an der Stelle CCYYMMDD im DE2380 des DTM+137 sein',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '136',
      'condition_text': 'Wenn MSB am Objekt der Marktlokation nicht dem MSB am Objekt der Messlokation, für welche die Wertübermittlung erfolgt entspricht',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '137',
      'condition_text': 'Wenn MSB am Objekt der Marktlokation dem MSB am Objekt der Messlokation, für welche die Wertübermittlung erfolgt entspricht',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '138',
      'condition_text': 'Wenn es sich um eine Korrekturenergiemenge auf einen Wert aus einem iMS handelt',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '141',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR in der Rolle MGV',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '142',
      'condition_text': 'wenn im DE3155 im demselben COM der Code EM vorhanden ist',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '143',
      'condition_text': 'wenn im DE3155 im demselben COM der Code TE / FX / AJ / AL vorhanden ist',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '144',
      'condition_text': 'Wenn Wert in SG7 RFF+AGK DE1154 (Konfigurations-ID) vorhanden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '145',
      'condition_text': 'Wenn in derselben S9 LIN das SG10 DTM+163 (Beginn Messperiode) nicht vorhanden ist.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '146',
      'condition_text': 'Wenn es bei dem zu übermittelnden Wert um einen Wert zu einem Zeitpunkt handelt.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '147',
      'condition_text': 'Wenn in derselben S9 LIN das SG10 DTM+7(Nutzungszeitpunkt) nicht vorhanden ist.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '148',
      'condition_text': 'Wenn es bei dem zu übermittelnden Wert um einen Wert in einem Zeitintervall handelt.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '149',
      'condition_text': 'Wenn in derselben S9 LIN das SG10 DTM+163 (Beginn Messperiode) vorhanden ist.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Strom',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Gas',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '495',
      'condition_text': 'Der Zeitpunkt muss ≤ dem Wert im DE2380 des DTM+137 seinAnmerkung----------Anmerkungfür die Übermittlung der Energiemenge im Zeitintervall zwischen zwei Messwerten und für rechnerisch ermittelte Messwertefür rechnerisch ermittelte MesswerteFür die Übermittlung von Abrechnungsbrennwert und Z-Zahl für den vom Lieferanten über eine Geschäftsdatenanfrage angeforderten Zeitraum.Zur Übermittlung der Korrekturenergiemengen im Zeitintervall zwischen zwei Messwerten für rechnerisch ermittelte Messwerte auf Ebene der Messlokation (z. B. bei Zählerdefekt).',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Es sind nur die Werte erlaubt, die in der EDI@Energy Codeliste der OBIS- Kennzahlen und Medien mit dem entsprechenden Prüfidentifikator versehen sind.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Einmal für die Energiemenge von Beginn des Kalenderjahres bis zum Lieferbeginn und bis zu zweimal für die zwei höchsten Monatsleistungswerte (wegen KAV) von Beginn des Kalenderjahres bis zum Lieferbeginn',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '506',
      'condition_text': 'Hinweis: Nur bei Einspeisemengen und bei Gas zur stündlichen Energiedatenübermittlung',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '509',
      'condition_text': 'Hinweis: Falls es sich um eine Korrekturenergiemenge handelt, ist hier die Referenz auf die MSCONS anzugeben, in der der Zählerstand vorab übermittelt wurde.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '510',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '511',
      'condition_text': 'Hinweis: Verwendung der ID des MaBiS-ZP',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '512',
      'condition_text': 'Hinweis: Verwendung der Bilanzkreisbezeichnung',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '513',
      'condition_text': 'Hinweis: Verwendung der Bezeichnung des Bilanzierungsgebietes',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '514',
      'condition_text': 'Hinweis: Verwendung der ID der Marktlokation',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '515',
      'condition_text': 'Hinweis: Verwendung der Profilbezeichnung',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '516',
      'condition_text': 'Hinweis: Verwendung der Bezeichnung der Profilschar',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '518',
      'condition_text': 'Hinweis: Verwendung der ID der Tranche',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '519',
      'condition_text': 'Hinweis: Nur wenn der gemessene Lastgang der Messlokation nicht dem Lastgang der Marktlokation 1:1 entspricht.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '520',
      'condition_text': 'Hinweis: Wenn es sich um eine 1:1 Beziehung zwischen Messlokation und Marktlokation handelt und der gemessene Lastgang der Messlokation dem Lastgang der Marktlokation 1:1 entspricht, oder wenn der gemessene Lastgang nicht dem Lastgang der Marktlokation entspricht.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '522',
      'condition_text': 'Hinweis: Nur für die Übermittlung der Korrekturenergiemengen im Zeitintervall zwischen zwei Messwerten.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '523',
      'condition_text': 'Hinweis: Nur für die Übermittlung der Energiemenge im Zeitintervall zwischen zwei Messwerten vor der Netznutzungsabrechnun g.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '524',
      'condition_text': 'Hinweis: Nur, wenn es sich um die Übermittlung von Abrechnungsbrennwert und Z-Zahl für den vom Lieferanten über eine Geschäftsdatenanfrage angeforderten Zeitraum handelt.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '525',
      'condition_text': 'Hinweis: Nur für die Übermittlung der Energiemenge im Zeitintervall für eine Marktlokation ohne Messlokation (Pauschalanlage) wenn eines der Ereignisse aus Kapitel 4.2 eingetreten ist.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '526',
      'condition_text': 'Hinweis: Wert aus BGM+Z24 DE1004 der ORDERS mit der die Allokationsliste bestellt wurde.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '528',
      'condition_text': 'Hinweis: Wert aus BGM+Z28 DE1004 der ORDERS mit der die Anforderung von Messwerten erfolgt ist.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '529',
      'condition_text': 'Hinweis: Wert aus BGM+7 DE1004 der ORDERS mit der die Anforderung von Messwerten erfolgt ist.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '530',
      'condition_text': 'Hinweis: Wert aus SG4 IDE+24 DE7402 der UTILMD mit dem der Sender der MSCONS die vorherigen Stammdaten mittels UTILMD übermittelt hat.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '531',
      'condition_text': 'Hinweis: Wert aus BGM+7 DE1004 der MSCONS mit der der Zählerstand übermittelt wurde.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '532',
      'condition_text': 'Hinweis: Wert aus BGM+7/ Z27/Z28/270/Z41/Z42/Z85 DE1004 der MSCONS Nachricht, die storniert wird',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '535',
      'condition_text': 'Hinweis: Verwendung der ID des Netzkoppelpunktes Strom/ Gas',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '536',
      'condition_text': 'Hinweis: Wert aus SG6 RFF+AAV DE1154 der UTILMD mitdem der NB die vorherigen Stammdaten mittels UTILMD übermittelt hat.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '538',
      'condition_text': 'Hinweis: Die Referenz auf die ORDERS ist nur dann anzugeben, wenn diese Werte vom Empfänger auch ursprünglich mittels ORDERS angefragt wurden.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '541',
      'condition_text': 'Hinweis: Ein Korrekturgrund ist anzugeben, wenn: 1. ein bereits an den MP übermittelter vorläufiger Wert nach Stornierung durch einen Ersatzwert ersetzt wird, oder 2. ein bereits an den MP übermittelter Ersatzwert nach Stornierung durch einen Ersatzwert ersetzt wird, oder 3. ein bereits an den MP übermittelter wahrer Wert nach Stornierung durch einen Ersatzwert ersetzt wird, oder 4. ein bereits an den MP übermittelter wahrer Wert nach Stornierung durch einen wahren Wert ersetzt wird.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '543',
      'condition_text': 'Hinweis: Wert aus BGM+Z23 DE1004 der ORDERS mit der die bilanzierte Menge bestellt wurde.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '544',
      'condition_text': 'Hinweis: Bei einer Mengenaufteilung (z. B.Aufgrund einer Abgrenzung) für SG6 LOC+172 muss für den frühesten angegebenen Zeitpunkt zum Beginn des Zeitintervalls (über alle Wiederholungen der LIN-Segmente derselben SG6 LOC+172 hinweg) zu jeder OBIS-Kennziffer ein Zählerstand vorhanden und kommuniziert sein.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '545',
      'condition_text': 'Hinweis: Bei einer Mengenaufteilung (z. B. Aufgrund einer Abgrenzung) für SG6 LOC+172 muss für den spätesten angegebenen Zeitpunkt zum Ende des Zeitintervalls (über alle Wiederholungen der LIN-Segmente derselben SG6 LOC+172 hinweg) zu jeder OBIS-Kennziffer ein Zählerstand vorhanden und kommuniziert sein.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '546',
      'condition_text': 'Hinweis: Eine Referenz auf die Stammdatenänderung des Gerätewechsels ist immer anzugeben, wenn diese dem Sender vorliegt.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '547',
      'condition_text': 'Hinweis: Der Code 270 ist nur zu nutzen, wenn ein Lieferschein, der vor dem 1.4. 2021 erstellt wurde, storniert wird.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '551',
      'condition_text': 'Hinweis: Ein Korrekturgrund ist anzugeben, wenn: 1. ein bereits an den MP übermittelter vorläufiger Wert durch einen Ersatzwert ersetzt wird, oder 2. ein bereits an den MP übermittelter Ersatzwert durch einen Ersatzwert ersetzt wird, oder 3. ein bereits an den MP übermittelter wahrer Wert durch einen Ersatzwert ersetzt wird, oder4. ein bereits an den MP übermittelter wahrer Wert durch einen wahren Wert ersetzt wird.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '553',
      'condition_text': 'Hinweis: Wert aus BGM+Z34 DE1004 der ORDERS mit der die Reklamation von Werten erfolgt ist',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '554',
      'condition_text': 'Hinweis: Verwendung der ID der Technischen Ressource',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '556',
      'condition_text': 'Hinweis: Wert aus BGM+Z45 DE1004 der ORDERS mit der die Anforderung der Ausfallarbeit durch den anfNB erfolgt ist.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '557',
      'condition_text': 'Hinweis: Die Referenz auf die ursprüngliche MSCONS ist anzugeben, wenn es sich um die Übermittlung eines Gegenvorschlags durch den BTR handelt.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '558',
      'condition_text': 'Hinweis: Wert aus BGM+Z45 DE1004 der MSCONS auf die sich die Übermittlung des Gegenvorschlags durch den BTR bezieht.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '559',
      'condition_text': 'Hinweis: Ein Korrekturgrund ist anzugeben, wenn: 1. ein bereits an den MP übermittelter vorläufiger Wert nach Stornierung durch einen Ersatzwert ersetzt wird, oder 2. ein bereits an den MP übermittelter Ersatzwert nach Stornierung durch einen Ersatzwert ersetzt wird, oder 3. ein bereits an den MP übermittelter wahrer Wertnach Stornierung durch einen Ersatzwert ersetzt wird, oder 4. ein bereits an den MP übermittelter wahrer Wert nach Stornierung durch einen wahren Wert ersetzt wird.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '560',
      'condition_text': 'Hinweis: Ein Korrekturgrund ist anzugeben, wenn: 1. ein bereits an den MP übermittelter vorläufiger Wert durch einen Ersatzwert ersetzt wird, oder 2. ein bereits an den MP übermittelter Ersatzwert durch einen Ersatzwert ersetzt wird, oder 3. ein bereits an den MP übermittelter wahrer Wert durch einen Ersatzwert ersetzt wird, oder 4. ein bereits an den MP übermittelter wahrer Wert durch einen wahren Wert ersetzt wird.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '566',
      'condition_text': 'Hinweis: Es sind nur die Werte erlaubt, die im vorherigen Stammdatenaustausch zu diesem Meldepunkt vom MSB zum Zeitpunkt übermittelt wurden.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '567',
      'condition_text': 'Hinweis: Es ist die Konfigurations-ID anzugeben, die im vorherigen Stammdatenaustausch kommuniziert wurde.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '568',
      'condition_text': 'Hinweis:Verwendung ist nur zulässig, wenn es sich um 1:n Beziehung zwischen Markt- und Messlokation handelt und auf Ebene der Messlokation unterschiedliche Ersatzwertbildungsverfa hren verwendet und kommuniziert wurden.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '569',
      'condition_text': 'Hinweis: Bei mehreren Zählerständen einer Messlokation (z. B. HT/NT) ist diese Zeitangabe zu nutzen und eine Wiederholung das SG9 LIN durchzuführen.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '570',
      'condition_text': 'Hinweis: Verwendung ist nur zulässig, wenn es sich um 1:n Beziehung zwischenMarkt- und Messlokation handelt und auf Ebene der Messlokation unterschiedliche Gründe für die Ersatzwertbildung vorliegen und kommuniziert wurden.Anmerkung------Zur Abstimmung der Netzzeitreihen--',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '571',
      'condition_text': 'Hinweis: Verwendung ist nur zulässig, wenn es sich um 1:n Beziehung handelt und auf Ebene der Netzkopplungspunkte unterschiedliche Gründe für die Ersatzwertbildung vorliegen und kommuniziert wurden.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '572',
      'condition_text': 'Hinweis: Verwendung ist nur zulässig, wenn es sich um 1:n Beziehung handelt und auf Ebene der Netzkopplungspunkte unterschiedliche Ersatzwertbildungsverfahren vorliegen und kommuniziert wurden.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '573',
      'condition_text': 'Hinweis: Eine Energiemenge in der Sparte Gas ist gemäß DVGW G685 Arbeitsblatt 4 Kapitel 5.3 auf ganze Kilowattstunden zu runden.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '574',
      'condition_text': 'Hinweis: Wert aus BGM DE1004 der ORDERS mit der die Bestellung der Werte nach Typ 2 erfolg ist',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '575',
      'condition_text': 'Hinweis: Verwendung der ID der Netzlokation',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '576',
      'condition_text': 'Hinweis: Es darf nur eine Information im DE3148 übermittelt werden',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '902',
      'condition_text': 'Format: Möglicher Wert: ≥ 0',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '904',
      'condition_text': 'Format: genau 16 Stellen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '905',
      'condition_text': 'Format: max. 3 Stellen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '906',
      'condition_text': 'Format: max. 3 Nachkommastellen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '907',
      'condition_text': 'Format: max. 4 Nachkommastellen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '908',
      'condition_text': 'Format: Mögliche Werte: 1 bis n',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '909',
      'condition_text': 'Format: Mögliche Werte: 0 bis n',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '910',
      'condition_text': 'Format: Möglicher Wert: < 0 oder ≥ 0',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '917',
      'condition_text': 'Format: max. 4 Vorkommastellen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '918',
      'condition_text': 'Format: Zeichen aus dem über UNOC definierten Zeichensatz, wobei von den Buchstaben nur Großbuchstaben erlaubt sind.',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '922',
      'condition_text': 'Format: TR-ID',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '925',
      'condition_text': 'Format: max. 5 Nachkommastellen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00Bemerkung--Eine Korrektur erfolgt über die Versionierung der Zeitreihen. Der Absender ist für die Versionierung der Zeitreihen verantwortlich.Eine Korrektur erfolgt über die Versionierung der Zeitreihen. Der Absender ist für die Versionierung der Zeitreihen verantwortlich.Eine Korrektur erfolgt über die Versionierung der Nachricht. Der Absender ist für die Versionierung der Nachricht verantwortlich.Eine Korrektur erfolgt über die Versionierung der Werte. Der Absender ist für die Versionierung der Werte verantwortlich.Auf Ebene der Messlokation: Bei der Korrektur von „Korrekturenergiemengen“, die auf Ebene der Messlokation übermittelt worden sind. Hinweis: Bei „Korrekturenergiemengen“, die auf Ebene der Messlokation übermittelt werden, muss in jedem Fall ein Korrekturgrund mitgegeben werden.Bei der Korrektur von Energiemengen auf Ebene der Marktlokation, die als Auslöser aufgrund eines Zählerstandes auf Ebene der Messlokation erzeugt wurden, der den Endzeitpunkt einer Rechnung darstellt. Eine Korrektur erfolgt über die Versionierung der Zeitreihen. Der Absender ist für die Versionierung der Zeitreihen verantwortlich.Eine Korrektur erfolgt über die Versionierung der Zeitreihen. Der Absender ist für die Versionierung der Zeitreihen verantwortlich.Eine Korrektur erfolgt über die Versionierung der Zeitreihen. Der Absender ist für die Versionierung der Zeitreihen verantwortlich.Eine Korrektur erfolgt über die Versionierung der Liste. Der Absender ist für die Versionierung der Liste verantwortlich. Eine Liste, auch wenn diese aufgrund Ihrer Größe in mehrere Listen aufgeteilt wurde, enthält immer dieselbe Versionierung. Referenz auf die bilanzierte Energiemenge in der INVOIC------Eine Korrektur erfolgt über die Versionierung der Werte. Der Absender ist für die Versionierung der Werte verantwortlich.Auf Ebene der Messlokation: Bei der Korrektur von „Korrekturenergiemengen“, die auf Ebene der Messlokation übermittelt worden sind. Hinweis: Bei „Korrekturenergiemengen“, die auf Ebene der Messlokation übermittelt werden, muss in jedem Fall ein Korrekturgrund mitgegeben werden.Bei der Korrektur von Energiemengen auf Ebene der Marktlokation.Eine Korrektur erfolgt über die Versionierung der Werte. Der Absender ist für die Versionierung der Werte verantwortlich.Eine Korrektur erfolgt über die Versionierung der Werte. Der Absender ist für die Versionierung der Werte verantwortlich.Eine Korrektur erfolgt über die Versionierung der Werte. Der Absender ist für die Versionierung der Werte verantwortlich.Eine Korrektur erfolgt über die Versionierung der Werte. Der Absender ist für die Versionierung der Werte verantwortlich.Eine Korrektur erfolgt über die Versionierung der Werte. Der Absender ist für die Versionierung der Werte verantwortlich.Eine Korrektur erfolgt über die Versionierung der Zeitreihen. Der Absender ist für die Versionierung der Zeitreihen verantwortlich.Eine Korrektur erfolgt über die Versionierung der Werte. Der Absender ist für die Versionierung der Werte verantwortlich.--',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '937',
      'condition_text': 'Format: keine Nachkommastelle',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '939',
      'condition_text': 'Format: Die Zeichenkette muss die Zeichen @ und . enthalten',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '940',
      'condition_text': 'Format: Die Zeichenkette muss mit dem Zeichen + beginnen und danach dürfen nur noch Ziffern folgen',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '950',
      'condition_text': 'Format: Marktlokations-ID',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '951',
      'condition_text': 'Format: Zählpunktbezeichnung',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '960',
      'condition_text': 'Format: Netzlokations- ID',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '2001',
      'condition_text': 'Segmentgruppe ist nur einmal je UNH anzugebenEreignisBestellung mit ORDERS BGM+7, IMD+Z13, IMD+Z48 (Wechselereignis)Bestellung mit ORDERS BGM+7, IMD+Z13, IMD+Z48 (Wechselereignis)Bestellung ORDERS BGM+7, IMD+Z13, IMD+Z49 (Zwischenablesung)Ausführungs- / Änderungszeitpunkt (SG10 DTM+60)------Auslöser für die Bereitstellung von Mengen an der Marktlokation?--ja, Bereitstellung von Werten auf Ebene der Marktlokation--EreignisAuf Basis der bisher ausgetauschten Stammdaten bzw. bei Änderung auf Basis: Stammdatenänderung UTILMD BGM+E03, STS+7++ZG7 (Änderung vom MSB ohne Abhängigkeiten) und der damit einhergehenden Verpflichtung des MSBAusführungs- / Änderungszeitpunkt (SG10 DTM+60)--Auslöser für die Bereitstellung von Mengen an der Marktlokation?ja, Bereitstellung von Werten auf Ebene der MarktlokationEreignisÄnderung der Parametrierung ist durchgeführt und: Stammdatenänderung UTILMD BGM+E03, STS+7++ZE8 (Änderung vom MSB mit Abhängigkeiten) versendet.Änderung der Parametrierung ist durchgeführt und: Stammdatenänderung UTILMD BGM+E03, STS+7++ZE8 (Änderung vom MSB mit Abhängigkeiten) versendet.Ausführungs- / Änderungszeitpunkt (SG10 DTM+60)Zeitpunkt zu dem die Änderung der Parametrierung tatsächlich stattgefunden hatZeitpunkt zu dem die Änderung der Parametrierung tatsächlich stattgefunden hatAuslöser für die Bereitstellung von Mengen an der Marktlokation?--ja, Bereitstellung von Werten auf Ebene der MarktlokationEreignisGerätewechsel ist durchgeführt und: Stammdatenänderung UTILMD BGM+E03, STS+7++ZE8 (Änderung vom MSB mit Abhängigkeiten) versendetGerätewechsel ist durchgeführt und: Stammdatenänderung UTILMD BGM+E03, STS+7++ZE8 (Änderung vom MSB mit Abhängigkeiten) versendetAusführungs- / Änderungszeitpunkt (SG10 DTM+60)Zeitpunkt zu dem der Einbau des Gerätes tatsächlich stattgefunden hat.Zeitpunkt zu dem der Ausbau des Gerätes tatsächlich stattgefunden hat.Auslöser für die Bereitstellung von Mengen an der Marktlokation?--ja, Bereitstellung von Werten auf Ebene der MarktlokationEreignisMSB-Wechsel erfolgreich durchgeführt und: IFTSTA BGM+Z09 SG15 STS+Z10+Z14 zu dem der MSB-Wechsel vollzogen wurde, liegt vor.MSB-Wechsel erfolgreich durchgeführt und: IFTSTA BGM+Z09 SG15 STS+Z10+Z14 zu dem der MSB-Wechsel vollzogen wurde, liegt vor.Ausführungs- / Änderungszeitpunkt (SG10 DTM+60)----Auslöser für die Bereitstellung von Mengen an der Marktlokation?--ja, Bereitstellung von Werten auf Ebene der MarktlokationEreignisWert liegt beim NB / LF vor und soll dem MSB zur Verfügung gestellt werdenAusführungs- / Änderungszeitpunkt (SG10 DTM+60)--Auslöser für die Bereitstellung von Mengen an der Marktlokation?--EreignisBestellung ORDERS BGM+7, IMD+Z13, IMD+Z47 (Abgrenzung)Ausführungs- / Änderungszeitpunkt (SG10 DTM+60)--Auslöser für die Bereitstellung von Mengen an der Marktlokation?--',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '2002',
      'condition_text': 'Segmentgruppe ist bis zu drei Mal je SG5 NAD+DP anzugeben',
      'edifact_format': 'MSCONS',
    }),
    dict({
      'condition_key': '2003',
      'condition_text': 'Segmentgruppe ist genau zwei Mal je SG9 LIN anzugeben',
      'edifact_format': 'MSCONS',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[MSCONS].2
  list([
    dict({
      'edifact_format': 'MSCONS',
      'package_expression': '[492]',
      'package_key': '2P',
    }),
    dict({
      'edifact_format': 'MSCONS',
      'package_expression': '[493]',
      'package_key': '3P',
    }),
    dict({
      'edifact_format': 'MSCONS',
      'package_expression': '[92]',
      'package_key': '4P',
    }),
    dict({
      'edifact_format': 'MSCONS',
      'package_expression': '[93]',
      'package_key': '5P',
    }),
    dict({
      'edifact_format': 'MSCONS',
      'package_expression': '[94]',
      'package_key': '6P',
    }),
    dict({
      'edifact_format': 'MSCONS',
      'package_expression': '[95]',
      'package_key': '7P',
    }),
    dict({
      'edifact_format': 'MSCONS',
      'package_expression': '[96]',
      'package_key': '8P',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[ORDCHG]
  False
# ---
# name: TestCliConditions.test_cli_conditions[ORDCHG].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'MP-ID nur aus Sparte Strom',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn BGM+Z51 (Sperrung) vorhanden',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Wenn BGM+Z52 (Entsperrung) vorhanden',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Strom',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Gas',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt.',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '500',
      'condition_text': 'Hinweis: Dokumentennummer aus BGM DE1004 der ORDERS',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Wert aus BGM+Z33 DE1004 der IFTSTA mit der die Information über den Entsperrauftrag übermittelt wurde',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Vorgangsnummer aus CNI DE1490 der IFTSTA mit BGM+Z33 mit der die Information über den Entsperrauftrag übermittelt wurde',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'ORDCHG',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'ORDCHG',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[ORDCHG].2
  None
# ---
# name: TestCliConditions.test_cli_conditions[ORDERS]
  True
# ---
# name: TestCliConditions.test_cli_conditions[ORDERS].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Wenn IMD+Z03 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn BGM+7 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Übernahme der Angabe aus der QUOTES, wenn dort vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS mit Rolle LF vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS mit Rolle NB vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Wenn bekannt',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '13',
      'condition_text': 'Wenn SG2 LOC+172 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS mit Rolle MSB vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'Wenn eine untergeordnete SG vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Wenn ein Segment innerhalb der SG vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn IMD++Z11 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '19',
      'condition_text': 'Wenn IMD++Z12 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '21',
      'condition_text': 'Wenn BGM+Z28 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '23',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR mit Rolle NB vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Wenn IMD++Z35 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS mit Rolle ÜNB vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR mit Rolle MSB vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR aus Sparte Strom',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '29',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR aus Sparte Gas',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'Wenn IMD+Z01 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '34',
      'condition_text': 'Wenn IMD+Z02 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '35',
      'condition_text': 'IMD++Z14+Z06 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR mit Rolle NB nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '38',
      'condition_text': 'Wenn FTX+Z04/Z05 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '39',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS mit Rolle ÜNB nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '45',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS mit Rolle MSB nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '46',
      'condition_text': 'Wenn SG29 IMD++Z46 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '47',
      'condition_text': 'Wenn SG29 IMD++Z46 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '51',
      'condition_text': 'Wenn BGM+Z48 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '52',
      'condition_text': 'Es sind nur die Artikelnummern erlaubt, die in der Codeliste der Artikelnummern des BDEW mit dem entsprechenden Prüfidentifikator versehen sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '54',
      'condition_text': 'Wenn FTX+Z06 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '55',
      'condition_text': 'Wenn DTM+469 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '56',
      'condition_text': 'Wenn DTM+203 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '57',
      'condition_text': 'Wenn im selben SG2 NAD DE3124 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '60',
      'condition_text': 'MP-ID nur aus Sparte Gas',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '61',
      'condition_text': 'MP-ID nur aus Sparte Strom',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '62',
      'condition_text': 'MP-ID mit Rolle MSB',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '63',
      'condition_text': 'MP-ID mit Rolle NB',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '64',
      'condition_text': 'Wenn SG2 NAD+Z03 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '65',
      'condition_text': 'Wenn FTX+Z08 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '67',
      'condition_text': 'Wenn DTM+163 nichtvorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '68',
      'condition_text': 'Wenn DTM+7 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '69',
      'condition_text': 'Wenn NAD+Z23 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '70',
      'condition_text': 'Wenn NAD+Z03 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '75',
      'condition_text': 'Wenn für den erforderlichen Wert keine Zählzeit benötigt wird',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '76',
      'condition_text': 'Wenn in derselben SG29 mit Z27 in LIN DE1229 (Erforderliches Messprodukt der Marktlokation) das PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen, Kapitel 2.1.1 „Standard-Messprodukt der Marktlokation mit der Wahlmöglichkeit der Zuordnung einer Zählzeit“ vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '77',
      'condition_text': 'Wenn im selben CCI im DE7059 der Code Z39 (Code der Zählzeitdefinition) vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '78',
      'condition_text': 'Wenn in derselben SG29 mit Z27 in LIN DE1229 (Erforderliches Messprodukt der Marktlokation) das PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen, Kapitel 2 „Codeliste der Standard-Messprodukt Strom für Werte nach Typ 1“ mit der Werteigenschaft „Blindarbeit“ vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '79',
      'condition_text': 'Wenn eine andere SG29 mit Z27 in LIN DE1229 (Erforderliches Messprodukt der Marktlokation) mit PIA+5+9991000000078:Z11 (für Wirkarbeit Lastgang 1/4 stündlich) vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '80',
      'condition_text': 'Wenn keine andere SG29 mit Z27 in LIN DE1229 (Erforderliches Messprodukt der Marktlokation) mit PIA+5+9991000000078:Z11 (Wirkarbeit Lastgang 1/4 stündlich) vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '81',
      'condition_text': 'Wenn in derselben SG29 mit Z27 in LIN DE1229 (Erforderliches Messprodukt der Marktlokation), das PIA+5+9991000000078:Z11 (Wirkarbeit Lastgang 1/4 stündlich) vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '82',
      'condition_text': 'Wenn eine andere SG29 mit Z27 in LIN DE1229 (Erforderliches Messprodukt der Marktlokation) mit PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen, Kapitel 2.1.1 „Standard-Messprodukt der Marktlokation mit der Wahlmöglichkeit der Zuordnung einer Zählzeit“ vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '83',
      'condition_text': 'Wenn keine andere SG29 mit Z27 in LIN DE1229 (Erforderliches Messprodukt der Marktlokation) mit PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen, Kapitel 2.1.1 „Standard-Messprodukt der Marktlokation mit der Wahlmöglichkeit der Zuordnung einer Zählzeit“ vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '84',
      'condition_text': 'IMD++Z14+Z07 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '85',
      'condition_text': 'Wenn in derselben SG29 mit Z27 in LIN DE1229 (Erforderliches Messprodukt der Marktlokation), das PIA+5+9991000000086:Z11 (Wirkarbeit höchste 1/4 Stunde im Monat) vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '86',
      'condition_text': 'Wenn in derselben SG29 mit Z19 in LIN DE1229 (Erforderliches Messprodukt der Messlokation) das PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen Kapitel 2.3.1 "Standard-Messprodukt der Messlokation mit der Wahlmöglichkeit der Zuordnung einer Zählzeit" vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '87',
      'condition_text': 'Wenn FTX+Z09/Z10 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '91',
      'condition_text': 'Wenn in diesem Datenelement kein anderes Paket in dieser SG30 in derselben SG29 LIN zur Möglichkeit der Angabe von mindestens einem anderen Code führt.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '93',
      'condition_text': 'Wenn in derselben Nachricht eine SG29 mit Z16 in LIN DE1229 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '94',
      'condition_text': 'Wenn in derselben Nachricht eine SG29 mit Z27 in LIN DE1229 nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '95',
      'condition_text': 'Messprodukt-Code aus dem Kapitel 2.1 "Standard- Messprodukte der Marktlokation" der Codeliste der Konfigurationen',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '96',
      'condition_text': 'Messprodukt-Code aus dem Kapitel 2.2 "Standard- Messprodukte der Tranche" der Codeliste der Konfigurationen',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '97',
      'condition_text': 'Wenn FTX+Z10 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '99',
      'condition_text': 'Wenn FTX+Z08/Z10 vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '100',
      'condition_text': 'Messprodukt-Code aus dem Kapitel 2.3 "Standard- Messprodukte der Messlokation" der Codeliste der Konfigurationen',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '101',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR mit Rolle MSB in der Sparte Gas nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '102',
      'condition_text': 'Wenn in derselben SG29 LIN das CCI+++Z25 (Geräteart Wandler) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '103',
      'condition_text': 'Wenn in derselben SG29 LIN das CCI+++Z25 (Geräteart Wandler) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '104',
      'condition_text': 'Wenn MP-ID in SG2 NAD+VY mit Rolle LF vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '105',
      'condition_text': 'Wenn die bisherige Konfiguration mit Zählzeiten des LF vom LF beendet werden soll',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '106',
      'condition_text': 'wenn IMD++Z60 (Abbestellung Messprodukt mit Zählzeitdefinition des LF) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '107',
      'condition_text': 'Wenn IMD++Z57 (Abbestellung Zählzeitdefinition) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '108',
      'condition_text': 'Wenn RFF+AGK(Konfigurations-ID) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '109',
      'condition_text': 'Wenn LOC+172 (Meldepunkt) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '110',
      'condition_text': 'wenn DTM+163 (Beginn Zeitraum für Wertanfrage) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '111',
      'condition_text': 'Messprodukt-Code aus dem Kapitel 3 "Codeliste der Standard-Messprodukte Gas" der Codeliste der Konfigurationen',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '112',
      'condition_text': 'Wenn in derselben SG29 LIN++Z27 (Erforderliches Messprodukt der Marktlokation), das PIA+5+9991000000078: Z11 (Wirkarbeit Lastgang 1/4 stündlich) vorhanden ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '113',
      'condition_text': 'Wenn LIN DE1229 mit Code Z42 (Zählzeitdefinition) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '114',
      'condition_text': 'Wenn LIN DE1229 mit Code Z69 (Schaltzeitdefinition) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '115',
      'condition_text': 'Wenn LIN DE1229 mit Code Z70 (Leistungskurvendefinition) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '117',
      'condition_text': 'Wenn SG29 LIN++Z64 (Erforderliches Produkt Schaltzeitdefinitionen) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '118',
      'condition_text': 'Wenn SG29 LIN++Z65 (Erforderliches ProduktLeistungskurvendefinitionen) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '119',
      'condition_text': 'Wenn SG29 LIN++Z66 (Erforderliches Produkt Ad-hoc- Steuerkanal) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '120',
      'condition_text': 'Wenn SG29 LIN++Z67 (Erforderliches Messprodukt für Werte nach Typ 2 aus Backend) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '121',
      'condition_text': 'Wenn SG29 LIN++Z68 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '122',
      'condition_text': 'Wenn SG1 RFF+Z41 (Referenznummer des Vorgangs der Anmeldung nach WiM) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '123',
      'condition_text': 'Wenn DTM+203 (Ausführungsdatum) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '124',
      'condition_text': 'Wenn SG1 RFF+Z41 (Referenznummer des Vorgangs der Anmeldung nach WiM) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '125',
      'condition_text': 'Es sind nur die Konfigurations-Produkte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.1 „Konfigurationsprodukte Schaltzeitdefinition“ enthalten sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '126',
      'condition_text': 'Es sind nur die Konfigurations-Produkte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.2 „Konfigurationsprodukte Leistungskurvendefinition“ enthalten sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '127',
      'condition_text': 'Es sind nur die Konfigurations-Produkte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.3 „Konfigurationsprodukte Ad- Hoc-Steuerkanal“ enthalten sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '128',
      'condition_text': 'Es sind nur die Messprodukte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.5 „Messprodukte für Werte nach Typ 2 aus Backend für LF und NB“ enthalten sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '129',
      'condition_text': 'Es sind nur die Messprodukte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.4 „Messprodukte mit Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW“ enthalten sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '130',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Marktlokation angegeben ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '131',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Messlokation angegeben ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '132',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Netzlokation angegeben ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '133',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Steuerbaren Ressource angegeben ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '134',
      'condition_text': 'Wenn die Position in der ursprünglichen Antwort auf die Bestellung aus SG1 RFF+Z42 vorhanden war und reklamiert werden soll',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '135',
      'condition_text': 'Wenn SG29 LIN++Z64 (Erforderliches Produkt Schaltzeitdefinitionen) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '136',
      'condition_text': 'Wenn SG29 LIN++Z65 (Erforderliches Produkt Leistungskurvendefinitionen) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '137',
      'condition_text': 'Wenn SG29 LIN++Z66 (Erforderliches Produkt Ad-hoc- Steuerkanal) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '138',
      'condition_text': 'Wenn SG29 LIN++Z67 (Erforderliches Messprodukt für Werte nach Typ 2 aus Backend) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '139',
      'condition_text': 'Wenn SG29 LIN++Z68 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) nicht vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '140',
      'condition_text': 'Messprodukt-Code aus dem Kapitel 2.4 "Standard- Messprodukte der Netzlokation" der Codeliste der Konfigurationen',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '141',
      'condition_text': 'Es sind nur die Messprodukt-Position-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.7 „Art der Werte für Messprodukte nach Typ 2“ enthalten sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '142',
      'condition_text': 'Wenn innerhalb derselben SG29 LIN im PIA+5 DE7140 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) ein Produkt angegeben ist, das in der Codeliste der Konfigurationen im Kapitel 4.4 „Messprodukte mit Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW“ in der Spalte "Auslöser" mit dem Wert "Bei Schwellwertunter- / - überschreitung" gekennzeichnet ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '143',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Technischen Ressource angegeben ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '144',
      'condition_text': 'Wenn SG3 RFF+Z38 (Referenz auf ID der Steuerbaren Ressource) vorhanden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '145',
      'condition_text': 'Wenn für die Steuerbare Ressource in SG3 RFF+Z38 (Referenz auf ID der Steuerbaren Ressource) DE1154, das Produkt bestellt werden soll',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '146',
      'condition_text': 'Wenn für die Netzlokation in LOC+172 DE3225 (Meldepunkt), das Produkt bestellt werden soll',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '149',
      'condition_text': 'Wenn innerhalb derselben SG29 LIN (Erforderliches Modul der Netzentgelte) bereits eine SG30 (Erforderliches Modul der Netzentgelte) mit der Ausprägung CCI+Z62++ZG3 (pauschale Netzentgeltreduzierung) vorhanden ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '150',
      'condition_text': 'Wenn innerhalb derselben SG29 LIN (Erforderliches Modul der Netzentgelte) bereits eine SG30 (Erforderliches Modul der Netzentgelte) mit der Ausprägung CCI+Z62++ZG5 (Anreizmodul zeitvariables Netzentgelt) vorhanden ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '151',
      'condition_text': 'Wenn innerhalb derselben SG29 LIN (Erforderliches Modul der Netzentgelte) keine weitere SG30 (Erforderliches Modul der Netzentgelte) vorhanden ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Strom',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Gas',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '495',
      'condition_text': 'Der Zeitpunkt muss ≤ dem Wert im DE2380 des DTM+137 sein',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '500',
      'condition_text': 'Hinweis: Zählpunkt der BAS',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Zählpunkt der DZR',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Der Qualifier in DE7081 muss aus der in SG1 referenzierten QUOTES übernommen werden',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Angabe eines technischen Ansprechpartners für die Geräteübernahme',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Übernahme der Angabe aus der entsprechenden Position der QUOTES',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '505',
      'condition_text': 'Hinweis: Der Summenbetrag ist entsprechend der Summe der Einzelbeträge der Bestellposition aufzuführen. Bei Annahme des Gesamtangebots kann der Summenbetrag (netto) aus der QUOTES übernommen werden.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '506',
      'condition_text': 'Hinweis: Datum, bis zu dem der MSBA zur Fortführung verpflichtet wird',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '514',
      'condition_text': 'Hinweis: Das Abonnement kann frühestens ab dem aktuellen Liefermonat beim Netzbetreiber gestartet werden.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '515',
      'condition_text': 'Hinweis: Das angegebene Betrachtungszeitintervall bestimmt beim Start Abo bzw. Ende Abo ab bzw. bis wann (einschließlich) das Abo laufen soll.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '517',
      'condition_text': 'Hinweis: Zählpunkt der LF- AASZR',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '518',
      'condition_text': 'Hinweis: Das angegebene Ausführungsdatum bestimmt beim Start Abo bzw. Ende Abo ab bzw. bis wann (einschließlich) das Abo laufen soll.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '519',
      'condition_text': 'Hinweis: Bei Gas bezieht sich die Anforderung immer sowohl auf die vorläufigen Profilwerte als auch auf die endgültigen Profilwerte, falls diese bereits vorliegen.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '521',
      'condition_text': 'Hinweis: Verwendung der ID der Marktlokation',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '522',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '523',
      'condition_text': 'Hinweis: Verwendung der ID der Tranche',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '525',
      'condition_text': 'Hinweis: Wert aus BGM DE1004 der MSCONS',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '527',
      'condition_text': 'Hinweis: Zählpunkt der BG-SZR (Kategorie B)',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '530',
      'condition_text': 'Hinweis: Wert aus BGM+310 DE1004 der QUOTES mit der das Angebot erfolgt ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '531',
      'condition_text': 'Hinweis: Wert aus LIN DE1082 der QUOTES, mit der das Angebot erfolgt ist',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '532',
      'condition_text': 'Hinweis: Wert aus BGM+Z29 DE1004 der QUOTES, mit der das Angebot zur Abrechnung des Messstellenbetriebs erfolgt ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '533',
      'condition_text': 'Hinweis: Gerichtsvollzieher hat Termin vorgegeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '535',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation der Sparte Strom',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '536',
      'condition_text': 'Hinweis: Vorgangsnummer aus IDE DE7402 der UTILTS mit BGM+Z59',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '539',
      'condition_text': 'Hinweis: Es sind nur Codes von Zählzeiten aus Liste des NB anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '540',
      'condition_text': 'Hinweis: Es sind nur Codes von Zählzeiten aus Liste des LF anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '542',
      'condition_text': 'Hinweis: Wert aus BGM+Z57 DE1004 der QUOTES mit der das Angebot erfolgt ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '543',
      'condition_text': 'Hinweis: Wert ausBGM+Z57 DE1004 der ORDERS mit der die Bestellung der Werte erfolgt ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '545',
      'condition_text': 'Hinweis: Es werden nur die Messprodukte der Messlokationen angegeben, die für die in der SG2 genannte Marktlokation bzw. deren Tranchen erforderlich sind. Messprodukte an der Messlokation für weitere Marktlokationen bleiben unverändert.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '547',
      'condition_text': 'Hinweis: Dokumentennummer aus BGM+Z60 DE1004 der UTILTS',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '548',
      'condition_text': 'Hinweis: Wenn dieÄnderung der Gerätekonfiguration mit einer Zählzeit übermittelt wird, ist hier die MP-ID des Eigentümers der Liste der Zählzeit einzutragen. Wenn anstatt der bisherigen Zählzeit keine Zählzeit mehr verwendet werden soll ist hier die MP-ID des Eigentümers der Liste der Zählzeit einzutragen aus welcher bisher die Zählzeit verwendet wurde.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '549',
      'condition_text': 'Hinweis: Findet bei der Reklamation von Zählerständen immer Anwendung. Einzige Ausnahme ist, wenn es sich um die Reklamation eines fehlenden Zählerstandes aufgrund einer Turnusablesung handelt, bei welcher der MSB am Objekt der Marktlokation die Information zur "geplanten Turnusablesung des MSB (Strom)" in der UTILMD im SG6 DTM+752 als Ablesezeitraum (DE2379 mit Code 104 MMWW- MMWW) in den vorherigen Stammdaten übermittelt hatte, denn dann ist keine Zeitpunktangabe möglich, sondern das Zeitintervall in der Segmentausprägung DTM+163 / DTM+164 zu verwenden.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '550',
      'condition_text': 'Hinweis: Findet nur dann Anwendung, wenn es sich um die Reklamation eines fehlenden Zählerstandes aufgrund einer Turnusablesung handelt, bei welcher der MSB am Objekt der Marktlokation die Information zur "geplanten Turnusablesung des MSB (Strom)" in der UTILMD im SG6 DTM+752 als Ablesezeitraum (DE2379 mit Code 104 MMWW- MMWW) in den vorherigen Stammdaten übermittelt hatte.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '551',
      'condition_text': 'Hinweis: Die SG29 ist so oft zu wiederholen, dass alle Messprodukte und Zählzeiten genannt werden, die ab dem in DTM+203 genannten Zeitpunkt auf der Messlokation durch den MSB konfiguriert werden müssen. Nicht genannte Messprodukte sind ab dem Zeitpunkt nicht mehr in der Konfiguration enthalten.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '552',
      'condition_text': 'Hinweis: Verwendung der ID der Netzlokation',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '553',
      'condition_text': 'Hinweis: Verwendung der ID der Steuerbaren Ressource',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '554',
      'condition_text': 'Hinweis: Wert aus BGM+Z74 DE1004 der QUOTES mit der das Angebot erfolgt ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '555',
      'condition_text': 'Hinweis: Vorgangsnummer aus SG4 IDE+24 DE7402 der UTILMD mit BGM+E01 mit der die Anmeldung des MSB-Wechsels erfolgt ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '557',
      'condition_text': 'Hinweis: Es werden nur die Messprodukte der Messlokationen angegeben, die für die in der SG2 genannte Netzlokation erforderlich sind. Messprodukte an der Messlokation für weitere Netzlokationen oder Marktlokationen bleiben unverändert.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '558',
      'condition_text': 'Hinweis: Dokumentennummer aus BGM+Z78 DE1004 der UTILTS',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '559',
      'condition_text': 'Hinweis: Dokumentennummer aus BGM+Z79 DE1004 der UTILTS',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '560',
      'condition_text': 'Hinweis: Vorgangsnummer aus IDE DE7402 der UTILTS mit BGM+Z80',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '561',
      'condition_text': 'Hinweis: Vorgangsnummer aus IDE DE7402 der UTILTS mit BGM+Z81',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '562',
      'condition_text': 'Hinweis: Wert aus BGM+Z73 DE1004 der IFTSTA mit der die Antwort auf die Bestellung der Konfiguration übermittelt wurde',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '563',
      'condition_text': 'Hinweis: Vorgangsnummer aus CNI DE1490 der IFTSTA mit BGM+Z73 mit der die Antwort auf die Bestellung der Konfiguration übermittelt wurde',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '564',
      'condition_text': 'Hinweis: Für den Empfang der Werte nach Typ 2 aus dem SMGW.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '565',
      'condition_text': 'Hinweis: Für den Empfang der Mitteilung zum weiteren Vorgehen eines Steuerbefehls und der Antwort auf die Anweisung eines Steuerbefehls.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '566',
      'condition_text': 'Hinweis: Verwendung der ID der Technischen Ressource',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '903',
      'condition_text': 'Format: Möglicher Wert: 1',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '906',
      'condition_text': 'Format: max. 3 Nachkommastellen',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '908',
      'condition_text': 'Format: Mögliche Werte: 1 bis n',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '911',
      'condition_text': 'Format: Mögliche Werte: 1 bis n, je Nachricht oder Segmentgruppe bei 1 beginnend und fortlaufend aufsteigend',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '912',
      'condition_text': 'Format: max. 6 Nachkommastellen',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '922',
      'condition_text': 'Format: TR-ID',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '930',
      'condition_text': 'Format: max. 2 Nachkommastellen',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '950',
      'condition_text': 'Format: Marktlokations-ID',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '951',
      'condition_text': 'Format: Zählpunktbezeichnu ng',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '960',
      'condition_text': 'Format: Netzlokations-ID',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '961',
      'condition_text': 'Format: SR-ID',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '962',
      'condition_text': 'Format: max. 6 Vorkommastellen',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '967',
      'condition_text': 'Format: Zertifikatskörper gemäß X509.1, BSI TR-03109-4',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2001',
      'condition_text': 'Die SG29 ist so oft zu wiederholen, wie ab dem DTM+203 (Ausführungsdatum) Tranchen zu der in der SG2 genannten Marktlokation vorhanden sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2002',
      'condition_text': 'Ist mindestens zwei Malanzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2003',
      'condition_text': 'Die SG29 ist so oft zu wiederholen, wie ab dem DTM+203 (Ausführungsdatum) Messlokationen zu der in der SG2 genannten Marktlokation vorhanden sind und für jede dieser Messlokationen müssen alle Messprodukte genannt sein, die ab dem DTM+203 (Ausführungsdatum) in der SG2 genannten Marktlokation bzw. deren Tranchen vorhanden sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2004',
      'condition_text': 'Die SG29 ist so oft zu wiederholen, dass alle Geräte der betroffenen Geräteart die im Rahmen des Gerätewechsels aufgrund MSB-Wechsel getauschtwerden sollen genannt sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2005',
      'condition_text': 'Pro SG29 LIN ist die SG34 RFF+Z09 (Gerätenummer) genau einmal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2006',
      'condition_text': 'Pro SG29 LIN ist die SG34 RFF+Z09 (Gerätenummer) bis zu dreimal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2007',
      'condition_text': 'Die SG29 ist so oft zu wiederholen, wie ab dem DTM+203 (Ausführungsdatum) Messlokationen zu der in der SG2 genannten Netzlokation vorhanden sind und für jede dieser Messlokationen müssen alle Messprodukte genannt sein, die ab dem DTM+203 (Ausführungsdatum) in der SG2 genannten Netzlokation vorhanden sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2050',
      'condition_text': 'Pro Nachricht ist die SG29 genau einmal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2060',
      'condition_text': 'Pro Nachricht ist die SG29 LIN+Z64 (Erforderliches Produkt Schaltzeitdefinitionen) maximal einmal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2061',
      'condition_text': 'Pro Nachricht ist die SG29 LIN++Z65 (Erforderliches Produkt Leistungskurvendefinitionen) maximal einmal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2062',
      'condition_text': 'Pro Nachricht ist die SG29 LIN++Z66 (Erforderliches Produkt Ad-hoc-Steuerkanal) maximal einmal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2063',
      'condition_text': 'Pro Nachricht ist die SG29LIN++Z67 (Erforderliches Messprodukt für Werte nach Typ 2 aus Backend) maximal einmal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2064',
      'condition_text': 'Pro Nachricht ist die SG29 LIN++Z68 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) maximal einmal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2065',
      'condition_text': 'Diese SG30 ist so oft zu wiederholen, wie zu den unterschiedlichen Messprodukt- Position-Codes zu dem innerhalb derselben SG29 LIN im PIA+5 DE7140 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) angegebenen Produkt ein Produkt angegeben ist, das in der Codeliste der Konfigurationen im Kapitel 4.4 „Messprodukte mit Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW“ in der Spalte "Auslöser" mit dem Wert "Bei Schwellwertunter- / - überschreitung" gekennzeichnet ist.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2066',
      'condition_text': 'Die SG3 RFF+Z37 Referenz auf ID der Technischen Ressource ist so oft zu wiederholen, bis alle IDs der Technischen Ressourcen angegeben sind, die zusätzlich zur Technischen Ressource in LOC+172 DE3225, die der Steuerbaren Ressource in SG3 RFF+Z38 Referenz auf ID der Steuerbaren Ressource, DE1154 mit diesem Vorgang zugeordnet werden sollen genannt sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2089',
      'condition_text': 'Die SG29 ist so oft zu wiederholen, dass alle Messprodukte ab dem DTM+203 (Ausführungsdatum) zu der in der SG2 genannten Marktlokation genannt sind.',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2090',
      'condition_text': 'Für 33-stellige ID im SG2 LOC+172 (Meldepunkt) DE3225 mindestens einmal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2092',
      'condition_text': 'Pro Nachricht ist die SG29 maximal einmal anzugeben',
      'edifact_format': 'ORDERS',
    }),
    dict({
      'condition_key': '2093',
      'condition_text': 'Pro SG29 LIN (Erforderliches Modul derNetzentgelte) ist die SG30 (Erforderliches Modul der Netzentgelte) mindestens einmal und maximal zweimal anzugeben.',
      'edifact_format': 'ORDERS',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[ORDERS].2
  list([
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[78]',
      'package_key': '2P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[84] ∧ [76] ∧ [79]',
      'package_key': '3P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[84] ∧ [76] ∧ [80]',
      'package_key': '4P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[84] ∧ [81] ∧ [82]',
      'package_key': '5P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[84] ∧ [81] ∧ [83]',
      'package_key': '6P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[35] ∧ [81] ∧ [82]',
      'package_key': '7P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[35] ∧ [81] ∧ [83]',
      'package_key': '8P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[35] ∧ [76] ∧ [79]',
      'package_key': '9P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[84] ∧ [85] ∧ [79]',
      'package_key': '10P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[35] ∧ [76] ∧ [80]',
      'package_key': '11P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[91]',
      'package_key': '12P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[149]',
      'package_key': '13P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[150]',
      'package_key': '14P',
    }),
    dict({
      'edifact_format': 'ORDERS',
      'package_expression': '[151]',
      'package_key': '15P',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[ORDRSP]
  False
# ---
# name: TestCliConditions.test_cli_conditions[ORDRSP].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Wenn BGM+7 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Wenn MP-ID in SG3 NAD+MS mit Rolle NB vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Wenn MP-ID in SG3 NAD+MR mit Rolle LF vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'Wenn MP-ID in SG3 NAD+MS mit Rolle LF vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'Übernahme der Angabe aus der ORDERS, wenn dort vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Wenn MP-ID in SG3 NAD+MS mit Rolle LF vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'Wenn MP-ID in SG3 NAD+MS mit Rolle MSB vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Wenn AJT+A09+E_0470 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn der NB eine unverbindliche Preisinformation angeben kann',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'Wenn MP-ID in SG3 NAD+MR mit Rolle MSB vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'Wenn MP-ID in SG3 NAD+MR mit Rolle NB vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'Wenn MP-ID in SG3 NAD+MR mit Rolle ÜNB vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Der hier angegebene Code des Prüfschritts muss im EBD dem Cluster Zustimmung zugeordnet sein',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Der hier angegebene Code des Prüfschritts muss im EBD dem Cluster Ablehnung zugeordnet sein',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '19',
      'condition_text': 'Es sind nur die Artikelnummern erlaubt, die in der Codeliste der Artikelnummern des BDEW mit dem entsprechenden Prüfidentifikator versehen sind.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '21',
      'condition_text': 'Wenn IMD++Z01vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'Wenn IMD++Z02 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '23',
      'condition_text': 'Wenn IMD++Z03 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Wenn BGM+Z51 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '25',
      'condition_text': 'Wenn BGM+Z52 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn AJT+A05+E_0470 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn AJT+A99 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '29',
      'condition_text': 'MP-ID nur aus Sparte Gas',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '30',
      'condition_text': 'MP-ID nur aus Sparte Strom',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '31',
      'condition_text': 'MP-ID mit Rolle MSB',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'MP-ID mit Rolle NB',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'Wenn AJT+A02/ A03+E_0488 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '34',
      'condition_text': 'wenn vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '37',
      'condition_text': 'Wenn in dieser Nachricht das SG8 CUX+2 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '38',
      'condition_text': 'Möglicher Wert: ZB4 oder ZB5',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '39',
      'condition_text': 'Möglicher Wert: E17 oder Z07',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '40',
      'condition_text': 'Wenn der Code im DE3207 in der "EDI@Energy Codeliste der europäischen Ländercodes" in der Spalte "PLZ vorhanden" ein "X" enthält',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '41',
      'condition_text': 'wenn SG2 AJT (Einzelheiten zu einer Anpassung/Änderung) DE4465 mit Wert ZB5 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '42',
      'condition_text': 'Wenn SG2 AJT+Z07 (Antwortkategorie: Ablehnung (Keine Berechtigung)) vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '43',
      'condition_text': 'Wenn AJT+A02/ A03+E_1001 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '44',
      'condition_text': 'Wenn AJT+A05+E_1000vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '45',
      'condition_text': 'Wenn AJT+A09+E_1000 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '46',
      'condition_text': 'Wenn AJT+A06+E_0552 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '47',
      'condition_text': 'Wenn AJT+A06+E_0553 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '48',
      'condition_text': 'Wenn AJT+A06+E_0554 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '49',
      'condition_text': 'nur, wenn in ursprünglicher Nachricht IMD++Z60 (Abbestellung Messprodukt mit Zählzeitdefinition des LF) vorhanden war',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '52',
      'condition_text': 'wenn es sich bei der Reklamation um die Reklamation der ausgerollten Leistungskurvendefinitionen handelte',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '53',
      'condition_text': 'Vorgangsnummer aus IDE DE7402 der UTILTS mit BGM+Z59',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '54',
      'condition_text': 'Vorgangsnummer aus IDE DE7402 der UTILTS mit BGM+Z80',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '55',
      'condition_text': 'Vorgangsnummer aus IDE DE7402 der UTILTS mit BGM+Z81',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '56',
      'condition_text': 'wenn SG2 AJT+A02/A03/ A06/A07/A10/A11+E_0548 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '57',
      'condition_text': 'wenn SG2 AJT+A02/A03/ A06/A07/A10/A11+E_0549 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '58',
      'condition_text': 'wenn SG2 AJT+A02/A03/ A06/A07+E_0550 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '59',
      'condition_text': 'wenn SG2 AJT+A02/A03/ A06/A07/A10/A11+E_0551 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '60',
      'condition_text': 'wenn es sich bei der Reklamation um die Reklamation der Übersicht der Zählzeitdefinitionen handelte',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '61',
      'condition_text': 'wenn es sich bei der Reklamation um die Reklamation der Übersicht der Schaltzeitdefinitionen handelte',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '62',
      'condition_text': 'wenn es sich bei der Reklamation um die Reklamation der Übersicht der Leistungskurvendefinitionen handelte',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '63',
      'condition_text': 'Dokumentennummer aus BGM+Z60 DE1004 der UTILTS',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '64',
      'condition_text': 'Dokumentennummer aus BGM+Z78 DE1004 der UTILTS',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '65',
      'condition_text': 'Dokumentennummer aus BGM+Z79 DE1004 der UTILTS',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '66',
      'condition_text': 'wenn SG2 AJT+A01/A02/ A03+E_0544 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '67',
      'condition_text': 'wenn SG2 AJT+A01/A02/ A03+E_0545 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '68',
      'condition_text': 'wenn SG2 AJT+A02/ A03+E_0546 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '69',
      'condition_text': 'wenn SG2 AJT+A01/A02/ A03+E_0547 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '70',
      'condition_text': 'wenn es sich bei der Reklamation um die Reklamation der ausgerollten Zählzeitdefinitionen handelte',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '71',
      'condition_text': 'wenn es sich bei der Reklamation um die Reklamation der ausgerollten Schaltzeitdefinitionen handelte',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '72',
      'condition_text': 'wenn AJT+A04+E_0552 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '73',
      'condition_text': 'wenn AJT+A04+E_0553 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '74',
      'condition_text': 'wenn AJT+A04+E_0554 vorhanden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfäng er) aus Sparte Strom',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfäng er) aus Sparte Gas',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '500',
      'condition_text': 'Hinweis: Angabe eines technischen Ansprechpartners für die Geräteübernahme',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Übernahme der Angabe aus der entsprechenden Position der ORDERS',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Hinweis: Wert aus LIN DE1082 der ORDERS mit der die Bestellung erfolgt ist',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Datum, bis zu dem der MSBA zur Fortführung verpflichtet wurde',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Ggf. korrigiert bei einer Zeitangabe in der ORDERS, die außerhalb des max. möglichen Weiterverpflichtungszeitraum s ist. Als Antwort wird dann in SG2 AJT Zustimmung mit Terminänderung angegeben.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '513',
      'condition_text': 'Hinweis: Wert aus BGM+Z12 DE1004 der ORDERS, mit der die Bestellung erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '518',
      'condition_text': 'Hinweis: Wert aus BGM+Z10 DE1004 der ORDERS, mit der die Bestellung erfolgt ist',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '519',
      'condition_text': 'Hinweis: Wert aus BGM+7 DE1004 der ORDERS, mit der die Bestellung erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '520',
      'condition_text': 'Hinweis: Wert aus BGM+Z29 DE1004 derORDERS, mit der die Anfrage zur Beendigung der Rechnungsabwicklung erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '521',
      'condition_text': 'Hinweis: Wert aus BGM+Z61/Z62/Z63 DE1004 der ORDERS, mit der die Anforderung von Stammdaten erfolgt ist',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '522',
      'condition_text': 'Hinweis: Wert aus BGM+7/ Z28/Z48 DE1004 der ORDERS, mit der die Anforderung von Werten erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '523',
      'condition_text': 'Hinweis: Wert aus BGM+7 DE1004 der ORDERS, mit der die Anforderung Anforderung von Brennwert und Zustandszahl erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '524',
      'condition_text': 'Hinweis: Wert aus BGM+Z14 DE1004 der ORDERS, mit der die Anfrage vom MSB Gas erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '525',
      'condition_text': 'Hinweis: Wert aus BGM+Z24 DE1004 der ORDERS, mit der die Anforderung Allokationsliste erfolgt ist',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '526',
      'condition_text': 'Hinweis: Wert aus BGM+Z23 DE1004 der ORDERS, mit der die Anforderung bilanzierte Menge erfolgt ist',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '527',
      'condition_text': 'Hinweis: Wert aus BGM+Z34 DE1004 der ORDERS, mit der die Reklamation von Werten erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '528',
      'condition_text': 'Hinweis: Der Summenbetrag ist entsprechend der Summe der Einzelbeträge der Bestellposition aufzuführen. Bei der Bestellbestätigung kann der Summenbetrag (netto) aus der ORDERS übernommen werden',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '529',
      'condition_text': 'Hinweis: Dokumentennummer aus BGM DE1004 der ORDERS',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '530',
      'condition_text': 'Hinweis: Dokumentennummer aus BGM DE1004 der ORDCHG',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '533',
      'condition_text': 'Hinweis: Wert aus BGM+Z51 DE1004 der ORDCHG',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '534',
      'condition_text': 'Hinweis: Wert aus BGM+Z52 DE1004 der ORDCHG',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '535',
      'condition_text': 'Hinweis: Wert aus BGM+Z13 DE1004 der ORDERS, mit der die Ankündigung Gerätewechselabsicht erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '536',
      'condition_text': 'Hinweis: Es ist die MP-ID des Eigentümers (MSB) zur bilateralen Klärung anzugeben, wenn der angefragte MSB nicht selber der Eigentümer ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '537',
      'condition_text': 'Hinweis: Wert aus BGM+Z72 DE1004 der ORDERS, mit der die Bestellung Beendigung der Konfiguration erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '538',
      'condition_text': 'Hinweis: Wert aus BGM+Z76 DE1004 der ORDERS, mit der die Reklamation der Konfiguration erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '539',
      'condition_text': 'Hinweis: Wert aus BGM+Z73/Z74 DE1004 der ORDERS, mit der die Bestellung der Konfiguration erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '541',
      'condition_text': 'Hinweis: Wert aus BGM+Z84 DE1004 der ORDERS, mit der die Bestellung Änderung Netzentgelte aufgrund netzorientierter Steuerung erfolgt ist.',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '902',
      'condition_text': 'Format: Format: Möglicher Wert: ≥ 0',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '903',
      'condition_text': 'Format: Möglicher Wert: 1',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '908',
      'condition_text': 'Format: Mögliche Werte: 1 bis n',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '911',
      'condition_text': 'Format: Mögliche Werte: 1 bis n, je Nachricht oder Segmentgruppe bei 1 beginnend und fortlaufend aufsteigend',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '912',
      'condition_text': 'Format: max. 6 Nachkommastellen',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '930',
      'condition_text': 'Format: max. 2 Nachkommastellen',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'ORDRSP',
    }),
    dict({
      'condition_key': '2036',
      'condition_text': 'Pro Nachricht ist die SG27 genau einmal anzugeben',
      'edifact_format': 'ORDRSP',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[ORDRSP].2
  None
# ---
# name: TestCliConditions.test_cli_conditions[PARTIN]
  True
# ---
# name: TestCliConditions.test_cli_conditions[PARTIN].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn der Code im DE3207 in der "EDI@Energy Codeliste der europäischen Ländercodes" in der Spalte "PLZ vorhanden" ein "X" enthält',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'wenn vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Wenn Vorgängerversion vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle LF',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'wenn im DE3155 im demselben COM der Code EM vorhanden ist',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'wenn im DE3155 im demselben COM der Code TE / FX / AJ / AL vorhanden ist',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'wenn im DE3155 im demselben COM der Code TE / FX vorhanden ist',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Wenn die Kommunikationsdaten vom Absender nicht mehr aktiv sind.',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'Wenn BGM DE1373 = 11 (Dokument nicht verfügbar) nicht vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Wenn SG4 NAD+SU (Lieferant) DE3207 mit Code „DE“ vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn SG4 NAD+DDM (Netzbetreiber) DE3207 mit Code „DE“ vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '13',
      'condition_text': 'Wenn SG4 NAD+DEB (Messstellenbetreiber) DE3207 mit Code „DE“ vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'Wenn SG4 NAD+SU (Lieferant) DE3207 der Code „DE“ nicht vorhanden ist',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'Wenn SG4 NAD+DDM (Netzbetreiber) DE3207 der Code „DE“ nicht vorhanden ist',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'Wenn SG4 NAD+DEB (Messstellenbetreiber) DE3207 der Code „DE“ nicht vorhanden ist',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle LF/NB/MSB',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle LF/MSB',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '19',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle LF/MSB/ NB/ÜNB',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '20',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle LF/MSB/ÜNB',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '21',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle LF/NB/ESA',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle MSB',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '23',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle NB/ÜNB',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle NB/LF/ MSB/ESA',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '25',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle NB',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle NB/LF/BKV/ BIKO',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn SG4 NAD+Z31 (Übertragungsnetzbetreiber) DE3207 mit Code „DE“ vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn SG4 NAD+Z34 (Bilanzkoordinator) DE3207 mit Code „DE“ vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '29',
      'condition_text': 'Wenn SG4 NAD+Z35 (Bilanzkreisverantwortlicher) DE3207 mit Code „DE“ vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '30',
      'condition_text': 'Wenn SG4 NAD+Z36 (Energieserviceanbieter) DE3207 mit Code „DE“ vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '31',
      'condition_text': 'Wenn SG4 NAD+Z31 (Übertragungsnetzbetreiber) DE3207 mit Code „DE“ nicht vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'Wenn SG4 NAD+Z34 (Bilanzkoordinator) DE3207 mit Code „DE“ nicht vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'Wenn SG4 NAD+Z35 (Bilanzkreisverantwortlicher) DE3207 mit Code „DE“ nicht vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '34',
      'condition_text': 'Wenn SG4 NAD+Z36 (Energieserviceanbieter) DE3207 mit Code „DE“ nicht vorhanden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '35',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle ÜNB',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle BKV',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Strom',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Gas',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt.',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '500',
      'condition_text': 'Hinweis: Es kann der Firmenname eines Dienstleisters oder die identische Firmenbezeichnung aus SG4 NAD+SU / DDM / DEB / Z31 / Z34 / Z35 / Z36 eingetragen werden.',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Es darf kein Name einer natürlichen Person übermittelt werden, stattdessen ist die organisatorische Einheit im Unternehmen zu nennen.',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Es darf nur eine Information im DE3148 übermittelt werden',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Angabe erfolgt in gesetzlicher deutscher Zeit',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Es ist mindestens dieUmsatzsteuer- bzw. Steuernummer zu nennen, die in der INVOIC genutzt wird.',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '505',
      'condition_text': 'Wenn eine Vorgängerversion (RFF+ACW) angegeben ist, so muss der Wert in diesem DE1056 mindestens um 1 höher sein, als der Wert aus DE1056 der Vorgängerversion (RFF+ACW).',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '506',
      'condition_text': 'Hinweis: Das Datenelement ist so zu füllen, dass sein Inhalt den Vorgaben des USt.- Gesetzes genügt, so dass der Empfänger diese Daten in einer INVOIC nutzen kann.',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '507',
      'condition_text': 'Hinweis: Für den Empfang der Information über die erfolgreiche Einrichtung eines Steuerbefehls',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '908',
      'condition_text': 'Format: Mögliche Werte: 1 bis n',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '939',
      'condition_text': 'Format: Die Zeichenkette muss die Zeichen @ und . enthalten',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '940',
      'condition_text': 'Format: Die Zeichenkette muss mit dem Zeichen + beginnen und danach dürfen nur noch Ziffern folgen',
      'edifact_format': 'PARTIN',
    }),
    dict({
      'condition_key': '967',
      'condition_text': 'Format: Zertifikatskörper gemäß X509.1, BSI TR-03109-4',
      'edifact_format': 'PARTIN',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[PARTIN].2
  list([
    dict({
      'edifact_format': 'PARTIN',
      'package_expression': '[11] ⊻ [12] ⊻ [13] ⊻ [27] ⊻ [28] ⊻ [29] ⊻ [30]',
      'package_key': '2P',
    }),
    dict({
      'edifact_format': 'PARTIN',
      'package_expression': '[14] ⊻ [15] ⊻ [16] ⊻ [31] ⊻ [32] ⊻ [33] ⊻ [34]',
      'package_key': '3P',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[PRICAT]
  False
# ---
# name: TestCliConditions.test_cli_conditions[PRICAT].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Wenn Vorgängerversion vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn in dieser SG36 LIN in DE7140 9990001000813 vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Wenn IMD+X vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Wenn SG36 IMD+C in diesem IMD vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'Wenn SG36 IMD+X in diesem IMD vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'Wenn in dieser SG36 LIN in DE7140 9990001000798 vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'Wenn in dieser SG36 LIN in DE7140 9990001000798 nicht vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'Wenn das in DE1001 angegebene Preisblatt vom NB nicht genutzt wird.',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Wenn BGM DE1373 =11 nicht vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'Wenn eine weitere Zone für diese Gruppenartikel-ID vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'je UNB ist nur eine Nachricht mit BGM+Z04 in der Übertragungsdatei erlaubt (nur eine Nachricht je Übertragungsdatei)',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'je UNB ist maximal je Code aus DE1001 eine Nachricht in der Übertragungsdatei erlaubt',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '19',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'Wenn die Artikel-ID aus dieser SG36 LIN DE7140 in der EDI@Energy Codeliste der Artikelnummern und Artikel-ID in der Spalte "PRICAT Preisangabe" ein X hat',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Wenn in dieser SG36 Wert von LIN DE7140 im Format n1- n2-n1-n8-n2-n1',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn BGM DE1001 = Z70 vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn BGM DE1001 = Z70 nicht vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn die zugehörige Artikel-ID in der letzten Stelle eine 1 ist',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '29',
      'condition_text': 'Wenn die zugehörige Artikel- ID in der letzten Stelle > 1 ist',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '30',
      'condition_text': 'wenn MP-ID in SG2 NAD+MR in der Rolle LF',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '31',
      'condition_text': 'wenn BGM DE1001 = Z32',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'wenn der Zeitpunkt im DTM+157 DE2380 < 01.01. 2024 00:00 Uhr gesetzlicher deutscher Zeit',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'wenn der Zeitpunkt im DTM+157 DE2380 ≥ 01.01. 2024 00:00 Uhr gesetzlicher deutscher Zeit',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '34',
      'condition_text': 'wenn BGM DE1001 = Z77',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '35',
      'condition_text': 'Wenn das in DE1001 angegebene Preisblatt vom MSB nicht genutzt wird.',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'wenn MP-ID in SG2 NAD+MR in der Rolle NB',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '37',
      'condition_text': 'Wenn im DE3155 in demselben COM der Code EM vorhanden ist',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '38',
      'condition_text': 'Wenn im DE3155 in demselben COM der Code TE / FX / AJ / AL vorhanden ist',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '39',
      'condition_text': 'Es sind nur Werte aus der EDI@Energy Codeliste der Artikelnummern und Artikel-ID erlaubt, die in der Spalte MaBiS ein X haben',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '40',
      'condition_text': 'Es sind nur Werte aus der EDI@Energy Codeliste der Artikelnummern und Artikel-ID erlaubt, die in der Spalte H ein X haben',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '41',
      'condition_text': 'Es sind nur Werte aus der EDI@Energy Codeliste der Artikelnummern und Artikel-ID erlaubt, die in der Spalte "PRICAT Codeverwendung" ein X haben',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '42',
      'condition_text': 'Es sind nur Werte erlaubt, die die Bildungsvorschrift der EDI@Energy Codeliste der Artikelnummern und Artikel-ID erfüllen, und die in der Spalte "PRICAT Codeverwendung" ein X haben',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '43',
      'condition_text': 'Wenn BGM DE1001 = Z32 und LIN DE7140 im Format n1-n2-n1-n3, dann muss der hier genannte Zeitpunkt ≥ 01. 01.2024 00:00 Uhr gesetzlicher deutscher Zeit sein',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '44',
      'condition_text': 'Wenn BGM DE1001 = Z77, dann muss der hier genannte Zeitpunkt ≥ 01.10. 2023 00:00 Uhr gesetzlicher deutscher Zeit sein.',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '45',
      'condition_text': 'Es sind nur Werte aus der EDI@Energy Codeliste der Artikelnummern und Artikel-ID erlaubt, die in dieser in Kapitel "Abrechnung Messstellenbetrieb für die Sparte Strom" genannt sind',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '46',
      'condition_text': 'Es sind nur Werte aus der EDI@Energy Codeliste der Artikelnummern und Artikel-ID erlaubt, die in dieser in Kapitel "Artikel-ID für den Universalbestellprozess für die Sparte Strom" genannt sind',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '47',
      'condition_text': 'Wenn BGM DE1001 = Z32 und LIN DE7140 im Format n13, dann muss der hier genannte Zeitpunkt < 01.01. 2024 00:00 Uhr gesetzlicher deutscher Zeit sein',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '48',
      'condition_text': 'Wenn in dieser SG36 LIN in DE7140 einer der Codes 1-01-6- 005 / 1-01-9-001 / 1-01-9-002 / 1-02-0-015 / 1-03-8-001 / 1-03- 8-002 / 1-03-8-003 / 1-03-8-004 / 1-03-9-001 / 1-03-9-002 / 1-03- 9-003 / 1-03-9-004 / 1-07-4-001 vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '49',
      'condition_text': 'Wenn in dieser SG36 LIN in DE7140 keiner der Codes 1-01-6- 005 / 1-01-9-001 / 1-01-9-002 /1-02-0-015 / 1-03-8-001 / 1-03- 8-002 / 1-03-8-003 / 1-03-8-004 / 1-03-9-001 / 1-03-9-002 / 1-03- 9-003 / 1-03-9-004 / 1-07-4-001 vorhanden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Strom',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Gas',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '495',
      'condition_text': 'Der Zeitpunkt muss ≤ dem Wert im DE2380 des DTM+137 sein',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Preis in Euro je MWh',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Hier ist immer der Wert 1000 einzutragen, da in DE5118 der Preis in €/MWh angegeben wird.',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Dokumentennummer der PRICAT',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '511',
      'condition_text': 'Hinweis: 1. Der genannte Wert gehört nicht zum Intervall. 2. Wenn in dieser SG36 die letzte Ziffer von LIN DE7140 >1, dann ist der Wert identisch mit dem Wert des DE6152 im RNG-Segment, in der SG36, in der die letzte Ziffer von LIN DE7140 um 1 kleiner ist, als die letzte Ziffer von LIN DE7140 in dieser SG36. 3. Die untere Wertegrenze zu der Artikel-ID, deren Zahl an der letzten Stelle den Wert n hat, muss kleiner sein, als die untere Wertegrenze zu der Artikel-ID, deren Zahl an der letzten Stelle den Wert n+1 hat.',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '512',
      'condition_text': 'Hinweis: Der genannte Wert gehört zum Intervall',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '513',
      'condition_text': 'Hinweis: Die zum Preis gehörende Einheit ist in der Codeliste definiert',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '519',
      'condition_text': 'Hinweis: Es darf nur eine Information im DE3148 übermittelt werden',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '902',
      'condition_text': 'Format: Möglicher Wert: ≥ 0',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '908',
      'condition_text': 'Format: Mögliche Werte: 1 bis n',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '911',
      'condition_text': 'Format: Mögliche Werte: 1 bis n, je Nachricht oder Segmentgruppe bei 1 beginnend und fortlaufend aufsteigend',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '912',
      'condition_text': 'Format: max. 6 Nachkommastellen',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '926',
      'condition_text': 'Format: Möglicher Wert: 0',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '929',
      'condition_text': 'Format: Möglicher Wert: 1000',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '939',
      'condition_text': 'Format: Die Zeichenkette muss die Zeichen @ und . enthalten',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '940',
      'condition_text': 'Format: Die Zeichenkette muss mit dem Zeichen + beginnen und danach dürfen nur noch Ziffern folgen',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '941',
      'condition_text': 'Format: Artikelnummer',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '942',
      'condition_text': 'Format: n1-n2-n1-n3',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '946',
      'condition_text': 'Format: max. 11 Nachkommastellen',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '948',
      'condition_text': 'Format: n1-n2-n1-n8-n2',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '949',
      'condition_text': 'Format: n1-n2-n1-n8-n2-n1',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '957',
      'condition_text': 'Format: n1-n2-n1-n8',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '959',
      'condition_text': 'Format: n13-n2',
      'edifact_format': 'PRICAT',
    }),
    dict({
      'condition_key': '968',
      'condition_text': 'Format: Möglicher Wert: ≤ 0',
      'edifact_format': 'PRICAT',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[PRICAT].2
  None
# ---
# name: TestCliConditions.test_cli_conditions[QUOTES]
  False
# ---
# name: TestCliConditions.test_cli_conditions[QUOTES].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Wenn Position nicht angeboten werden kann, weil rechtliche Regelungen oder Rechte Dritter dem entgegenstehen',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn in derselben SG27 LIN IMD++Z09 nicht vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Wenn CCI+++Z64 vorhanden ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Wenn am Gerät vorhanden und abweichend von Gerätenummer',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'Wenn in derselben SG27 LIN die Artikelnummer 9990001000649 vorhanden ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'Wenn SG28 CCI+++E13 CAV+EHZ vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Wenn in derselben SG27 LIN die Artikelnummer 9990001000657 vorhanden ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'Wenn SG28 CAV+MIW/ MPW/MBW vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Wenn in derselben SG27 LIN die Artikelnummer 9990001000665 vorhanden ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn in derselben SG27 LIN die Artikelnummer 9990001000673 vorhanden ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '13',
      'condition_text': 'Wenn am Gerät vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'Nicht, wenn in allen SG27 LIN das SG27 IMD++Z09 vorhanden ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'Wenn in derselben SG27 LIN die Artikelnummer 9990001000772 vorhanden ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'Wenn in derselben SG27 LIN die Artikelnummer 9990001000780 vorhanden ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Wenn das Angebot per REQOTE angefragt wurde',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn Angebot mehrere Marktlokationen abdeckt (AN nutzt mehrere Marktlokationen in einem Gebäude)',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '20',
      'condition_text': 'Wenn IMD++Z33 vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '21',
      'condition_text': 'Wenn IMD++Z34 vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'Wenn CCI+++Z75 vorhanden ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '25',
      'condition_text': 'Wenn SG28 CCI+++E13 CAV+MME vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn DTM+203 nicht vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn DTM+469 nicht vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn RFF+AAV vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '29',
      'condition_text': 'Wenn DTM+469 in Anfrage (REQOTE) vorhanden war',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '30',
      'condition_text': 'Wenn SG27 IMD+Z09 vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '31',
      'condition_text': 'Es sind nur die Artikelnummern erlaubt, die in der Codeliste der Artikelnummern des BDEW mit dem entsprechenden Prüfidentifikator versehen sind.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'Wenn 11-stellige ID im SG11 LOC+172 (Meldepunkt) DE3225 vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'Wenn 33-stellige ID im SG11 LOC+172 (Meldepunkt) DE3225 vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'Wenn in derselben Nachricht eine SG27 mit Z16 (Erforderliches Messprodukt der Tranche) in LIN DE1229 nicht vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '37',
      'condition_text': 'Wenn in derselben Nachricht eine SG27 mit Z27 (Erforderliches Messprodukt der Marktlokation) in LIN DE1229 nicht vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '39',
      'condition_text': 'MP-ID nur aus Sparte Strom',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '42',
      'condition_text': 'In derselben Nachricht muss immer derselbe Messprodukt- Code angegeben werden.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '43',
      'condition_text': 'Nicht wenn Messprodukt in derselben Nachricht in DE7140 eines PIA mit Z11 in DE7143 aus Kapitel 4 der Codeliste der Konfigurationen vorhanden und der Übertragungsweg aus dem SMGw ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '44',
      'condition_text': 'Wenn MSBA nicht Eigentümer des Gerätes/der Geräte ist',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '45',
      'condition_text': 'Es sind nur die Messprodukt-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.6 "Codelisten der Messprodukte Strom für ESA", in der Spalte "Ebene" das Objekt "Marktlokation" angegeben ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '46',
      'condition_text': 'Es sind nur die Messprodukt-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.6 "Codelisten der Messprodukte Strom für ESA", in der Spalte "Ebene" das Objekt "Tranche" angegeben ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '48',
      'condition_text': 'Es sind nur die Messprodukt-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.6 "Codelisten der Messprodukte Strom für ESA", in der Spalte "Ebene" das Objekt "Messlokation" angegeben ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '49',
      'condition_text': 'Wenn SG27 LIN++Z64 (Erforderliches Produkt Schaltzeitdefinitionen) vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '50',
      'condition_text': 'Wenn SG27 LIN++Z65 (Erforderliches Produkt Leistungskurvendefinitionen) vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '51',
      'condition_text': 'Wenn SG27 LIN++Z66 (Erforderliches Produkt Ad-hoc- Steuerkanal) vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '52',
      'condition_text': 'Wenn SG27 LIN++Z67 (Erforderliches Messprodukt für Werte nach Typ 2 aus Backend)vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '53',
      'condition_text': 'Wenn SG27 LIN++Z68 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ2 aus SMGW) vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '54',
      'condition_text': 'Wenn in der Anfrage zum Angebot einer Konfiguration vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '55',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Marktlokation angegeben ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '56',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Messlokation angegeben ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '57',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Netzlokation angegeben ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '58',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Steuerbaren Ressource angegeben ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '59',
      'condition_text': 'Es sind nur die Konfigurations-Produkte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.1 „Konfigurationsprodukte Schaltzeitdefinition“ enthalten sind.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '60',
      'condition_text': 'Es sind nur die Konfigurations-Produkte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.2 „Konfigurationsprodukte Leistungskurvendefinition“ enthalten sind.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '61',
      'condition_text': 'Es sind nur die Konfigurations-Produkte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.3„Konfigurationsprodukte Ad-hoc- Steuerkanal“ enthalten sind.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '62',
      'condition_text': 'Es sind nur die Messprodukte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.5 „Messprodukte für Werte nachTyp 2 aus Backend für LF und NB“ enthalten sind.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '63',
      'condition_text': 'Es sind nur die Messprodukte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.4 „Messprodukte mit Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW“ enthalten sind.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '64',
      'condition_text': 'Wenn in derselben Nachricht eine SG27 mit Z53 (Erforderliches Messprodukt der Netzlokation) in LIN DE1229 nicht vorhanden',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '65',
      'condition_text': 'Wenn DTM+203 (Ausführungsdatum) im DE2380 < 202312312300?+00',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '66',
      'condition_text': 'Wenn DTM+469 (Beginn zum (nächstmöglichen Termin)) im DE2380 < 202312312300?+00',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '67',
      'condition_text': 'Wenn DTM+203 (Ausführungsdatum) im DE2380 ≥ 202312312300?+00',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '68',
      'condition_text': 'Wenn DTM+469 (Beginn zum (nächstmöglichen Termin)) im DE2380 ≥ 202312312300?+00',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '69',
      'condition_text': 'Es sind nur Werte aus der EDI@Energy Codeliste der Artikelnummern und Artikel-ID erlaubt, die im Kapitel 3.5"Abrechnung Messstellenbetrieb für die Sparte Strom" genannt sind.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '70',
      'condition_text': 'Es sind nur die Messprodukt-Position-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.7 „Art der Werte für Messprodukte nach Typ 2“ enthalten sind.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '71',
      'condition_text': 'Wenn innerhalb derselben SG27 LIN im PIA+5 DE7140 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) ein Produkt angegeben ist, das in der Codeliste der Konfigurationen im Kapitel 4.4 „Messprodukte mit Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW“ in der Spalte "Auslöser" mit dem Wert "Bei Schwellwertunter- / - überschreitung" gekennzeichnet ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Strom',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Gas',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '500',
      'condition_text': 'Hinweis: Angabe eines technischen Ansprechpartners für die Geräteübernahme',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Verwendung der ID der Marktlokation',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Es ist die MP-ID des Eigentümers (MSB) zur bilateralen Klärung anzugeben, wenn z. B. der MSBA das Gerät / die Geräte selbst gepachtet hat.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Wert aus BGM+311 DE1004 der REQOTE mit der die Angebotsanfrage erfolgt ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '505',
      'condition_text': 'Hinweis: Wert aus BGM+Z29 DE1004 der REQOTE, mit der die Anfrage Rechnungsabwicklung erfolgt ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '506',
      'condition_text': 'Hinweis: Wenn zu einer Position (z. B. Messwandlersatz) mehrere Gerätenummern existieren, sind die Gerätenummern in derselben Position (LIN-Segment) mittels Wiederholung der SG32 RFF+Z09 anzugeben',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '507',
      'condition_text': 'Hinweis: Verwendung der ID der Tranche',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '511',
      'condition_text': 'Hinweis: Wert aus BGM+Z74 (Bestellung eines Angebots einer Konfiguration) DE1004 der REQOTE mit der die Anfrage einer Konfiguration erfolgt ist.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '512',
      'condition_text': 'Hinweis: Verwendung der ID der Netzlokation',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '513',
      'condition_text': 'Hinweis: Verwendung der ID der Steuerbaren Ressource',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '514',
      'condition_text': 'Hinweis: Angabe gemäß Preisblatt des MSB. Bis zu einmal für die Parametierung, bis zu einmal für den Betrieb und bis zu einmal für die Transaktion, sofern im Preisblatt des MSB vorhanden.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '515',
      'condition_text': 'Hinweis: Einmal, wenn vorhanden, für den Betrieb der Einrichtung, einmal, wenn vorhanden, für das initiale Einrichten der Konfiguration und einmal, wenn vorhanden, für die anfallenden Transaktionen.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '903',
      'condition_text': 'Format: Möglicher Wert: 1',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '906',
      'condition_text': 'Format: max. 3 Nachkommastellen',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '908',
      'condition_text': 'Format: Mögliche Werte: 1 bis n',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '911',
      'condition_text': 'Format: Mögliche Werte: 1 bis n, je Nachricht oder Segmentgruppe bei 1 beginnend und fortlaufend aufsteigend',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '912',
      'condition_text': 'Format: max. 6 Nachkommastellen',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '914',
      'condition_text': 'Format: Möglicher Wert: > 0',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '930',
      'condition_text': 'Format: max. 2 Nachkommastellen',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '942',
      'condition_text': 'Format: n1-n2-n1-n3',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '950',
      'condition_text': 'Format: Marktlokations-ID',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '951',
      'condition_text': 'Format: Zählpunktbezeichnung',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '960',
      'condition_text': 'Format: Netzlokations-ID',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '961',
      'condition_text': 'Format: SR-ID',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '962',
      'condition_text': 'Format: max. 6 Vorkommastellen',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '2042',
      'condition_text': 'Innerhalb dieser LIN- Position muss das PIA+Z02 (Artikel-ID) mindestens ein Mal angegeben werden und kann bis zu drei Mal angegeben werden.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '2060',
      'condition_text': 'Pro Nachricht ist die SG27 LIN+Z64 (Erforderliches Produkt Schaltzeitdefinitionen) maximal einmal anzugeben',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '2061',
      'condition_text': 'Pro Nachricht ist die SG27 LIN++Z65 (Erforderliches Produkt Leistungskurvendefinitionen) maximal einmal anzugeben',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '2062',
      'condition_text': 'Pro Nachricht ist die SG27 LIN++Z66 (Erforderliches Produkt Ad-hoc-Steuerkanal) maximal einmal anzugeben',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '2063',
      'condition_text': 'Pro Nachricht ist die SG27 LIN++Z67 (Erforderliches Messprodukt für Werte nach Typ 2 aus Backend) maximal einmal anzugeben',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '2064',
      'condition_text': 'Pro Nachricht ist die SG27 LIN++Z68 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) maximal einmal anzugeben',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '2065',
      'condition_text': 'Pro Nachricht ist die SG27 bis zu dreimal anzugeben. Dabei darf in allen SG27 einer Nachricht jede Artikel-ID in PIA+Z02 DE7140 (Artikel-ID) nur einmal vorkommen.',
      'edifact_format': 'QUOTES',
    }),
    dict({
      'condition_key': '2066',
      'condition_text': 'Diese SG28 ist so oft zu wiederholen, wie zu den unterschiedlichen Messprodukt- Position-Codes zu dem innerhalb derselben SG27 LIN im PIA+5 DE7140 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) angegebenen Produkt ein Produkt angegeben ist, das in derCodeliste der Konfigurationen im Kapitel 4.4 „Messprodukte mit Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW“ in der Spalte "Auslöser" mit dem Wert "Bei Schwellwertunter- / - überschreitung" gekennzeichnet ist.',
      'edifact_format': 'QUOTES',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[QUOTES].2
  None
# ---
# name: TestCliConditions.test_cli_conditions[REMADV]
  True
# ---
# name: TestCliConditions.test_cli_conditions[REMADV].1
  list([
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn SG7 AJT+28 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Bei SG5 DOC+389 / Z25 ist der Wert aus derselben SG5 MOA+9 mit (-1) multipliziert anzugeben.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Bei SG5 DOC+380 / 457 ist der Wert aus derselben SG5 MOA+9 unverändert anzugeben.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'Wenn SG7 AJT+A01/ A02+E_0505 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Wenn SG7 AJT+A32/ A99+E_0503 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0406',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0407',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'A-Code aus Cluster Ablehnung auf Kopfebene',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'A-Code aus Cluster Ablehnung auf Positionsebene',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'A-Code aus Cluster Ablehnung auf Summenebene',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn in dieser SG7 AJT DE4465 = A74/A75/A76/AC5',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'Wenn in dieser SG7 AJT DE4465 = A02/A06/A16/ A66/A67/A68/A69/A78/A90/ A95/A96/AC3/AC4',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn in dieser SG12 AJT DE4465 = A51/A62/A82/ AA1/AA6/AA7/AB8/AD6',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn in dieser SG12 AJT DE4465 = A23/A26/A35/ A36/A38/A46/A47/A48/A50/ A58/A59/A61/A77/A84/A99',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'Wenn in diesem AJT DE1082 = S_0103',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '34',
      'condition_text': 'Wenn in diesem AJT DE1082 = S_0104',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '35',
      'condition_text': 'Wenn in dieser SG12 AJT DE4465 = A34/A39/AA2/AB2',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'Wenn in dieser SG7 AJT DE4465 = A12/A75/A80/AE1',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '39',
      'condition_text': 'Wenn in dieser SG7 AJT DE4465 = AC1',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '40',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0406',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '41',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0407',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '42',
      'condition_text': 'Wenn in SG7 AJT DE1082 = E_0407/E_0568/E_0521/ E_0517/E_0266',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '43',
      'condition_text': 'Wenn in SG12 AJT DE4465=28',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '45',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '47',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0210',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '48',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0259',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '49',
      'condition_text': 'Wenn in dieser SG7 AJT DE4465 = A05/A22/A23/ A90/A96',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '50',
      'condition_text': 'Wenn in dieser SG7 AJT DE4465 = A05/A18/A19/ A20/A90/A96',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '51',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0406',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '52',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0407',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '53',
      'condition_text': 'Wenn in dieser SG12 AJT DE4465 = A25/A99/AF1',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '54',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0210',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '55',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0259',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '56',
      'condition_text': 'Wenn in dieser SG7 AJT DE4465 = A21',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '57',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0210',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '58',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0259',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '59',
      'condition_text': 'Wenn SG7 AJT+A99+E_0459 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '60',
      'condition_text': 'Wenn SG7 AJT+A99+E_0243 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '61',
      'condition_text': 'Wenn SG7 AJT+A99+E_0261 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '62',
      'condition_text': 'Wenn SG7 AJT+A99+E_1007 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '63',
      'condition_text': 'Wenn SG7 AJT+A01/ A02+E_1009 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '64',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0264',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '65',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0515',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '66',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0519',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '67',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0266',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '68',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0517',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '69',
      'condition_text': 'Wenn in dieser SG12 AJT DE1082 = E_0521',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '70',
      'condition_text': 'Wenn in dieser SG12 AJT DE4465 = A15',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '71',
      'condition_text': 'Wenn in dieser SG12 AJT DE4465 = A99',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '72',
      'condition_text': 'Wenn SG7 AJT+A99+E_0518 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '73',
      'condition_text': 'Wenn SG7 AJT+A99+E_0522 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '74',
      'condition_text': 'Wenn SG7 AJT+A99+E_0267 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '75',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0264',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '76',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0266',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '77',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0515',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '78',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0517',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '79',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0519',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '80',
      'condition_text': 'Wenn in diesem AJT DE1082 = E_0521',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '81',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0264',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '82',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0515',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '83',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0519',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '84',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0266',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '85',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0517',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '86',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0521',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '87',
      'condition_text': 'Wenn in dieser SG7 AJT DE4465 = A05/A21/A22/ A23/A90/A96/AE7',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '88',
      'condition_text': 'Wenn in dieser SG7 AJT DE4465 = A25',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '89',
      'condition_text': 'wenn im DE3155 in demselben COM der Code EM vorhanden ist',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '90',
      'condition_text': 'wenn im DE3155 in demselben COM der Code TE / FX / AJ / AL vorhanden ist',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '91',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0566',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '92',
      'condition_text': 'Wenn in dieser SG7 AJT DE1082 = E_0568',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '93',
      'condition_text': 'Wenn SG7 AJT+A99+E_0804 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '94',
      'condition_text': 'Wenn SG7 AJT+A99+E_0806 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '95',
      'condition_text': 'Wenn SG7 AJT+A99+E_0569 vorhanden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '97',
      'condition_text': 'Wenn in dieser SG12 AJT DE4465 = A27',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '98',
      'condition_text': 'Wenn in SG12 AJT DE1082 = E_0407',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '99',
      'condition_text': 'Wenn in SG12 AJT DE1082 = E_0568',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Strom',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'Wenn MP-ID in NAD+MR (Nachrichtenempfänger) aus Sparte Gas',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: An dieser Stelle ist der Betrag aus SG50 MOA+9 der zugrundeliegenden INVOIC zu übernehmen.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Bei positivem Betrag ergibt sich eine Forderung des Rechnungsstellers. Bei negativem Betrag ergibt sich eine Forderung für den Rechnungsempfänger.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Empfohlen, um bei Abweisung Ansprechpartner für Rückfragen zu erreichen.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '510',
      'condition_text': 'Hinweis: Bei Ablehnung einer vorherigen COMDIS',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '511',
      'condition_text': 'Hinweis: BGM DE1004 aus der abgelehnten INVOIC- Nachricht',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '512',
      'condition_text': 'Hinweis: BGM DE1004 aus der abgelehnten COMDIS-Nachricht',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '515',
      'condition_text': 'Hinweis: BGM DE1004 aus der bestätigten INVOIC- Nachricht',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '517',
      'condition_text': 'Hinweis: Wenn in dieser SG5 in AJT DE4465 ein Code aus Cluster Ablehnung auf Summenebene verwendet wird, ist diese SG7 so oft zu wiederholen, bis alle Fehler der Summenebene genannt sind.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '518',
      'condition_text': 'Hinweis: Wenn in dieser SG5 in AJT DE4465 ein Code aus Cluster Ablehnung auf Kopfebene verwendet wird, der von A80 abweicht, ist diese SG7 genau einmal zu nutzen.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '519',
      'condition_text': 'Hinweis: Diese SG7 ist so oft mit AJT DE4465 = A74 zu wiederholen, bis alle Rechnungsnummern im RFF- Segment dieser SG7 genannt sind, die in der INVOIC fehlen, die in diesem SG5 DOC DE1004 genannt ist',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '520',
      'condition_text': 'Hinweis: Diese SG7 ist so oft mit AJT DE4465 = A75 zu wiederholen, bis alle Rechnungsnummern der Rechnungen genannt sind, die mindestens eine Abschlagsrechnung enthalten, die in der INVOIC abgerechnet wurden, die in diesem SG5 DOC DE1004 genannt ist.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '521',
      'condition_text': 'Hinweis: Diese SG7 ist so oft mit AJT DE4465 = A76 zu wiederholen, bis alle Rechnungsnummern der Abschlagsrechnungen genannt sind, die in der INVOIC, die in diesem SG5 DOC DE1004 genannt ist, nicht hätten berücksichtigt werden dürfen.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '523',
      'condition_text': 'Hinweis: Jede Rechnungsnummer einer Abschlagsrechnung muss in einem separaten DE4440 angegeben werden. Reichen die fünf DE4440 für die Rechnungsnummern aller anzugebenden Abschlagrechnungen nicht aus, ist das FTX+Z14 zu wiederholen.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '525',
      'condition_text': 'Hinweis: Diese SG10 ist so oft zu wiederholen, bis alle Fehler der Positionsebene genannt sind.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '526',
      'condition_text': 'Hinweis: Wert aus DE1082 der SG26 in der sich der nachfolgende Fehler in der INVOIC befindet, die in diesem SG5 DOC DE1004 genannt ist.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '529',
      'condition_text': 'Hinweis: Wenn in dieser SG7 AJT DE4465 = A75 vorhanden, dann dürfen in den DE4440 dieses FTX- Segments nur Abschlagsrechnungsnummern genannt sein, welche in der Rechnung enthalten sind, deren Nummer in dieser SG7 in SG7 RFF+AFL angegeben ist.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '533',
      'condition_text': 'Hinweis: Wenn in dieser SG12 AJT DE4465 = AA1/ AA6/AA7/AB8/AD6, ist diese SG12 so oft mit AJT DE4465 = Code zu wiederholen, bis alle Rechnungsnummern im RFF- Segment dieser SG12 genannt sind.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '534',
      'condition_text': 'Hinweis: Wenn in dieser SG12 AJT DE4465 = A34/ A39/AA2/AB2, ist diese SG12 ist so oft mit AJT DE4465 = Code zu wiederholen, bis alleNummern der Reklamationen im RFF-Segment dieser SG12 genannt sind.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '535',
      'condition_text': 'Hinweis: Diese SG7 ist so oft mit AJT DE4465 = A80 zu wiederholen, bis die Rechnungsnummern der nicht stornierten Sonderrechnungen mit derselben Sonderrechnungsart wie sie in Sonderrechnung genannt ist die in diesem SG5 DOCDE1004 genannt ist, und sich auf dieselbe Rechnung beziehen, die die in diesem SG5 DOC DE1004 genannt ist.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '536',
      'condition_text': 'Hinweis: Dieses DE darf keine Abschlagsrechnungsnummer enthalten',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '537',
      'condition_text': 'Hinweis: Diese SG7 ist so oft mit AJT DE4465 = AC5 zu wiederholen, bis alle Rechnungsnummern im RFF Segment dieser SG7 genannt sind, die in der INVOIC berücksichtigt werden sollten, die in diesem SG5 DOC DE1004 genannt ist, aber mindestens eine davon offensichtlich nicht berücksichtigt wurde.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '538',
      'condition_text': 'Hinweis: Jede Positionsnummer eines Angebotes muss in einem separaten DE4440 angegeben werden. Reichen die fünf DE4440 für die Positionsnummern aller anzugebenden Angebote nicht aus, ist das SG7 FTX+Z16 zu wiederholen.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '544',
      'condition_text': 'Hinweis: Wenn in dieser SG7 AJT DE4465 = A21 vorhanden, dann darf in den DE4440 dieses FTX-Segments jeweils nur eine Positionsnummer genannt sein, welche aus dem bestätigten Angebot nicht in der Rechung enthalten sind.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '548',
      'condition_text': 'Hinweis: Die Befüllung des Datenelements ergibt sich aus dem zugehörigen EBD.',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '549',
      'condition_text': 'Hinweis: Es darf nur eine Information im DE3148 übermittelt werden',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '926',
      'condition_text': 'Format: Möglicher Wert: 0',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '930',
      'condition_text': 'Format: max. 2 Nachkommastellen',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '939',
      'condition_text': 'Format: Die Zeichenkette muss die Zeichen @ und . enthalten',
      'edifact_format': 'REMADV',
    }),
    dict({
      'condition_key': '940',
      'condition_text': 'Format: Die Zeichenkette muss mit dem Zeichen + beginnen und danach dürfen nur noch Ziffern folgen',
      'edifact_format': 'REMADV',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[REMADV].2
  list([
    dict({
      'edifact_format': 'REMADV',
      'package_expression': '[492]',
      'package_key': '2P',
    }),
    dict({
      'edifact_format': 'REMADV',
      'package_expression': '[493]',
      'package_key': '3P',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[REQOTE]
  False
# ---
# name: TestCliConditions.test_cli_conditions[REQOTE].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Wenn DTM+203 (Ausführungsdatum) nicht vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn DTM+469 (Beginn zum (nächstmöglichen Termin)) nicht vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'Wenn in derselben Nachricht eine SG27 mit Z16 (Erforderliches Messprodukt der Tranche) in LIN DE1229 nicht vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'Wenn in derselben Nachricht eine SG27 mit Z27 (Erforderliches Messprodukt der Marktlokation) in LIN DE1229 nicht vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'MP-ID nur aus Sparte Strom',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Es sind nur die Messprodukt-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.6 "Codelisten der Messprodukte Strom für ESA", in der Spalte "Ebene" das Objekt "Marktlokation" angegeben ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Es sind nur die Messprodukt-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.6 "Codelisten der Messprodukte Strom für ESA", in der Spalte "Ebene" das Objekt "Tranche" angegeben ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '13',
      'condition_text': 'Es sind nur die Messprodukt-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.6 "Codelisten der Messprodukte Strom für ESA", in der Spalte "Ebene" das Objekt "Netzlokation" angegeben ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'Es sind nur die Messprodukt-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.6 "Codelisten der Messprodukte Strom für ESA", in der Spalte "Ebene" das Objekt "Messlokation" angegeben ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'Wenn DTM+76 (Datum zum geplanten Leistungsbeginn) nicht vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'Wenn SG1 RFF+Z41 (Referenznummer des Vorgangs der Anmeldung nach WiM) nicht vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Wenn SG1 RFF+Z41 (Referenznummer des Vorgangs der Anmeldung nach WiM) vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn IMD++Z55 (Änderung Konfiguration) vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '19',
      'condition_text': 'Wenn SG27 LIN++Z64 (Erforderliches Produkt Schaltzeitdefinitionen) vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '20',
      'condition_text': 'Wenn SG27 LIN++Z65 (Erforderliches Produkt Leistungskurvendefinitionen) vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '21',
      'condition_text': 'Wenn SG27 LIN++Z66 (Erforderliches Produkt Ad-hoc- Steuerkanal) vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'Wenn SG27 LIN++Z67 (Erforderliches Messprodukt für Werte nach Typ 2 aus Backend) vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '23',
      'condition_text': 'Wenn SG27 LIN++Z68 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Wenn Produkt bestellt werden soll',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '25',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Marktlokation angegeben ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Messlokation angegeben ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Netzlokation angegeben ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn in LOC+172 DE3225 (Meldepunkt) die ID einer Steuerbaren Ressource angegeben ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '29',
      'condition_text': 'Es sind nur die Konfigurations-Produkte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.1 „Konfigurationsprodukte Schaltzeitdefinition“ enthalten sind.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '30',
      'condition_text': 'Es sind nur die Konfigurations-Produkte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.2 „Konfigurationsprodukte Leistungskurvendefinition“ enthalten sind.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '31',
      'condition_text': 'Es sind nur die Konfigurations-Produkte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.3 „Konfigurationsprodukte Ad- Hoc-Steuerkanal“ enthalten sind.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'Es sind nur die Messprodukte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.5 „Messprodukte für Werte nach Typ 2 aus Backend für LF und NB“ enthalten sind.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'Es sind nur die Messprodukte erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.4 „Messprodukte mit Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW“ enthalten sind.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '34',
      'condition_text': 'Wenn in derselben Nachricht eine SG27 mit Z53 (Erforderliches Messprodukt der Netzlokation) in LIN DE1229 nicht vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '35',
      'condition_text': 'Wenn MP-ID in SG11 NAD+MS mit Rolle LF vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'Wenn MP-ID in SG11 NAD+MS mit Rolle NB vorhanden',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '37',
      'condition_text': 'Es sind nur die Messprodukt-Position-Codes erlaubt, die in der Codeliste der Konfigurationen im Kapitel 4.7 „Art der Werte für Messprodukte nach Typ 2“ enthalten sind.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '38',
      'condition_text': 'Wenn innerhalb derselben SG27 LIN im PIA+5 DE7140 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) ein Produkt angegeben ist, das in der Codeliste der Konfigurationen im Kapitel 4.4 „Messprodukte mit Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW“ in der Spalte "Auslöser" mit dem Wert "Bei Schwellwertunter- / - überschreitung" gekennzeichnet ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Strom',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Gas',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '500',
      'condition_text': 'Hinweis: Angabe eines technischen Ansprechpartners für die Geräteübernahme',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Angabe eines Ansprechpartners für die Rechnungsabwicklung',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Verwendung der ID der Marktlokation',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Verwendung der ID der Tranche',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '507',
      'condition_text': 'Hinweis: Vorgangsnummer aus SG4 IDE+24 DE7402 der UTILMD mit BGM+E01 mit der die Anmeldung des MSB-Wechsels erfolgt ist.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '508',
      'condition_text': 'Hinweis: Wert aus BGM+Z73 DE1004 der IFTSTA mit der die Antwort auf die Bestellung der Konfiguration übermittelt wurde',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '509',
      'condition_text': 'Hinweis: Vorgangsnummer aus CNI DE1490 der IFTSTA mit BGM+Z73 mit der die Antwort auf die Bestellung der Konfiguration übermittelt wurde',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '510',
      'condition_text': 'Hinweis: Verwendung der ID der Netzlokation',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '511',
      'condition_text': 'Hinweis: Verwendung der ID der Steuerbaren Ressource',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '512',
      'condition_text': 'Hinweis: Für den Empfang der Werte nach Typ 2 aus dem SMGW.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '513',
      'condition_text': 'Hinweis: Für den Empfang der Mitteilung zum weiteren Vorgehen eines Steuerbefehls und der Antwort auf die Anweisung eines Steuerbefehls.',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '903',
      'condition_text': 'Format: Möglicher Wert: 1',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '906',
      'condition_text': 'Format: max. 3 Nachkommastellen',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '950',
      'condition_text': 'Format: Marktlokations-ID',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '951',
      'condition_text': 'Format: Zählpunktbezeichnung',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '960',
      'condition_text': 'Format: Netzlokations-ID',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '961',
      'condition_text': 'Format: SR-ID',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '962',
      'condition_text': 'Format: max. 6 Vorkommastellen',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '967',
      'condition_text': 'Format: Zertifikatskörper gemäß X509.1, BSI TR-03109-4',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2003',
      'condition_text': 'Für 11-stellige ID im SG11 LOC+172 (Meldepunkt) DE3225 genau einmal anzugeben',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2004',
      'condition_text': 'Für 33-stellige ID im SG11 LOC+172 (Meldepunkt) DE3225 genau einmal anzugeben',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2005',
      'condition_text': 'Pro Nachricht ist die SG27 genau einmal anzugeben',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2060',
      'condition_text': 'Pro Nachricht ist die SG27 LIN+Z64 (Erforderliches Produkt Schaltzeitdefinitionen) maximal einmal anzugeben',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2061',
      'condition_text': 'Pro Nachricht ist die SG27 LIN++Z65 (Erforderliches Produkt Leistungskurvendefinitionen) maximal einmal anzugeben',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2062',
      'condition_text': 'Pro Nachricht ist die SG27 LIN++Z66 (Erforderliches Produkt Ad-hoc-Steuerkanal) maximal einmal anzugeben',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2063',
      'condition_text': 'Pro Nachricht ist die SG27 LIN++Z67 (Erforderliches Messprodukt für Werte nach Typ 2 aus Backend) maximal einmal anzugeben',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2064',
      'condition_text': 'Pro Nachricht ist die SG27 LIN++Z68 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) maximal einmal anzugeben',
      'edifact_format': 'REQOTE',
    }),
    dict({
      'condition_key': '2065',
      'condition_text': 'Diese SG28 ist so oft zu wiederholen, wie zu den unterschiedlichen Messprodukt- Position-Codes zu dem innerhalb derselben SG27 LIN im PIA+5 DE7140 (Erforderliches Produkt Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW) angegebenen Produkt ein Produkt angegeben ist, das in der Codeliste der Konfigurationen im Kapitel 4.4 „Messprodukte mit Konfigurationserlaubnis für Werte nach Typ 2 aus SMGW“ in der Spalte "Auslöser" mit dem Wert "Bei Schwellwertunter- / - überschreitung" gekennzeichnet ist.',
      'edifact_format': 'REQOTE',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[REQOTE].2
  None
# ---
# name: TestCliConditions.test_cli_conditions[UTILMD]
  True
# ---
# name: TestCliConditions.test_cli_conditions[UTILMD].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Wenn Aufteilung vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn UNH DE0070 (Übermittlungsfolgenum mer) mit 1 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Bei Aufteilung, in der Nachricht mit der höchsten Übermittlungsfolgenum mer',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '4',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfäng er) in der Rolle LF',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS (Nachrichtenabsender) in der Rolle LF',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle ÜNB',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'Wenn SG4 STS+7++ZG9/ZH1/ZH2 (Transaktionsgrund: Aufhebung einer zukünftigen Zuordnung wegen Auszug des Kunden / -wegen Stilllegung / -wegen aufgehobenem Vertragsverhältnis) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Wenn SG4 STS+7++ZE4 (Transaktionsgrund: Weggefallene Markt- bzw. Messlokation) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'Wenn SG4 STS+Z17 (Transaktionsgrund für befristete Anmeldung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Wenn SG4 STS+7++ZG9/ZH1/ZH2 (Transaktionsgrund: Aufhebung einer zukünftigen Zuordnung wegen Auszug des Kunden / -wegen Stilllegung / -wegen aufgehobenem Vertragsverhältnis) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn SG4 DTM+471 (Ende zum nächstmöglichem Termin) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '13',
      'condition_text': 'Wenn SG4 STS+E01++Z01 (Status der Antwort: Zustimmung mit Terminänderung) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'Wenn Datum bekannt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'Wenn SG4 STS+E01++Z34 (Status der Antwort: Ablehnung Mehrfachkündigung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'Wenn SG4 STS+E01++Z12 (Status der Antwort: Ablehnung Vertragsbindung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Wenn bereits eine bestätigte Kündigung durch Kunde oder MP vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn SG4 DTM+93 (Ende zum) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '19',
      'condition_text': 'Wenn SG8 SEQ+Z01 (Daten der Marktlokation) SG10 CCI+++ZC0 (Prognose auf Basis von Werten) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '20',
      'condition_text': 'Wenn SG8 SEQ+Z01 (Daten der Marktlokation) SG10 CCI+Z30++Z07 (Verbrauch) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '21',
      'condition_text': 'Wenn SG10 CCI+++ZA6 (Prognose auf Basis von Profilen) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Wenn SG6 DTM+Z21 (Termin der Netznutzungsabrechnun g) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '25',
      'condition_text': 'Wenn der Meldepunkt im SG5 LOC+172 (Meldepunkt) DE3225 das Format der Marktlokations-ID hat',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'Wenn der Meldepunkt im SG5 LOC+172 (Meldepunkt) DE3225 das Format der Zählpunktbezeichnung hat',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '28',
      'condition_text': 'Wenn SG4 DTM+93 (Ende zum) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '29',
      'condition_text': 'Wenn eine Bilanzierung stattfindet',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '30',
      'condition_text': 'Wenn Antwort auf Aktivierung übermittelt wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '31',
      'condition_text': 'Wenn eine Korrektur erfolgt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'Wenn mehr als ein SG8 SEQ+Z78 (Referenz auf die Lokationsbündelstrukt ur) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'Wenn in Abmeldung ein Bilanzierungsende vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '34',
      'condition_text': 'Wenn Antwort auf Deaktivierung übermittelt wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '35',
      'condition_text': 'Wenn das DE2380 von SG4 DTM+Z01 (Kündigungsfrist des Vertrags) an vierter Stelle T (Termin) enthält',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'Wenn SG4 STS+E01++ZC5 (Status der Antwort: Ablehnung andere Anmeldung in Bearbeitung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '37',
      'condition_text': 'Wenn Anmeldung/ Änderung befristet',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '38',
      'condition_text': 'ID des NB muss identisch mit der ID in NAD+MS (Nachrichtenabsender) sein.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '39',
      'condition_text': 'Wenn LF beabsichtigt Zählerstand zu übermitteln',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '40',
      'condition_text': 'Wenn SG4 STS+7++E02 (Transaktionsgrund: Einzug in Neuanlage) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '45',
      'condition_text': 'Wenn in derselben SG8 das SG10 CCI+Z01++Z82 (Verwendungsumfang: ID der prozessual behandelten Messlokation) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '46',
      'condition_text': 'Wenn in SG8 SEQ+Z35 ein SG10 CCI+Z12 (Lastprofil) CAV (Lastprofil) DE3055 der Wert 293 enthalten ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '47',
      'condition_text': 'Wenn SG10 CCI+15++Z21 (Summenzeitreihentyp) CAV+DBA/ VZR/ EGS/ LGS/ SLS/ SES/ TLS/ TES/ BIL/ BIP/ BIT/ GAL/ GAP/ GAT/ GEL/ GEP/ GET/ SOL/ SOP/ SOT/ WFL/ WFP/ WFT/ WNL/ WNP/ WNT vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '48',
      'condition_text': 'Wenn in dieser SG4 das STS+E01++E14/ A99 (Status der Antwort: Ablehnung Sonstiges) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '51',
      'condition_text': 'Bei rückwirkendem Lieferende/Lieferbeginn',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '52',
      'condition_text': 'Wenn SG10 CCI+Z07++Z55/ Z56 (Profiltyp: sonstige verbrauchende Marktlokation / sonstige erzeugende Marktlokation) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '53',
      'condition_text': 'Wenn weitere Präzisierungen als über CCI+Z07 (Profiltyp) möglich sind',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '54',
      'condition_text': 'Wenn SG8 SEQ+Z01 (Daten der Marktlokation) SG10 CCI+Z30++Z06 (Lieferrichtung: Erzeugung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '55',
      'condition_text': 'Wenn SG10 CCI+Z22++Z91 (Status der erzeugenden Marktlokation: Veräußerungsform Geförderte Direktvermarktung bzw. Marktprämie) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '56',
      'condition_text': 'Wenn im STS+E01 im DE9013 ein Antwortcode aus dem Cluster Zustimmung vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '57',
      'condition_text': 'Wenn CCI+Z45++ZD9 (Abrechnung findet statt) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '58',
      'condition_text': 'Wenn in diesem CCI das DE3055 mit dem Code 293 vorhandenBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF an LF an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 44162 44163 44164 44165 44166 44167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '59',
      'condition_text': 'Wenn mehr als eine SG8 SEQ+Z45 (Netznutzungsabrechnungsdat en der Marktlokation) mit einer Gruppen-/Artikel-ID im SG8 PIA+Z02 (Gruppenartikel- ID / Artikel-ID), welche mit 1- 08-1/2/3/4/5 beginnt, vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '64',
      'condition_text': 'Wenn SG4 DTM+158 (Bilanzierungsbeginn) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '65',
      'condition_text': 'Wenn Marktgebietsüber- lappung besteht, sind alle Bilanzkreise des LF zu melden in denen freie Kapazitäten beim NB bestehen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '66',
      'condition_text': 'Wenn SG10 CCI+Z19 (Bilanzkreis) im Vorgang mehr als einmal vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '68',
      'condition_text': 'Wenn SG10 CCI+Z19 (Bilanzkreis) im Vorgang mehr als zweimal vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '69',
      'condition_text': 'Wenn SG10 CCI+Z19 (Bilanzkreis) im Vorgang mehr als dreimal vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '70',
      'condition_text': 'Wenn SG10 CCI+Z19 (Bilanzkreis) im Vorgang fünfmal vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '71',
      'condition_text': 'Wenn Antwort aufZuordnung übermittelt wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '72',
      'condition_text': 'Wenn Antwort auf Beendigung der Zuordnung übermittelt wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '73',
      'condition_text': 'Wenn in derselben SG8 im PIA DE7140 ein Code aus der Codeliste der Gruppenartikel- und Artikel-ID vorhanden ist, der in der Spalte UTILMD/Preisangabe mit X gekennzeichnet ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '76',
      'condition_text': 'Wenn Summenzeitreihe auf Ebene des Bilanzierungsgebiet',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '77',
      'condition_text': 'Wenn SG8 SEQ+Z03 (Zähleinrichtungsdaten) CAV+Z30 (Identifikation/Nummer des Gerätes) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '78',
      'condition_text': 'Wenn SG4 STS+7++E02 (Transaktionsgrund: Einzug in Neuanlage) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '80',
      'condition_text': 'Wenn SG4 STS+7++Z37 (Transaktionsgrund: EoG aus Einzug in Neuanlage) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '81',
      'condition_text': 'Wenn SG4 FTX+ABO+Z05 (Beschreibung der Abweichung zur übermittelten Liste: Änderung vorhanden) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '84',
      'condition_text': 'Wenn SG4 STS+E01++Z35 (Status der Antwort: Ablehnung der Abmeldeanfrage) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '86',
      'condition_text': 'Wenn das RFF+Z18 (Marktlokation) aus dieser SG6 (Termine der Marktlokation) auf das gleiche SG5 LOC+Z16 (Marktlokation), wie ein RFF+Z18 (Marktlokation) aus einer SG8 SEQ+Z01 (Daten der Marktlokation), in dem SG10 CCI+++ZA6 (Prognose auf Basis von Profilen) vorhanden ist, referenziert',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '89',
      'condition_text': 'Wenn im SG8 SEQ+Z01 (Daten der Marktlokation) das SG10 CCI+++ZA6 (Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+E14 (TLP/TEP) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '90',
      'condition_text': 'Wenn SG10 CCI+++ZA6 (Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) einmal mit CAV+E14 (TLP/TEP) und einmal mit CAV+E02 (SLP/SEP) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '92',
      'condition_text': 'Wenn Wert innerhalb SG bzw. Segment geändert wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '93',
      'condition_text': 'Erlaubte Codes aus der PRICAT BGM+Z32 (Preisblatt Messstellenbetrieb) des verantwortlichen MSB',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '94',
      'condition_text': 'Wenn ein Segment innerhalb der SG vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '95',
      'condition_text': 'Wenn in derselben SG10 das CCI+Z17 (Stromverbrauchsart) CAV+ZE5 (E-Mobilität) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '96',
      'condition_text': 'Wenn SG4 STS+7++Z37 (Transaktionsgrund: EoG aus Einzug in Neuanlage) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '98',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS (Nachrichtenabsender) in der Rolle NB',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '99',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS (Nachrichtenabsender) in der Rolle ÜNB',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '100',
      'condition_text': 'Wenn SG10 CAV+TLS/ TES/ BIT/ GET/ GAT/ SOT/ WNT/ WFT/ WAT vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '101',
      'condition_text': 'Wenn SG10 CCI+++ZA6 (Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+E14/ Z36 (TLP/ TEP/ TEP mit Ref. messung) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '102',
      'condition_text': 'Wenn SG10 CCI+++ZA6 (Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+Z36 (TEP mit Ref. messung) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '103',
      'condition_text': 'Wenn SG9 QTY+265 (Arbeit / Leistung für tagesparameterabhän gig e Marktlokation: Veranschlagte Jahresmenge Gesamt) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '104',
      'condition_text': 'Wenn SG9 QTY+Z08 (Arbeit / Leistung für tagesparameterabhängig e Marktlokation: angepasste elektrische Arbeit nach Anhang D) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '105',
      'condition_text': 'Wenn SG9 QTY+Z10 (Arbeit / Leistung für tagesparameterabhängig e Marktlokation: Leistung der Marktlokation) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '106',
      'condition_text': 'Wenn in dieser SG8 SEQ+Z01 SG10 CCI+++ZA6 (Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+E02 (SLP/SEP) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '107',
      'condition_text': 'Wenn in derselben SG8 das SG10 CAV+SLS/ SES/ BIP/ GEP/ GAP/ SOP/ WNP/ WFP/ WAP vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '108',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z45 (Netznutzungsabrechnungsdat en der Marktlokation) eine Gruppen-/Artikel-ID im SG8 PIA+Z02 (Gruppenartikel-ID / Artikel-ID), welche mit 1-08- 1/2/3/4/5 beginnt, vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '109',
      'condition_text': 'Wenn in dieser SG4 das STS+E01++A14 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '110',
      'condition_text': 'Wenn SG10 CAV+LGS/ EGS/ BIL/ GEL/ GAL/ SOL/ WNL/ WFL / WAL vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '111',
      'condition_text': 'Wenn CCI+Z19 (Bilanzkreis) in SG8 SEQ+Z15 (Daten der Tranche) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '112',
      'condition_text': 'Wenn in dieser SG4 das STS+E01++A08/A09 nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '113',
      'condition_text': 'Wenn es sich um eine Antwort auf die Bestellung einer Zählzeit handelt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '114',
      'condition_text': 'Wenn das SG10 CCI+E03 (Spannungsebene der Marktlokation) CAV E06 (Niederspannung) in dieser SG vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '115',
      'condition_text': 'Wenn das SG10 CCI+E03 (Spannungsebene der Marktlokation) CAV E05 (Mittelspannung) in dieser SG vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '116',
      'condition_text': 'Wenn das SG10 CCI+E03 (Spannungsebene der Marktlokation) CAV E04 (Hochspannung) in dieser SG vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '118',
      'condition_text': 'Wenn SG4 STS+E01++Z35 (Status der Antwort: Ablehnung der Abmeldeanfrage) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '119',
      'condition_text': 'Wenn in der SG8 SEQ+Z01 SG10 CCI+++ZA6 (Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+E02 (SLP/SEP) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '121',
      'condition_text': 'Wenn in dem SEQ+Z03 (Zähleinrichtungsdate n) das SG8 RFF+Z14 (Referenz auf das Smartmeter-Gateway) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '123',
      'condition_text': 'Wenn noch mindestens eine weitere SG8 SEQ+Z20 (OBIS- Daten der Zähleinrichtung / Mengenumwerter) mit dem SG8 RFF+MG / Z11 (Gerätenummer des Zählers / Mengenumwerters) auf die gleiche Identifikation/Nummer des Gerätes referenziert',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '124',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z15 (Daten der Tranche) das RFF+Z20 (Referenz auf die ID der Tranche) nichtvorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '125',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z76 (Messstellenbetriebsabrechnu ngsdaten der Marktlokation) im DE4347 des PIA Z02 (Gruppenartikel-ID / Artikel- ID) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '126',
      'condition_text': 'Wenn in dieser SG4 das STS+E01++A08/A09 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '127',
      'condition_text': 'Hat der Lieferant auf Grund seines Vertrags Kenntnis, dass der Kunde keine hohe KA hat so muss er dies dem NB mitteilen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '128',
      'condition_text': 'Wenn SG10 CAV+TAS/ TSS/ TKS/ SAS/ KAS vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '129',
      'condition_text': 'Hat der Lieferant auf Grund seines Vertrags Kenntnis über die Höhe der Sonder-KA, so muss er diesen dem NB mitteilen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '130',
      'condition_text': 'Wenn an Messlokation vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '133',
      'condition_text': 'Wenn an der übermittelten Marktlokation / Messlokation vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '135',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS (Nachrichtenabsender) in der Rolle MSBBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '136',
      'condition_text': 'Wenn SG10 CCI+++E13 (Zählertyp) CAV+EHZ (elektronischer Haushaltszähler) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '137',
      'condition_text': 'Nicht bei Neuanlage',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '138',
      'condition_text': 'Wenn im selben QTY im DE6063 Z35 (Abschlag) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '139',
      'condition_text': 'Wenn SG10 CAV+IVA (Individuelle Abstimmung) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '140',
      'condition_text': 'Wenn im selben QTY im DE6063 Z34/Z35 (Zuschlag/ Abschlag) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '141',
      'condition_text': 'Wenn SG10 CAV+MIW/ MPW/ MBW vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '142',
      'condition_text': 'Wenn SG8 PIA+Z01+:Z04/ Z05 (Berechnung Tagesmitteltemperatur: vom Anbieter zur Verfügung gestellte - / Äquivalente Tagesmitteltemperatur) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '143',
      'condition_text': 'Wenn STS+7++E03 (Transaktionsgrund: Wechsel) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '145',
      'condition_text': 'Wenn SG10 CCI+Z31++ZA8 (bereits ausg. Aggreg.verantw. in MaBiS: NB) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '146',
      'condition_text': 'Wenn SG10 CCI+Z31++ZA9 (bereits ausg. Aggreg.verantw. in MaBiS: ÜNB) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '147',
      'condition_text': 'Wenn in Anfrage vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '148',
      'condition_text': 'Möglich wenn SG10 CCI+Z31++ZA9 (bereits ausg. Aggreg.verantw. in MaBiS: ÜNB) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '156',
      'condition_text': 'Wenn SG4 STS+7++ZP1/ ZR6 (Transaktionsgrund: Stammdatensynchronisa tion / -Stärkung der Bilanzkreistreue) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '165',
      'condition_text': 'Wenn bekannt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '166',
      'condition_text': 'Wenn vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '167',
      'condition_text': 'Wenn SG5 LOC+Z21 (Tranche) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '170',
      'condition_text': 'Wenn Anschrift der Marktlokation vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '172',
      'condition_text': 'Wenn im selben QTY im DE6063 Z37 (Kein Zu- und Abschlag) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '173',
      'condition_text': 'Wenn SG10 CCI+++ZB1 (Bereits ausgetauschte Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+E14 (TLP/TEP) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '174',
      'condition_text': 'Wenn SG10+++ZB1 (Bereits ausgetauschte Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+E02 (SLP/SEP) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '179',
      'condition_text': 'Wenn SG10 CCI+++ZB1 (Bereits ausgetauschte Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+E14/ Z36 (TLP/TEP / TEP mit Referenzmessung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '180',
      'condition_text': 'Wenn im selben QTY im DE6063 Z46 (Kein Abschlag) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '181',
      'condition_text': 'Wenn SG10 CCI+++ZB1 (Bereits ausgetauschte Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+E02 (SLP/SEP) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '184',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z18 (Daten der Messlokation) ein CCI+Z01++Z82 (Verwendungsumfang: ID der prozessual behandelten Messlokation) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '185',
      'condition_text': 'Wenn SG10 CCI+++ZB1 (Bereits ausgetauschte Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+Z36 (TEP mit Ref.messung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '186',
      'condition_text': 'Wenn SG8 SEQ+Z01 (Daten der Marktlokation) SG10 CCI+Z19 (Bilanzkreis) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '187',
      'condition_text': 'Wenn SG10 CCI+++ZB1 (Prognose auf Basis von Profilen) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '189',
      'condition_text': 'Wenn SG10 CCI+Z31++ZA9 (bereits ausgetauschte Aggreg. verantw. ÜNB) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '190',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z60 (Produkt- Daten der Netzlokation) PIA+5+999100000072 1:Z12 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '191',
      'condition_text': 'Wenn im SG4 IDE+Z01 (Identifikation einer Liste) STS+E01 (Status der Antwort der Liste) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '193',
      'condition_text': 'Wenn das SG10 CCI ZB5 (Spannungsebene der Summenzeitreihe) CAV E06 (Niederspannung) in dieser SG vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '194',
      'condition_text': 'Wenn das SG10 CCI ZB5 (Spannungsebene der Summenzeitreihe) CAV E05 (Mittelspannung) in dieser SG vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '195',
      'condition_text': 'Wenn das SG10 CCI ZB5 (Spannungsebene der Summenzeitreihe) CAV E04 (Hochspannung) in dieser SG vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '196',
      'condition_text': 'Wenn SG4 STS+E01++Z35 (Status der Antwort: Ablehnung der Abmeldeanfrage) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '197',
      'condition_text': 'Wenn das RFF+Z18 (Marktlokation) aus dieser SG8 auf das gleiche SG5 LOC+Z16 (Marktlokation), wie ein RFF+Z18 (Marktlokation) aus einer SG8 SEQ+Z01 (Daten der Marktlokation), in dem SG10 CCI+++ZA6 (Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+E02 (SLP/SEP) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '198',
      'condition_text': 'Wenn SG4 STS+7++E03(Transaktion sgrund: Wechsel) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '200',
      'condition_text': 'Wenn BGM+Z26 (Vorläufige Meldung zur Marktraumumstellung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '201',
      'condition_text': 'Wenn die Marktlokation / Tranche nicht den ganzen Bilanzierungsmonat dem gleichen Tupel aus Bilanzkreis, Zeitreihentyp,Spannungsebene und Lieferant zugeordnet ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '202',
      'condition_text': 'Wenn SG4 STS+E01+ZG2 (Status der Antwort: Gültiges Ergebnis nach der Datenprüfung) vorhanden Beschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '203',
      'condition_text': 'Wenn STS+7++E06 / Z39 / ZC6 / ZC7/ ZT6/ ZT7 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '205',
      'condition_text': 'Wenn SG9 QTY+Y02 (TUM Kundenwert) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '206',
      'condition_text': 'Wenn SG4 STS+7++ZG5 (Transaktionsgrund: Aufhebung der zukünftigen Zuordnung aufgrund §38 EEG 2014 bzw. §21b Abs. 1 Nr. 2 EEG 2017) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '209',
      'condition_text': 'Wenn im selben Segment im DE2379 der Code 303 vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '210',
      'condition_text': 'Wenn SG10 CCI+++ZA6 (Prognose auf Basis von Profilen) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '212',
      'condition_text': 'Wenn im selben SG12 NAD DE3124 nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '213',
      'condition_text': 'Wenn SG12 NAD+Z09 (Kunde des Lieferanten) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '215',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z03 (Zähleinrichtungsdate n) SG10 CCI+++E13 CAV+MME (Zählertyp: mME) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '216',
      'condition_text': 'Wenn CCI+++Z88 (Netznutzung) CAV+Z74:::Z08 (Netznutzungsvertrag: Direkter Vertrag zwischen Kunden und NB) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '219',
      'condition_text': 'Wenn an Marktlokation vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '220',
      'condition_text': 'Wenn SG8 SEQ+Z01 (Daten der Marktlokation) SG10 CCI+Z30++Z06 (Lieferrichtung: Erzeugung) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '221',
      'condition_text': 'Wenn kein SG8 SEQ+Z15 (Daten der Tranche) auf die gleiche Marktlokation-ID mit dem RFF+Z18 (Marktlokation) referenziert wie dieses SG8 SEQ+Z01 (Daten der Marktlokation)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '222',
      'condition_text': 'Wenn das RFF+Z18 (Marktlokation) aus dieser SG8 auf das gleiche SG5 LOC+Z16 (Marktlokation), wie ein RFF+Z18 (Marktlokation) aus einer SG8 SEQ+Z01 (Daten der Marktlokation) verweist, und dort das SG10 CCI+Z30++Z07 (Lieferrichtung: Verbrauch) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '223',
      'condition_text': 'Wenn das RFF+Z18 (Marktlokation) aus dieser SG8 auf das gleiche SG5 LOC+Z16 (Marktlokation), wie ein RFF+Z18 (Marktlokation) aus einer SG8 SEQ+Z01 (Daten der Marktlokation) verweist, und dort das SG10 CCI+Z30++Z06 (Lieferrichtung: Erzeugung) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '224',
      'condition_text': 'Wenn SG4 STS+7++ZP0/ ZP2 (Transaktionsgrund: Stammdatensynchronisa tion Beginn der Aggregationsverantwort ung/ Stammdatensynchronisa tion Korrektur des Beginns der Aggregationsverantwort ung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '225',
      'condition_text': 'Wenn CCI+++Z88 (Netznutzung) CAV+Z73:::Z11 (Zahlung der Netznutzung: Lieferant) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '226',
      'condition_text': 'Wenn SG8 SEQ+Z01 (Daten der Marktlokation) SG10 CCI+6++ZA8 (Aggreg. verantw. NB) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '230',
      'condition_text': 'Sich ergebendes Datum/ bzw. Endedatum des Turnuszeitraums aus DTM+Z21 (Termin der Netznutzungsabrechnun g) und DTM+Z09 (Nächste Netznutzungsabrechnun g) muss >= DTM+92 (Beginn zum) sein',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '232',
      'condition_text': 'Wenn SG10 CCI+++Z83 CAV+Z52 (Messtechnische Einordnung der Marktlokation: iMS) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '233',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle NB',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '234',
      'condition_text': 'Wenn SG10 CCI+++Z83 (Messtechnische Einordnung der Marktlokation) CAV+Z53 (kME/ mME) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '235',
      'condition_text': 'Wenn das RFF+Z19 (Messlokation) aus dieser SG8 auf das gleiche SG5 LOC+Z17 (Messlokation), wie ein RFF+Z19 (Messlokation) aus einer SG8 SEQ+Z03 (Zähleinrichtungsdate n), in dem SG10 CCI+++E13 CAV+MME (Zählertyp: mME) nicht vorhanden ist, referenziert',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '237',
      'condition_text': 'Wenn in derselben SG8 im DE7140 des PIA+Z02 (Gruppenartikel-ID / Artikel- ID) eine Gruppenartikel-ID / Artikel-ID mit 1-06 (entspricht Entgelte des Messstellenbetriebs bei kME) beginnt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '238',
      'condition_text': 'Wenn SG4 IDE+24 (Vorgang) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '239',
      'condition_text': 'Wenn in derselben SG10 das CCI+Z17 (Stromverbrauchsart) im CAV+Z65 (Wärme) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '240',
      'condition_text': 'Wenn SG8 SEQ+Z01 (Daten der Marktlokation) CCI+Z22++Z91 (Status der erzeugenden Marktlokation: Veräußerungsform Geförderte Direktvermarktung bzw. Marktprämie) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '241',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle MSBBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '243',
      'condition_text': 'Wenn SG10 CCI+6++ZA8 (Aggreg. verantw. NB) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '244',
      'condition_text': 'Wenn SG10 CCI+6++ZA9 (Aggreg. verantw. ÜNB) in dieser SG8 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '245',
      'condition_text': 'Wenn die Messlokation mit einer kME ausgestartet ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '247',
      'condition_text': 'Wenn CAV+ZE2 (Wahlrecht durch LF nicht gegeben) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '248',
      'condition_text': 'Wenn die Inbetriebnahme der verbrauchenden Marktlokation innerhalb der letzten drei Jahre war und die Energie der Marktlokation mit iMS ausgestatteten Messlokationen erfolgt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '249',
      'condition_text': 'Innerhalb eines SG4 IDE müssen alle DE1131 der SG4 STS+E01 den identischen Wert enthalten Beschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF an LF an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 44162 44163 44164 44165 44166 44167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '251',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS (Nachrichtensender) in der Rolle BIKO',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '252',
      'condition_text': 'Wenn DE0068 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '254',
      'condition_text': 'Es ist der Code "AUA" einzutragen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '255',
      'condition_text': 'Wenn Marktlokation am Redispatch 2.0 teilnimmt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '256',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z20 (OBIS- Daten der Zähleinrichtung / Smartmeter-Gateway) das PIA+5+1-b?:1.8.e / 1-b?:2.8.e vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '257',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z02 (OBIS- Daten der Marktlokation) das PIA+5+7-0?:33.86.0 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '259',
      'condition_text': 'Wenn in diesem PIA der Code im DE7140 mit 1-01, 1- 03, 1-05 enthalten ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '261',
      'condition_text': 'Wenn in diesem PIA der Code im DE7140 mit 1-07-1/2, 1-10-1/2/ 4/5/6/7/8/9, 1-11-1 beginnt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '262',
      'condition_text': 'Wenn Produkt an der Marktlokation vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '263',
      'condition_text': 'Wenn das RFF+Z18 (Marktlokation) aus dieser SG8 auf das gleiche SG5 LOC+Z16 [Marktlokation), wie ein RFF+Z18 (Marktlokation) aus einer SG8 SEQ+Z01 (Daten der Marktlokation) verweist, und dort die Prognose auf Basis von Profilen) CAV+Z36 (TEP m. Referenzmessung) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '265',
      'condition_text': 'Wenn im SG8 SEQ+Z01 (Daten der Marktlokation) das SG10 CCI+++ZA6 (Prognosegrundlage der Marktlokation: Prognose auf Basis von Profilen) CAV+Z36 (TEP m. Referenzmessung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '266',
      'condition_text': 'Wenn SG10 CCI+++ZB1 (Bereits ausgetauschte Prognosegrundlage derMarktlokation: Prognose auf Basis von Profilen) CAV+Z36 (TEP m. Referenzmessung) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '267',
      'condition_text': 'Wenn SG8 SEQ+Z38 (Referenzprofildaten) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '268',
      'condition_text': 'Wenn der Code im DE3207 in der "EDI@Energy Codeliste der europäischen Ländercodes" in der Spalte "PLZ vorhanden" ein "X" aufgeführt istBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '269',
      'condition_text': 'Es sind alle OBIS- Kennzahlen gem. EDI@Energy Codeliste der OBIS-Kennzahlen und Medien für den deutschen Energiemarkt Kap.3 anzugeben welche an der Tranche erforderlich sind',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '270',
      'condition_text': 'Wenn in diesem PIA der Code im DE7140 mit 1-02, 1- 04, 1-06, 1-09 beginnt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '273',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z20 (OBIS-Daten der Zähleinrichtung / Smartmeter-Gateway) das PIA+5+1-b?:1.8.e / 1-b?:2.8.e / 1-b?:3.8.e / 1-b?:4.8.e / 1-b?:5. 8.e / 1-b?:6.8.e / 1- b?:7.8.e / 1-b?:8.8.e / 1-b?:1.8.63 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '274',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z20 (OBIS-Daten der Zähleinrichtung / Mengenumwerter) das PIA+5+7- b?:3.0.0 / 7-b?:6.0.0 / 7-b?:3.1.0 / 7-b?:6.1.0 / 7-b?:3.2.0 / 7-b?:6.2.0 / 7-b?:13.2.0 / 7-b?:16.2.0 / 7- b?:1.0.0 / 7-b?:2.0.0 / 7-b?:4.0.0 / 7-b?:5.0.0 / 7-b?:11.2.0 / 7-b?: 12.2.0 / 7-b?:14.2.0 / 7-b?:15.2.0 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '278',
      'condition_text': 'Wenn in dieser SG4 das STS+E01++A97/A98 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '280',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '281',
      'condition_text': 'Wenn in dieser SG4 das STS+E01++A97 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '282',
      'condition_text': 'Wenn in diesem PIA der Code im DE7140 1-01-6-005, 1-01-9-001, 1-07-3-001, 1- 08-1-001, 1-08-3-001, 1-08- 4-001/002/003/004, 1-10-3- 001 enthalten ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '283',
      'condition_text': 'Wenn Empfänger der Nachricht der zum Nachrichtendatum aktuell zugeordnete Lieferant ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '284',
      'condition_text': 'Erlaubte Codes aus der Codeliste der Gruppenartikel- und Artikel-ID sind in der Spalte UTILMD/ Codeverwendung mit X gekennzeichnet',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '285',
      'condition_text': 'Wenn in diesem PIA der Code im DE7140 mit 1-08-3- AGS angegeben ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '286',
      'condition_text': 'Wenn in diesem PIA der Code im DE7140 mit 1-08-1/ 2/4/5-AGS-KG',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '287',
      'condition_text': 'Erlaubte Codes aus der PRICAT BGM+ Z70 (Preisblatt Netznutzung) des verantwortlichen NB',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '288',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z02 (OBIS- Daten der Marktlokation) das PIA+5+1-b?:2.9.e vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '290',
      'condition_text': 'Wenn der Objektcode im RFF+Z33 (Referenz auf den Objektcode in der Lokationsbündelstrukt ur) im DE1154 derselben SG8 SEQ+Z58 (Zuordnung Lokation zum Objektcode des Lokationsbündels) in einem weiteren SG8 SEQ+Z58 vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '291',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z58 (Zuordnung Lokation zum Objektcode des Lokationsbündels) das RFF+Z37 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '294',
      'condition_text': 'Wenn SG5 LOC+Z18 (Netzlokation) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '295',
      'condition_text': 'Wenn SG5 LOC+Z15 (MaBiS-Zählpunkt) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '296',
      'condition_text': 'Wenn SG5 LOC+Z20 (Technische Ressource) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '297',
      'condition_text': 'Wenn SG5 LOC+Z18 (Netzlokation) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '298',
      'condition_text': 'Wenn SG5 LOC+Z20 (Technische Ressource) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '299',
      'condition_text': 'Wenn SG5 LOC+Z19 (Steuerbare Ressource) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '300',
      'condition_text': 'Wenn SG8 SEQ+Z15 (Daten der Tranche) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '302',
      'condition_text': 'Wenn SG8 SEQ+Z08 (Profilschardaten) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '303',
      'condition_text': 'Wenn SG8 SEQ+Z21 (Profildaten) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '304',
      'condition_text': 'Wenn SG8 SEQ+Z22 (Daten der Summenzeitreihe) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '305',
      'condition_text': 'Wenn SG8 SEQ+Z24 (Daten der Überführungszeitreihe) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '308',
      'condition_text': 'Wenn DTM+92 (Beginn zum) im DE2380 < 202212312300?+00',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '309',
      'condition_text': 'Wenn DTM+137 (Nachrichtendatum) im DE2380 ≥ 202409302200?+00',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '312',
      'condition_text': 'Wenn DTM+157 (Änderung zum) im DE2380 < 202212312300?+00',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '314',
      'condition_text': 'Es sind alle OBIS- Kennzahlen gem. EDI@Energy Codeliste der OBIS-Kennzahlen und Medien für den deutschen Energiemarkt Kap. 3 anzugeben, welche an der Marktlokation erforderlich sind. Der Mindestumfang der OBIS-Kennzahlen ergibt sich aus den genannten Messprodukt-Codes dem Kap. 5.1 des Dokumentes "Codeliste der Konfigurationen"',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '315',
      'condition_text': 'Es sind alle OBISKennzahlen gem. EDI@Energy Codeliste der OBIS-Kennzahlen und Medien für den deutschen Energiemarkt Kap. 4 anzugeben welche an der Marktlokation erforderlich sind, dabei muss der Mindestumfang aus Kap. 4.6 eingehalten werden. Der Mindestumfang der OBIS- Kennzahlen ergibt sich aus den genannten Messprodukt-Codes dem Kap. 5.2 des Dokumentes "Codeliste der Konfigurationen"',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '316',
      'condition_text': 'Wenn in derselben SG8 das RFF+Z14 (Smartmeter- Gateway) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '317',
      'condition_text': 'Es ist derselbe Wert wie im DE2380 von DTM+92 (Datum Vertragsbeginn) einzutragen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '318',
      'condition_text': 'Es ist derselbe Wert wie im DE2380 von DTM+93 (Datum Vertragende) einzutragen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '321',
      'condition_text': 'Wenn im DE3155 in demselben COM der Code EM vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '322',
      'condition_text': 'Wenn im DE3155 inBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167demselben COM der Code TE / FX / AJ / AL vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '323',
      'condition_text': 'Es sind alle OBIS- Kennzahlen gem. EDI@Energy Codeliste der OBIS-Kennzahlen und Medien für den deutschen Energiemarkt Kap. 3. anzugeben, welche an der Zähleinrichtung genutzt werden. Der Mindestumfang der OBIS-Kennzahlen ergibt sich aus den genannten Messprodukt-Codes dem Kap. 5.1 des Dokumentes "Codeliste der Konfigurationen"',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '324',
      'condition_text': 'Es sind alle OBIS- Kennzahlen gem. EDI@Energy Codeliste der OBIS Kennzahlen Kap. 4. anzugeben welche an der Zähleinrichtung genutzt werden. Der Mindestumfang der OBIS-Kennzahlen ergibt sich aus den genannten Messprodukt-Codes dem Kap. 5.2 des Dokumentes "Codeliste der Konfigurationen"',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '327',
      'condition_text': 'Wenn DTM+157 (Änderung zum) im DE2380 ≥ 202212312300?+00',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '328',
      'condition_text': 'Wenn IMD++Z36+Z12 (Identifikationslogik: Marktlokations-ID) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '329',
      'condition_text': 'Wenn in dieser SG4 IDE+24 das STS+E01++A03: E_0096 bzw. A04:E_0097 nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '332',
      'condition_text': 'Wenn im SG8 SEQ+Z01 (Daten der Marktlokation) das SG10 CCI+6++ZA9 (Aggreg. verantw. ÜNB) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '333',
      'condition_text': 'Wenn IMD+Z36+Z13 (Identifikationslogik: Alle Identifikationsdaten) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '334',
      'condition_text': 'Nur MP-ID aus Sparte Gas',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '335',
      'condition_text': 'Wenn im SG8 SEQ+Z78 RFF+Z31 "Referenz auf die Lokationsbündelstruktur " im DE1153 der Code Z31 "Lokationsbündelstruktu r" vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '336',
      'condition_text': 'Wenn in Änderungsmeldung gefülltBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF an LF an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 44162 44163 44164 44165 44166 44167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '337',
      'condition_text': 'Wenn SG10 CCI+++ZB4 (Bezeichnung der Summenzeitreihe) CAV+Z95/ Z96 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '338',
      'condition_text': 'Wenn CCI+++ZB4 (Bezeichnung der Summenzeitreihe) CAV+Z95/ Z96/ Z97/ Z99/ ZA1/ ZA3/ ZA4/ZG7 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '339',
      'condition_text': 'Wenn CCI+++ZB4 (Bezeichnung der Summenzeitreihe) CAV+Z97/ Z98/ Z99/ ZA0/ ZA1/ ZA2/ ZA3/ ZA6/ ZG7 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '340',
      'condition_text': 'Wenn CCI+++ZB4 (Bezeichnung der Summenzeitreihe) CAV+Z95/ Z97/ Z98/ Z99/ ZA1/ ZA2/ ZA3/ ZA4/ ZA5/ ZA6 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '341',
      'condition_text': 'Wenn CCI+++ZB4 (Bezeichnung der Summenzeitreihe) CAV+Z96/ ZA0/ ZG7 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '342',
      'condition_text': 'Wenn aktiver MaBiS-ZP für den Betrachtungszeitraum vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '343',
      'condition_text': 'Wenn DTM+157 (Änderung zum) im DE2380 ≥ 202312312300?+00',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '344',
      'condition_text': 'Wenn in dieser SG8 das SG10 CCI+++ZB4 (Bezeichnung der Summenzeitreihe) CAV+ZF1 (Netzgangzeitreihe (NGZ)) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '345',
      'condition_text': 'Wenn SG5 LOC+Z17 (Messlokation) vorhandenBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '346',
      'condition_text': 'Wenn SG10 CCI+++E13 (Zählertyp) CAV+MME (mME) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '347',
      'condition_text': 'Wenn SG5 LOC+Z16 (Marktlokation) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '348',
      'condition_text': 'Wenn SG5 LOC+Z21 (Tranche) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '349',
      'condition_text': 'Wenn SG5 LOC+Z17 (Messlokation) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '350',
      'condition_text': 'Wenn STS+E01++A01/ A03/ A04/ A12 nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '351',
      'condition_text': 'Wenn SG4 STS+E01++A07/ A08 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '352',
      'condition_text': 'Wenn SG4 STS++A08/ A09 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '354',
      'condition_text': 'Wenn STS+E01++A01/ A03/ A17/ A18 nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '355',
      'condition_text': 'Wenn SG4 STS+E01++A11 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '356',
      'condition_text': 'Wenn SG4 STS+E01++A50 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '357',
      'condition_text': 'Wenn SG4 STS+E01++A06/ A11 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '359',
      'condition_text': 'Es sind nur Antwortcodes aus dem Cluster Ablehnung erlaubt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '360',
      'condition_text': 'Es sind nur Antwortcodes aus dem Cluster Zustimmung erlaubt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '361',
      'condition_text': 'Wenn STS+E01++A03/ A04 nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '362',
      'condition_text': 'Wenn STS+E01++A03/ A17 nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '363',
      'condition_text': 'Wenn SG4 STS+E01++A50 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '365',
      'condition_text': 'Wenn in dieser SG4 IDE+24 das STS+E01++A04: E_0047/E_0014 bzw. A03: E_0049/E_0004 nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '366',
      'condition_text': 'Bis auf den Code A30 sind alle Codes aus EBD E_0403 im Cluster Ablehnung erlaubt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '367',
      'condition_text': 'Wenn SG4 STS+E01++A04 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '368',
      'condition_text': 'Es sind alle Codes aus der Codeliste G_0009 erlaubt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '369',
      'condition_text': 'Wenn Marktlokation nicht tranchiert',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '370',
      'condition_text': 'Wenn SG10 CAV+TLS/ TES/BIT/GET/GAT/SOT/ WNT/WFT/WAT',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '371',
      'condition_text': 'Wenn SG8 SEQ+Z38 (Referenzprofildaten) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '372',
      'condition_text': 'Wenn SG10 CAV+TES/ BIT/GET/GAT/SOT/WNT/ WFT/WAT vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '373',
      'condition_text': 'Wenn ein Referenzprofil an der Marktlokation vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '375',
      'condition_text': 'Für die ID im SG5 LOC+Z15 (MaBiS-Zählpunkt) DE3225, wenn SG8+Z24(Daten der Überführungszeitreihe) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '376',
      'condition_text': 'Für die ID im SG5 LOC+Z15 (MaBiS-Zählpunkt) DE3225, wenn SG8+Z22 (Daten der Summenzeitreihe) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '377',
      'condition_text': 'Wenn SG10 CCI+15++Z21 (Überführungszeitreihentyp) CAV+AUS vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '378',
      'condition_text': 'Wenn SG10 CCI+15++Z21 (Überführungszeitreihentyp) CAV+AUS nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '379',
      'condition_text': 'Wenn SG10 CCI+15++Z21 (Überführungszeitreihentyp) CAV+ Code für EEG- Überführungszeitreihen (ausgenommen AU1) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '380',
      'condition_text': 'Wenn SG10 CCI+15++Z21 (Überführungszeitreihentyp) CAV+AUS/AU1 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '384',
      'condition_text': 'Wenn SG10 CCI+Z37++ZD1 (Basis zur Bildung der Tranchengröße) (Prozentual) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '386',
      'condition_text': 'Wenn mehr als eine SG8 SEQ+Z02 (OBIS-Daten der Marktlokation) mit einer OBIS-Kennzahl für Energiemenge im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '387',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z02 (OBIS Daten der Marktlokation) eine OBIS- Kennzahl für Energiemenge im PIA+5 vorhanden und es sich lt. Codeliste OBIS um eine OBIS mit zugeordneter Zählzeit handelt (Tarif: e = 1 .. 62)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '389',
      'condition_text': 'Wenn mehr als eine SG8 SEQ+Z20 (OBIS-Daten der Zähleinrichtung / Smartmeter-Gateway), die mit dem RFF+MG/ Z14 (Referenz auf die Gerätenummer) auf die gleiche Gerätenummer referenziert, mit einer OBIS-Kennzahl der Werteart "Zählerstand" im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '390',
      'condition_text': 'Wenn mindestens eine weitere SG8 SEQ+Z20 (OBIS-Daten der Zähleinrichtung / Smartmeter- Gateway), die mit dem RFF+Z18 (Referenz auf die ID der Marktlokation) auf die gleiche ID einer Marktlokation wie in dieser SG referenziert und mit dem RFF+MG / Z14 (Referenz auf die Gerätenummer / Referenz auf das SMGw) auf die gleiche Gerätenummer wie in dieser SG referenziert und mit dem SG8 RFF+AGK (Konfigurations-ID auf die gleich Konfigurations-ID referenziert (wenn diese vorhanden), und auch mit einer OBIS- Kennzahl für Zählerstand im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '391',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z20 (OBIS Daten der Zähleinrichtung / Smartmeter-Gateway) eine OBIS-Kennzahl für Zählerstand im PIA+5 vorhanden und es sich lt. Codeliste OBIS um eine OBIS mit zugeordneter Zählzeit handelt (Tarif: e = 1 .. 62)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '392',
      'condition_text': 'Wenn in diesem PIA der Code im Format n1-n2-n1 angegeben ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '393',
      'condition_text': 'Wenn in diesem PIA der Code im Format n1-n2-n1-n3 angegeben ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '394',
      'condition_text': 'Wenn in diesem PIA der Code im Format n1-n2-n1- n8-n2 angegeben ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '395',
      'condition_text': 'Wenn in diesem PIA der Code im Format n1-n2-n1-n8 angegeben ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '396',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z02 (OBIS- Daten der Marktlokation) eine OBIS-Kennzahl für Wirkarbeit und 1/4 Stunde im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '397',
      'condition_text': 'Wenn in diesem PIA der Code im DE7140 mit 1-08-1/ 1-08-4 beginnt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '398',
      'condition_text': 'Wenn in diesem PIA der Code im DE7140 mit 1-08-2/ 1-08-5 beginnt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '399',
      'condition_text': 'Wenn im SG8 SEQ+Z78 RFF+Z31 (Referenz auf die Lokationsbündelstruktur) im DE1153 der Code Z31 (Lokationsbündelstruktur ) vorhanden ist und im DE1154 (ID der Lokationsbündelstruktur) der Code 9992 00000 001 8 nicht vorhanden ist.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '402',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z20 (OBIS- Daten der Zähleinrichtung / Smartmeter-Gateway) eine OBIS-Kennzahl der Werteart "Zählerstand" im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '404',
      'condition_text': 'Wenn nicht dieselbe MP-ID in SG2 NAD+MR (Nachrichtenempfänger) und im SG8 SEQ+Z01 (Daten der Marktlokation) SG10 CCI+++ZB3 (Zugeordnete Marktpartner) CAV+Z91 (Messtellenbetreiber) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '405',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z02 (OBIS-Daten der Marktlokation) eine OBIS-Kennzahl für Wirkarbeit und kumuliert im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '406',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z02 (OBIS-Daten der Marktlokation) eine OBIS-Kennzahl für Wirkarbeit und höchste 1/4 Stunde im Monat im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '407',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z02 (OBIS-Daten der Marktlokation) eine OBIS-Kennzahl für Blindarbeit im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '408',
      'condition_text': 'Wenn eine SG8 SEQ+Z02 (OBIS-Daten der Marktlokation), mit dem RFF+Z18 (Referenz auf die ID der Marktlokation) auf die gleiche ID einer Marktlokation referenziert wie das RFF+Z18 (Referenz auf die ID der Marktlokation) in dieser SG8, mit einer OBIS-Kennzahl für Wirkarbeit und kumuliert im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '409',
      'condition_text': 'Wenn keine SG8 SEQ+Z02 (OBIS-Daten der Marktlokation), mit dem RFF+Z18 (Referenz auf die ID der Marktlokation) auf die gleiche ID einer Marktlokation refe-renziert wie das RFF+Z18 (Referenz auf die ID der Marktlokation) in dieser SG8, mit einer OBIS-Kennzahl für Wirkarbeit und kumuliert im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '410',
      'condition_text': 'Wenn eine SG8 SEQ+Z02 (OBIS-Daten der Marktlokation), mit dem RFF+Z18 (Referenz auf die ID der Marktlokation) auf die gleiche ID einer Marktlokation refe-renziert wie das RFF+Z18 (Referenz auf die ID der Marktlokation) in dieser SG8, mit einer OBIS-Kennzahl für Wirkarbeit und 1/4 Stunde im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '411',
      'condition_text': 'Wenn keine SG8 SEQ+Z02 (OBIS-Daten der Marktlokation), mit dem RFF+Z18 (Referenz auf die ID der Marktlokation) auf die gleiche ID einer Marktlokation refe-renziert wie das RFF+Z18 (Referenz auf die ID der Marktlokation) in dieser SG8,, mit einer OBIS-Kennzahl für Wirkarbeit und 1/4 Stunde im PIA+5 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '412',
      'condition_text': 'Es sind ausschließlich Konfigurationsprodukt -Codes der "EDI@Energy Codeliste der Konfigurationen" aus Kapitel 4.2 Konfigurationsprodukt e Leistungskurvendefinit ion erlaubt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '417',
      'condition_text': 'Wenn für den erforderlichen Wert keine Zählzeit benötigt wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '419',
      'condition_text': 'Wenn in diesem Datenelement kein anderes Paket in dieser SG10 in der selben SG8 SEQ zur Möglichkeit der Angabe von mindestens einem anderen Code führt.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '420',
      'condition_text': 'Wenn in dieser SG8 das RFF+Z14 (Smartmeter- Gateway) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '421',
      'condition_text': 'Wenn in dieser SG8 das SG10 CCI+Z39 (Zugeordnete Zählzeitdefinition) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '425',
      'condition_text': 'Messprodukt-Code aus den Kapitel 2.1 "Standard- Messprodukte der Marktlokation" der Codeliste der Konfigurationen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '426',
      'condition_text': 'Messprodukt-Code aus den Kapitel 2.2 "Standard- Messprodukte der Tranche" der Codeliste der Konfigurationen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '427',
      'condition_text': 'Messprodukt-Code aus den Kapitel 2.3 "Standard- Messprodukte der Messlokation" der Codeliste der Konfigurationen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '428',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z27 (Erforderliches Messprodukt der Marktlokation) das PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen Kapitel 2.1.1 Standard- Messprodukt der Marktlokation mit der Wahlmöglichkeit der Zuordnung einer Zählzeit vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '429',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z19 (Erforderliches Messprodukt der Messlokation) das PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen Kapitel 2.3.1 Standard- Messprodukt der Messlokation mit der Wahlmöglichkeit der Zuordnung einer Zählzeit vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '430',
      'condition_text': 'Wenn eine andere SG8 SEQ+Z27 (Erforderliches Messprodukt der Marktlokation), mit dem RFF+Z18 (Referenz auf die ID der Marktlokation) auf die gleiche ID einer Marktlokation referenziert, mit PIA+5+ 9991000000078:Z11 (für Wirkarbeit Lastgang 1/4 stündlich) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '431',
      'condition_text': 'Wenn keine andere SG8 SEQ+Z27 (Erforderliches Messprodukt der Marktlokation), mit dem RFF+Z18 (Referenz auf die ID der Marktlokation) auf die gleiche ID einer Marktlokation referenziert, mit PIA+5+ 9991000000078:Z11 (Wirkarbeit Lastgang 1/4 stündlich) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '432',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z27 (Erforderliches Messprodukt der Marktlokation), das PIA+5+ 9991000000078:Z11 (Wirkarbeit Lastgang 1/4 stündlich) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '433',
      'condition_text': 'Wenn keine andere SG8 SEQ+Z27 (Erforderliches Messprodukt der Marktlokation), mit dem RFF+Z18 (Referenz auf die ID der Marktlokation) auf die gleiche ID einer Marktlokation referenziert, mit PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen Kapitel 2.1.1 Standard-Messprodukt der Marktlokation mit der Wahlmöglichkeit der Zuordnung einer Zählzeit vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '434',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z27 (Erforderliches Messprodukt der Marktlokation) das PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen Kapitel 2. Codeliste der Standard-Messprodukte Strom für Werte nach Typ 1 mit der Werteigenschaft „Blindarbeit“ vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '435',
      'condition_text': 'Wenn eine andere SG8 SEQ+Z27 (Erforderliches Messprodukt der Marktlokation), mit dem RFF+Z18 (Referenz auf die ID der Marktlokation) auf die gleiche ID einer Marktlokation referenziert, mit PIA+5 DE7140 mit einem Messprodukt aus Codeliste der Konfigurationen Kapitel 2.1.1 Standard-Messprodukt der Marktlokation mit der Wahlmöglichkeit der Zuordnung einer Zählzeit vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '436',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z27 (Erforderliches Messprodukt der Marktlokation), das PIA+5+ 9991000000086:Z11 (Wirkarbeit höchste 1/4 Stunde im Monat) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '437',
      'condition_text': 'Wenn in dieser DG4 das STS+E01+++A06:E:0502vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '438',
      'condition_text': 'Wenn im selben CCI im DE7059 der Code Z39 (Code der Zählzeit) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '439',
      'condition_text': 'Wenn in dem SG8 SEQ+Z15 (Daten der Tranche) das RFF+Z20 (Referenz auf die ID der Tranche) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '440',
      'condition_text': 'Wenn SG8 SEQ+Z01 (Daten der Marktlokation) RFF+Z18 (Referenz auf die ID der Marktlokation) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '441',
      'condition_text': 'Wenn im SG8+SEQ+Z03 (Zähleinrichtungsdate n) für die in diesem RFF DE1154 genannte Gerätenummer eines Zählers das RFF+Z14 (Referenz auf das Smartmeter-Gateway) nicht vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '442',
      'condition_text': 'Wenn in keinem SG8+SEQ+Z09 Mengenumwerterdaten das RFF+MG (Referenz auf die Gerätenummer) der in diesem RFF DE1154 genannte Gerätenummer des Zählers vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '443',
      'condition_text': 'Wenn DTM+157 (Änderung zum) im DE2380 < 202409302200?+00',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '444',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z60 (Produkt- Daten der Netzlokation) das PIA+5 (Produkt- Daten der Netzlokation) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '445',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z60 (Produkt- Daten der Netzlokation) das SG10 CCI+11 (Details zum Produkt der Netzlokation) nicht vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '446',
      'condition_text': 'Wenn in derselben SG8 das CCI+Z17 (Stromverbrauchsart) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '447',
      'condition_text': 'Wenn in derselben SG8 das CCI+Z50 (Stromerzeugungsart) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '448',
      'condition_text': 'Wenn in derselben SG8 das CCI+Z56 (Speicher) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '449',
      'condition_text': 'Wenn in derselben SG8 das SG10 CCI+6++ZA9 CAV=ZG3 (Aggreg.verantw. ÜNB und Lokation im Regelbetrieb) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '450',
      'condition_text': 'Wenn in demselben RFF der Code Z32 (Netzlokation) im DE1153 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '451',
      'condition_text': 'Wenn in demselben RFF der Code Z18 (Marktlokation) im DE1153 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '452',
      'condition_text': 'Wenn in demselben RFF der Code Z19 (Messlokation) im DE1153 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '453',
      'condition_text': 'Wenn bei der Bestellung ein Messprodukt der Codeliste der Konfigurationen aus dem Kapitel 4.4 mit dem Auslöser „Bei Schwellwertunter-/ - überschreitung“ mit selbständiger Änderungsmöglichkeit bestellt wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '454',
      'condition_text': 'Das Bilanzierungsbeginn Datum muss kleiner sein als das Bilanzierungsende Datum in der SG8 „Datenstand des ÜNB“, SG 9 Energiemenge DZÜ Anteil',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '455',
      'condition_text': 'Das Bilanzierungsende- Datum muss größer sein, als das Bilanzierungsbeginn Datum in der SG8 „Datenstand des ÜNB“ , SG 9 Energiemenge DZÜ Anteil',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '456',
      'condition_text': 'Wenn in demselben RFF der Code Z37 (Technische Ressource) im DE1153 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '457',
      'condition_text': 'Wenn bei der Bestellung das Messprodukten 9991 00000 149 8 bestellt wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '458',
      'condition_text': 'Wenn bei der Bestellung das Konfigurationsprodukte 9991 00000 073 9 bestellt wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '459',
      'condition_text': 'Wenn bei der Bestellung ein Messprodukt der Codeliste der Konfigurationen aus dem Kapitel 4.4 mit dem Übertragungsweg "CLS-Direkt aus dem SMGW" bestellt wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '460',
      'condition_text': 'Wenn bei der Bestellung ein Messprodukt der Codeliste der Konfigurationen aus dem Kapitel 4.4 mit dem Übertragungsweg "aus dem SMGW" bestellt wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '461',
      'condition_text': 'Wenn in derselben SG10 das CCI+Z17 (Stromverbrauchsart) im CAV+ZG8 (Technischen Ressource fällt unter § 14a EnWG) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '462',
      'condition_text': 'Wenn in derselben SG10 das CCI+Z17 (Stromverbrauchsart) im CAV+ZH1 (Inbetriebsetzung der TR vor 2024) vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '463',
      'condition_text': 'Wenn in derselben SG10 das CCI+Z61++ZF9 (Kunde erfüllt die Voraussetzung nach EnFG) vorhandenBeschreibung Nicht bila.rel. Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung Anfrage an LF Anfrage Anfrage Anfrage an LF Anfrage an LF Anfrage Kommunikation von MSB an NB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB LF an NB [Verteiler] an MSB an MSB an LF [Berechtigt] [Verteiler] an LF LF an NB [Berechtigt] Prüfidentifikator 55133 55134 55135 55136 55137 55138',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '464',
      'condition_text': 'Wenn DTM+157 (Änderung zum) im DE2380 < 202312312300?+00',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '465',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z52 (Daten der Technischen Ressource) das RFF+Z38 (Referenz auf die der Technischen Ressource zugeordnete Steuerbare Ressource) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '466',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z52 (Daten der Technischen Ressource) das RFF+Z32 (Referenz auf die der Technischen Ressource zugeordneten Netzlokation) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '467',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z52 (Daten der Technischen Ressource) das CAV+ZG8 (Technischen Ressource fällt unter §14a EnWG) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '468',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z52 (Daten der Technischen Ressource) das SG10 CAV+ZH0 (Inbetriebsetzung der TR nach 2023) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '469',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z52 (Daten der Technischen Ressource) das SG10 CAV+ZH1 (Inbetriebsetzung der TR vor 2024) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '470',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z52 (Daten der Technischen Ressource) das CAV+ZH5 (Wechsel in das in das §14a EnWG-Modell gem. Festlegung BK6-22-300 wurde durchgeführt) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '471',
      'condition_text': 'Wenn in demselben RFF der Code Z35 (vorgelagerte Netzlokation) im DE1153 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '472',
      'condition_text': 'Wenn in demselben RFF der Code Z34 (vorgelagerte Messlokation) im DE1153 vorhanden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '473',
      'condition_text': 'Wenn im RFF+Z33 (Referenz auf den Objektcode in der Lokationsbündelstrukt ur) das DE1156 (Fortlaufende Nummer eines Lokationsbündels im Geschäftsvorfall) in derselben SG8 SEQ+Z58 (Zuordnung Lokation zum Objektcode des Lokationsbündels) nicht vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '474',
      'condition_text': 'Wenn im RFF+Z33 (Referenz auf den Objektcode in der Lokationsbündelstrukt ur) das DE1156 Fortlaufende Nummer eines Lokationsbündels im Geschäftsvorfall) in derselben SG8 SEQ+Z58 Zuordnung Lokation zum Objektcode des Lokationsbündels) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '475',
      'condition_text': 'Wenn der Objektcode im RFF+Z33 (Referenz auf den Objektcode in der Lokationsbündelstruktur) im DE1154 derselben SG8 SEQ+Z58 (Zuordnung Lokation zum Objektcode des Lokationsbündels) in einem weiteren SG8 SEQ+Z58 mit derselben fortlaufenden Nummer vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '476',
      'condition_text': 'Wenn in demselben Segment das DE1153 mit dem Code Z34 vorgelagerte Messlokation vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '477',
      'condition_text': 'Wenn in demselben Segment das DE1153 mit dem Code Z35 vorgelagerte Netzlokation vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '478',
      'condition_text': 'Wenn das LOC+Z18 (Netzlokation) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '479',
      'condition_text': 'Wenn der Objektcode im RFF+Z33 (Referenz auf den Objektcode in der Lokationsbündelstrukt ur) im DE1154 derselben SG8 SEQ+Z58 (Zuordnung Lokation zum Objektcode des Lokationsbündels) in einem weiteren SG8 SEQ+Z58 (Zuordnung Lokation zum Objektcode des Lokationsbündels) vorhanden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Strom',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Gas',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '500',
      'condition_text': 'Hinweis: Code ist gemäß der Kategorie der zu stornierenden Meldung zu wählen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Die Angabe wird aus dem DTM+157 (Änderung zum) der Zuordnungslisteübernommen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Ersatzbelieferung gibt es nur bei - Marktlokationen in der Niederdruckebene, die kein Haushaltskunde gem. EnWG sind und die nicht mehr der gesetzlichen Ersatzversorgung (drei Monate) unterliegen und - für Marktlokationen, die in Mitteldruck einer Versorgung zugeführt werden sollen. Grundlage für eine Ersatzbelieferung ist die bilaterale Vereinbarung.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '503',
      'condition_text': 'Hinweis: Angabe des BGM DE1004 aus der ORDERS',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Der Code Z22 wird auch in der Sparte Strom genutzt. Der Verweis auf den Einspeisevergütungsinter vall ist in der Sparte Gas nicht relevant.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '505',
      'condition_text': 'Hinweis: Je zugeordneter ID und je EEG- Überführungszeitreihe ein Vorgang erforderlich',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '506',
      'condition_text': 'Hinweis: Für jeden Code im LOC+Z16 (Marktlokation) sollen die entsprechenden Kundendaten des LF angegeben werden, falls bekannt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '507',
      'condition_text': 'Hinweis: Ursprünglich vom NB bestätigtes Beginndatum',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '508',
      'condition_text': 'Hinweis: Beginndatum beim neuen NB',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '510',
      'condition_text': 'Hinweis: Zu verwenden bei der Abmeldung der ESV',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '511',
      'condition_text': 'Hinweis: Es sind alle Bilanzierungsgebiete anzugeben in denen das Profil verwendet wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '513',
      'condition_text': 'Hinweis: Bei Anwendung dieser Segmentgruppe vor dem 01.10.2024 sind die Codes in diesem Segment noch nicht gültig. Somit wird der Geschäftsvorfall mit einer Verarbeitbarkeitsfehlermeldu ng mit Fehlercode Z39 (Code nicht aus erlaubtem Wertebereich“) abgelehnt werden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '514',
      'condition_text': 'Hinweis: Es darf nur eine Information im DE3148 übermittelt werden Beschreibung Nicht bila.rel. Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung Anfrage an LF Anfrage Anfrage Anfrage an LF Anfrage an LF Anfrage Kommunikation von MSB an NB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB LF an NB [Verteiler] an MSB an MSB an LF [Berechtigt] [Verteiler] an LF LF an NB [Berechtigt] Prüfidentifikator 55133 55134 55135 55136 55137 55138',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '515',
      'condition_text': 'Hinweis: Für den ZP derLieferantensummenZR anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '518',
      'condition_text': 'Hinweis: Es sind alle Altlieferanten anzugeben, an die eine Abmeldeanfrage gesendet wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '520',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 1 100%',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '521',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 2 100%',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '522',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 2 prozentualer Anteil der Tranche von der Marktlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '523',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 3 prozentualer Anteil der Tranche von der Marktlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '524',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 1 und 3: ist die ID der Marktlokation anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '526',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 2: ID der Marktlokation und ID der Tranche, bei Geschäfts-vorfall 1 und 3: ID der Marktlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '527',
      'condition_text': 'Hinweis: Es ist die ID der Marktlokation und alle Identifikatoren der Messlokationen anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '528',
      'condition_text': 'Hinweis: Es ist das Datum/ Daten aus der Anfrage zu verwendenBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '530',
      'condition_text': 'Hinweis: Es sind alle an dem Meldepunkt vorhandenen Daten, die mit dieser Segmentgruppe übermittelt werden und zum Datum „Änderung zum“ Gültigkeit haben, anzugeben. Dies kann zur Folge haben, dass Segmentgruppen bzw. Segmente zu wiederholen sind',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '533',
      'condition_text': 'Hinweis: Es ist die MP-ID des Lieferanten anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '556',
      'condition_text': 'Hinweis: Wenn keine Korrespondenzanschrift des Endverbrauchers/ Kunden vorliegt, ist die Anschrift der Marktlokation zu übermitteln',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '558',
      'condition_text': 'Hinweis: Diese Information kann freiwillig ausgetauscht werden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '559',
      'condition_text': 'Hinweis: Die Korrespondenzanschrift des Endverbrauchers/ Kunden wird nicht zur Identifikation genutzt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '560',
      'condition_text': 'Hinweis: Die Angabe Name und Adresse für die Ablesekarte wird nicht zur Identifikation genutzt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '563',
      'condition_text': 'Hinweis: Für die ID der LieferantensummenZR',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '565',
      'condition_text': 'Hinweis: Dieses Datum beschreibt den Beginn der Gültigkeit der Stammdaten aus Sicht des NB, welche der ÜNB übernimmt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '566',
      'condition_text': 'Hinweis: Altlieferant',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '567',
      'condition_text': 'Hinweis: Neulieferant',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '568',
      'condition_text': 'Hinweis: Lieferant der LieferantensummenZR',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '569',
      'condition_text': 'Hinweis: Dritter Nutzer',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '570',
      'condition_text': 'Hinweis: Netzbetreiber Alt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '571',
      'condition_text': 'Hinweis: Auslösender Marktpartner (LFA bei STS+7++ZG9, LFN bei STS+7++ZH0, NB bei STS+7++ZH1)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '572',
      'condition_text': 'Hinweis: Kundenname aus Anmeldung Lieferant neu',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '573',
      'condition_text': 'Hinweis: Wenn keine andere Information für „Name und Adresse für die Ablesekarte“ vorliegt, wird das Segment aus dem Kundennamen im NAD+Z09 und der Adresse aus der Korrespondenzanschrift NAD+Z04 zusammengesetzt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '576',
      'condition_text': 'Hinweis: Stammdaten des bisherigen Messstellenbetreibers',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '577',
      'condition_text': 'Hinweis: Wird mit dem ursprünglich vom NB bestätigten Beginndatum gefüllt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '579',
      'condition_text': 'Hinweis: Auslösender Marktpartner (LFN bei STS+7++ZH0, NB bei STS+7++ZH1)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '580',
      'condition_text': 'Hinweis: Ersatzbelieferung gibt es nur bei - Marktlokationen in der Niederspannung, die kein Haushaltskunde gem. EnWG sind und die nicht mehr der gesetzlichen Ersatzversorgung (drei Monate) unterliegen und - für Marktlokationen, die in Mittelspannung/Hochspannung einer Versorgung zugeführt werden sollen. Grundlage für eine Ersatzbelieferung ist die bilaterale Vereinbarung.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '581',
      'condition_text': 'Hinweis: Es ist das nächst mögliche Kündigungsdatum anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '582',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 2 ist die ID der Tranche anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '583',
      'condition_text': 'Hinweis: Verwendung der ID der Marktlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '584',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '586',
      'condition_text': 'Hinweis: Die Messlokationsadresse ist der Messlokation zugeordnet, welche in SG8 SEQ+Z18 (Daten der Messlokation) mit CCI+Z01++Z82 (Verwendungsumfang: ID der prozessual behandelten Messlokation) gekennzeichnet ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '590',
      'condition_text': 'Hinweis: Es ist die ID der Marktlokation, welche dem LF zugeordnet sind, sowie alle Identifikatoren der Messlokationen anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '593',
      'condition_text': 'Hinweis: Dieses Datum beschreibt das Ende der Gültigkeit der Stammdaten aus Sicht des NB, welche der ÜNB übernimmt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '594',
      'condition_text': 'Hinweis: Es ist der ZPB des ZP der NGZ und die ZPB der NZR anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '598',
      'condition_text': 'Hinweis: Die Übermittlung dieser Angabe dient dazu, dass der LF auch bei iMS gemessenen Marktlokationen mit Prognosegrundlage auf Basis von Werten einen belastbare Informationfür die Energiebeschaffung hat',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '599',
      'condition_text': 'Hinweis: Es ist der Name und die Adresse des Ablesekartenempfängers für die Messlokation anzugeben, welche in SG8 SEQ+Z18 (Daten der Messlokation) mit CCI+Z01++Z82 (Verwendungsumfang: ID der prozessual behandelten Messlokation) gekennzeichnet ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '601',
      'condition_text': 'Hinweis: Es ist die ID der Marktlokation und alle Identifikatoren der Messlokationen anzugeben. Sowie wenn vorhanden die Tranche/n der Marklokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '603',
      'condition_text': 'Hinweis: Es ist die Vorgangsnummer aus dem RFF+TN (Referenz Vorgangsnummer aus Anfragenachricht) des LF zu übernehmen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '605',
      'condition_text': 'Hinweis: In diesem Segment bzw. SG sind die Daten aus der Sicht des LF anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '606',
      'condition_text': 'Hinweis: In diesem Segment bzw. SG sind die Daten aus der Sicht des NB anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '607',
      'condition_text': 'Hinweis: In diesem Segment bzw. SG sind die zwischen LF und NB im Rahmen der Marktkommunikation ausgetauschten Daten aus der Sicht des NB anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '609',
      'condition_text': 'Hinweis: In diesem Segment bzw. SG sind die zwischen NB, LF und ÜNB im Rahmen der Marktkommunikation ausgetauschten Daten aus der Sicht des ÜNB anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '611',
      'condition_text': 'Hinweis: Wenn das Unternehmen NB die Aufgaben der Marktrolle LF wahrnimmt, ist die MP-ID des Unternehmens NB in der Marktrolle LF anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '612',
      'condition_text': 'Hinweis: Es muss die Vorgangsnummer aus dem IDE+24 (Vorgang) der SDÄ des MSB angegeben werden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '613',
      'condition_text': 'Hinweis: Der Code wird verwendet um die Aggregationsverantwort ung einer Marktlokation auf den ÜNB zu übertragen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '614',
      'condition_text': 'Hinweis: Es werden nur die OBIS Kennzahlen übermittelt die für die Bilanzierung relevant sind',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '615',
      'condition_text': 'Hinweis: Es ist das Datum/Daten aus der eingehenden Nachricht zu verwenden.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '616',
      'condition_text': 'Hinweis: Dient dazu, dass der ÜNB den NB kennt, von welchem der Ursprung ausgegangen ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '617',
      'condition_text': 'Hinweis: Mehrere Vorgänge für eine Marktlokation bei Wechsel bilanzierungsrelevanter Stammdaten innerhalb des Bilanzierungsmonats',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '618',
      'condition_text': 'Hinweis: Bisheriges Datum des MSBA. Sollte der MSBN ein abweichendes Datum verwenden wollen, so teilt er das neue Datum mit einer Stammdatenänderung mit',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '619',
      'condition_text': 'Hinweis: Für die selbständige Änderungsmöglichkeit der Schwellwertunter- / -über- schreitung',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '620',
      'condition_text': 'Hinweis: Erforderlich für Bedingungen in SG1 RFF Referenzangaben in PID 13017 der MSCONS',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '621',
      'condition_text': 'Hinweis: Es ist der MSB anzugeben, welcher ab dem Zeitpunkt der Lokation zugeordnet ist, der in DTM+76 (Datum zum geplanten Leistungsbeginn) genannt ist.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '622',
      'condition_text': 'Hinweis: Falls die OBIS-Kennzahl für mehrere Marktrollen relevant ist, so muss die Segmentgruppe pro Marktrolle wiederholt werden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '623',
      'condition_text': 'Hinweis: Es sind alle Identifikatoren der Messlokationen anzugeben, die zur Ermittlung der Energiemenge der im Vorgang genannten Marktlokation benötigt werden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '624',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 1',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '625',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 2 und 3',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '626',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 2',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '627',
      'condition_text': 'Hinweis: Bei Geschäftsvorfall 1 und 3',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '628',
      'condition_text': 'Hinweis: Referenzierung auf eine ID einer Marktlokation vom SG5 LOC+Z16 (Marktlokation)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '629',
      'condition_text': 'Hinweis: Referenzierung auf eine ID einer Messlokation vom SG5 LOC+Z17 (Messlokation)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '630',
      'condition_text': 'Hinweis: Wenn die Liste abgelehnt wird, ist kein Vorgang enthalten',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '631',
      'condition_text': 'Hinweis: Es ist die Listennummer aus der Lieferanten- bzw. Bilanzierungsgebietsclearinglis te zu verwenden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '632',
      'condition_text': 'Hinweis: Es ist die Listennummer aus der Lieferanten-ausfallarbeits- clearingliste zu verwenden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '635',
      'condition_text': 'Hinweis: Wenn SG4 STS+E01++Z35 (Status der Antwort: Ablehnung der Abmeldeanfrage)vorhanden, sind die Identifikatoren aller Tranchen anzugeben zu denen eine Ablehnung der Abmelde-anfrage vorliegt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '636',
      'condition_text': 'Hinweis: Dieses RFF klassifiziert mit einem Code im DE1153 die in derselben Segmentgruppe enthaltenen DTM zu einem Markt- bzw. Messlokation relevanten Inhalt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '637',
      'condition_text': 'Hinweis: Bei Verpflichtungsanfrage',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '638',
      'condition_text': 'Hinweis: Bei Aufforderung zur Übernahme der einzelnen Messlokation durch den gMSB',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '639',
      'condition_text': 'Hinweis: Wenn Antwort auf Deaktivierung',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '640',
      'condition_text': 'Hinweis: Wenn Antwort auf Aktivierung',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '641',
      'condition_text': 'Hinweis: Wenn Einzelanforderung vorliegt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '642',
      'condition_text': 'Hinweis: Wenn Abo vorliegt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '643',
      'condition_text': 'Hinweis: Nachfolgender Netzbetreiber',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '644',
      'condition_text': 'Hinweis: Wenn in der zugehörigen Anmeldung (44001) in diesem Segmente "Einzug in Neuanlage" (SG4 STS+7++E02) enthalten ist, wird in diesem Geschäftsvorfall der Code E01 verwendet',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '645',
      'condition_text': 'Hinweis: Es ist der Bilanzkreis des LF anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '646',
      'condition_text': 'Hinweis: Es ist der RD-Bilanzkreis des ANB anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '647',
      'condition_text': 'Hinweis: Es ist der RD-Bilanzkreis des anfNB anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '648',
      'condition_text': 'Hinweis: Soll ein Produkt ab dem Datum "Änderung zum" nicht mehr vorhanden sein, wird dies durch nicht angeben des PIA+5 ausgedrückt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '649',
      'condition_text': 'Hinweis: Es werden genau die OBIS Kennzahlen übermittelt, die dem LF vom NB im PID 55185 gemeldet wurden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '651',
      'condition_text': 'Hinweis: Bei einer Marktraumumstellung (Gas) ist zu beachten, dass die tatsächliche Meldung zur Marktraumumstellung auf Ebene der Messlokation durch Angabe der Gasqualität erfolgt. Die betroffene Marktlokation ist vom LF und MSB selbst festzustellen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '653',
      'condition_text': 'Hinweis: Es sind alle Netzlokationen, Marktlokationen, Tranchen und Messlokationen zu nennen, die durch die Bestätigung der Abmeldung der prozessual behandelten Messlokation nicht mehr dem MSB zugeordnet sind',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '654',
      'condition_text': 'Hinweis: Es sind ausschließlich die Daten zum Meldepunkt anzugeben, die für den in NAD+MR (Nachrichtenempfänger) adressierten Marktpartner relevant ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '655',
      'condition_text': 'Hinweis: Wenn ein Zähler an einen Mengenumwerter angeschlossen ist werden an dem Zähler keine OBIS-Kennzahlen angegeben Hier gibt es nur OBIS Kennzahlen vom Mengenumwerter',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '656',
      'condition_text': 'Hinweis: Anzugeben wenn der NB den Use-Case „Stammdatenänderung NB (verantwortlich) ausgehend“ für die Änderung der Aggregationsverantwort ung vom ÜNB auf NB gegenüber LF und MSB durchgeführt hat',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '657',
      'condition_text': 'Hinweis: Anzugeben wenn der NB den LF und MSB informiert hat, dass die Marktlokation nicht mehr bilanzierungs- relevant ist, weil sie ins Modell 2 gewechselt ist oder Bestandteil einer Kundenanlage geworden ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '658',
      'condition_text': 'Hinweis: Anzugeben wenn der NB den Use-Case „Weiterleitung der Stammdaten-änderung vom MSB (verantwortlich) ausgehend“ aufgrund einer Änderung des Bilanzierungsverfahrens von Bilanzierung auf Basis von Viertelstundenwerten auf Bilanzierung auf Basis von Profilen gegenüber LF und MSB durchgeführt hat und die Aggregationsverantwort ung liegt weiterhin beim NB',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '659',
      'condition_text': 'Hinweis: Bei Tranchen ist nur der Meldepunkt der Tranche anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '660',
      'condition_text': 'Hinweis: Es ist die ID der BK-Summenzeitreihe Aggregationsebene BG anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '661',
      'condition_text': 'Hinweis: Ist dem NB bereits die ab dem Lieferbeginn zu verwendende Konfuigurations-ID bekannt, teilt er diese bereits hier mit. Liegt diese noch nicht vor, teilt der NB die aktuell verwendete Konfigurations-ID mit und veranlasst beim MSB eine Konfigurationsänderung, welche nach erfolgreichem Abschluss zu einer neuen Konfigurations-ID führt, die über den Prozess Stammdatenänderung kommuniziert wird.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '662',
      'condition_text': 'Hinweis: Es sind die Daten NGZ und die Daten der NZR anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '663',
      'condition_text': 'Hinweis: Es ist die ID der Marktlokation und die ZPB des ZP der NGZ anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '664',
      'condition_text': 'Hinweis: Es ist das BG des NB (LPB) anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '665',
      'condition_text': 'Hinweis: Wenn ein Zähler mit einem SMGW parametriert ist werden an dem Zähler keine OBIS- Kennzahlen angegeben Hier gibt es nur OBIS Kennzahlen vom SMGW',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '666',
      'condition_text': 'Hinweis: Referenzierung auf eine ID einer Tranche vom SG5 LOC+Z21 (Tranche)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '667',
      'condition_text': 'Hinweis: Für Zeiten die bilanziert wurden, aber inzwischen keine Aggregationsverantwortung beim ÜNB vorliegt, ist eine SG8 mit SG8 - SG10 CCI+6=ZA8 oder SG 10 CCI+6 = ZA9 CAV=ZG4 und SG8 - SG9 QTY+Z45 = 0 zu bilden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '668',
      'condition_text': 'Hinweis: Dieses Segment wird nach Abschluss der Einführung der Lokationsbündelstrukt ur zum 01.10.2025 aus der UTILMD entfernt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '669',
      'condition_text': 'Hinweis: Es können mehrere Messlokationen angegeben werden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '670',
      'condition_text': 'Hinweis: Es sind alle Netzlokationen, zu nennen, die dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '671',
      'condition_text': 'Hinweis: Es sind alle Marktlokationen, zu nennen, die dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '672',
      'condition_text': 'Hinweis: Es sind alle Technischen Ressourcen, zu nennen, die dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '673',
      'condition_text': 'Hinweis: Es sind alle Steuerbaren Ressourcen, zu nennen, die dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '674',
      'condition_text': 'Hinweis: Es sind alle Tranchen, zu nennen, die dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '675',
      'condition_text': 'Hinweis: Es sind alle Messlokationen, zu nennen, die Lokationsbündel angehören wie die prozessual behandelte Messlokation',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '677',
      'condition_text': 'Hinweis: Es sind alle Netzlokationen, zu nennen, die aktuell und / oder zukünftig dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation. Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der Netzlokation zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '678',
      'condition_text': 'Hinweis: Es sind alleMarktlokationen, zu nennen, die aktuell und / oder zukünftig dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation. Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der Marktlokation zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '679',
      'condition_text': 'Hinweis: Es sind alle Technischen Ressourcen, zu nennen, die aktuell und / oder zukünftig dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation. Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der Technischen Ressource zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '680',
      'condition_text': 'Hinweis: Es sind alle Steuerbaren Ressourcen, zu nennen, die aktuell und / oder zukünftig dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation. Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der Steuerbaren Ressource zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '681',
      'condition_text': 'Hinweis: Es sind alle Tranchen, zu nennen, die aktuell und / oder zukünftig dem gleichen Lokationsbündel angehören wie die prozessual behandelte Messlokation.Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der Tranche zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '682',
      'condition_text': 'Hinweis: Es sind alle Messlokationen, zu nennen, die aktuell und / oder zukünftig dem gleichen Lokationsbündel angehören sowie die prozessual behandelte Messlokation im DE5479 zu kennzeichnen. Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der weitern Messlokationen zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '683',
      'condition_text': 'Hinweis: Es sind alle ID der Netzlokationen, welche der im SG5 LOC+Z16 angegebenen Marktlokation aktuell und / oder zukünftig vorgelagert sind anzugeben. Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der Netzlokation zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '684',
      'condition_text': 'Hinweis: Es sind alle ID der Technischen Ressourcen, welche der im LOC+Z16 angegebenen Marktlokation aktuell und / oder zukünftig zugehören anzugeben. Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der Technischen Ressource zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '685',
      'condition_text': 'Hinweis: Es sind alle ID der Steuerbaren Ressourcen, welche der im LOC+Z20 angegebenen Technischen Ressourcen aktuell und / oder zukünftig zugeordnet sind anzugeben. Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der Steuerbaren Ressource zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '686',
      'condition_text': 'Hinweis: Es sind alle ID der Tranchen, welche dem LF an der im LOC+Z16 angegebenen Marktlokation die aktuell und / oder zukünftig zugeordnet sind anzugeben.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '687',
      'condition_text': 'Hinweis: Es sind alle Messlokationen zu nennen, die für die Energiemengenermittlun g aktuell und / oder zukünftig der im LOC+Z16 angegebenen Marktlokation notwendig sind. Zudem ist über das DE5479 mit der Angabe des entsprechenden Codes der Zustand der Messlokation zu beschreiben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '688',
      'condition_text': 'Hinweis: Es sind alle ID der Netzlokationen, welche der im LOC+Z16 angegebenen Marktlokation vorgelagert sind anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '689',
      'condition_text': 'Hinweis: Es sind alle ID der Technischen Ressourcen, welche der im LOC+Z16 angegebenen Marktlokation zugehören anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '690',
      'condition_text': 'Hinweis: Es sind alle ID der Steuerbaren Ressourcen, welche der im LOC+Z20 angegebenen Technischen Ressourcen zugeordnet sind anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '693',
      'condition_text': 'Hinweis: Es sind die Daten NGZ anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '694',
      'condition_text': 'Hinweis: Wenn in einer Marktlokation eine ID für eine Technischen Ressource vergeben wird, müssen für alle ggf. weitere Technische Ressourcen in der Marktlokation ID vergeben werden. Hintergrund: MSB und LF benötigen einen vollständigen Überblick auf die Art und Nutzung der Technischen Ressourcen in einer Marktlokation für die Plausibilisierung, Ersatzwertbildung, Produktauswahl bzw. Prognose',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '695',
      'condition_text': 'Hinweis: Verwendung, wenn Rolle LF einem Unternehmen NB zugeordnet ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '696',
      'condition_text': 'Hinweis: Verwendung, nur wenn die Rolle LF nicht einem Unternehmen NB zugeordnet ist',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '697',
      'condition_text': 'Hinweis: Anzugeben wenn der NB den LF und MSB informiert hat, dass die Marktlokation nicht mehr bilanzierungsrelevant ist, weil sie ins Modell 2 gewechselt ist oder Bestandteil einer Kundenanlage geworden ist.',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '698',
      'condition_text': 'Hinweis: Für eine erzeugende Marktlokation muss für jede Technische Ressource eine ID der Technischen Ressourcen vergeben werden. Dies ist notwendig um die Nennleistung der Technische Ressource bekannt zu geben, da auf Basis diese Information die POG des MSB einer erzeugenden Marktlokation ermittelt wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '699',
      'condition_text': 'Hinweis: Es ist die ID der Steuerbare Ressource zu nennen über die die Technische Ressource gesteuert wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '700',
      'condition_text': 'Hinweis: Es ist die ID der Netzlokation zu nennen über die die Technische Ressource gesteuert wird',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '701',
      'condition_text': 'Hinweis: Es ist ein anderes Datum als in der Anfrage zu verwenden',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '902',
      'condition_text': 'Format: Möglicher Wert: ≥ 0',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '907',
      'condition_text': 'Format: max. 4 Nachkommastellen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '910',
      'condition_text': 'Format: Möglicher Wert: < 0 oder ≥ 0',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '912',
      'condition_text': 'Format: max. 6 Nachkommastellen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '914',
      'condition_text': 'Format: Möglicher Wert: > 0',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '922',
      'condition_text': 'Format: TR-ID',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '926',
      'condition_text': 'Format: Möglicher Wert: 0',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '930',
      'condition_text': 'Format: max. 2 Nachkommastellen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00Beschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF an LF an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 44162 44163 44164 44165 44166 44167Beschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF an LF an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 44162 44163 44164 44165 44166 44167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '937',
      'condition_text': 'Format: keine Nachkommastelle',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '938',
      'condition_text': 'Format: Möglicher Wert: <= 10',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '939',
      'condition_text': 'Format: Die Zeichenkette muss die Zeichen @ und . enthalten',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '940',
      'condition_text': 'Format: Die Zeichenkette muss mit dem Zeichen + beginnen und danach dürfen nur noch Ziffern folgenBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '942',
      'condition_text': 'Format: n1-n2- n1-n3',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '943',
      'condition_text': 'Format: n1-n2-n1',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '946',
      'condition_text': 'Format: max. 11 Nachkommastellen',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '948',
      'condition_text': 'Format: n1-n2- n1-n8-n2',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '950',
      'condition_text': 'Format: Marktlokations-IDBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '951',
      'condition_text': 'Format: ZählpunktbezeichnungBeschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167Beschreibung Anfrage an Antwort auf Ablehnung Nicht bila.rel. Nicht bila.rel. Antwort auf Bedingung MSB ohne Anfrage Anfrage Anfrage an Anfrage an Anfrage Abhängigkeite MSB ohne MSB ohne n Abhängigkeite Abhängigkeite n n Kommunikation von LF/ MSB NB [Verteiler] NB [Verteiler] NB [Verteiler] NB MSB an NB [Berechtigt] an LF/ MSB an LF/ MSB an MSB [Berechtigt] an NB [Berechtigt] [Berechtigt] an MSB [Verteiler] Prüfidentifikator 55162 55163 55164 55165 55166 55167',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '952',
      'condition_text': 'Format: Gerätenummer nach DIN 43863-5',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '953',
      'condition_text': 'Format: Marktlokations-ID oder Zählpunktbezeichnung',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '955',
      'condition_text': 'Format: Möglicher Wert: < 100',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '956',
      'condition_text': 'Format: ≥ 202212312300?+00',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '957',
      'condition_text': 'Format: n1-n2- n1-n8',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '958',
      'condition_text': 'Format: Möglicher Wert: 100',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '960',
      'condition_text': 'Format: Netzlokations- ID',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '961',
      'condition_text': 'Format: SR-ID',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '967',
      'condition_text': 'Format: Zertifikatskörper gemäß X509.1, BSI TR-03109-4',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2056',
      'condition_text': 'Einmal für jede Marktlokation bzw. Tranche, für die der LF nicht die gemeldete Ansicht des NB teilt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2060',
      'condition_text': 'Wenn SG10 CAV+NZR ist die Segmentgruppe genau zwei Mal je IDE+24 anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2061',
      'condition_text': 'Segment bzw. Segmentgruppe ist genau einmal je SG4 IDE (Vorgang) anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2062',
      'condition_text': 'Segmentgruppe ist max. einmal je SG4 IDE+24 (Vorgang) anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2071',
      'condition_text': 'Für die ID der LieferantensummenZR einmal je SG4 IDE+24 (Vorgang)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2073',
      'condition_text': 'Für die ID der BilanzkreissummenZR einmal je SG4 IDE+24 (Vorgang)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2075',
      'condition_text': 'Für die ID der Zeitreihen (nicht bei EEG-EUZ und EUZ der AAÜZ) in der Clearingliste einmal je SG4 IDE+24 (Vorgang)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2080',
      'condition_text': 'Segmentgruppe ist max. zweimal je SG4 IDE+24 (Vorgang) anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2095',
      'condition_text': 'Je SG5 LOC+Z15 (MaBiS-Zählpunkt) ist genau einmal die Segmentgruppe anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2096',
      'condition_text': 'Segmentgruppe ist genau zweimal je SG4 IDE anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2119',
      'condition_text': 'Je SG8 SEQ+Z13 (Smartmeter- Gateway) ist genau einmal die Segmentgruppe anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2140',
      'condition_text': 'Für die ID der LieferantensummenZR einmal je SG4 IDE+Z01 (Liste)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2182',
      'condition_text': 'Segmentgruppe ist genau einmal je SG8 SEQ+Z01 (Daten der Marktlokation) anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2183',
      'condition_text': 'Segmentgruppe ist genau zweimal je SG8 SEQ+Z01 (Daten der Marktlokation) anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2207',
      'condition_text': 'Für die ID der Lieferanten-ausfall-arbeits- summen-zeitreihe einmal je SG4 IDE+Z01 (Liste)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2225',
      'condition_text': 'Einmal für jede Marktlokation bzw. Tranche für die der LF nicht die gemeldete Ansicht des NB teilt',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2236',
      'condition_text': 'Code einmal je SG4 IDE+24 (Vorgang)',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2252',
      'condition_text': 'Einmal für jede Marktlokation bzw. Tranche, die in der Lieferantenausfallarbeits- summenzeitreihe berücksichtigt wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2261',
      'condition_text': 'Für jede ID im SG5 LOC+Z21 (Tranche) DE3225, mindestens einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2284',
      'condition_text': 'Für jede Messlokations-ID im SG5 LOC+Z17 (Messlokation) DE3225 genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2286',
      'condition_text': 'Für jede SEQ+Z18 (Daten der Messlokation) mindestens einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2287',
      'condition_text': 'Für jede SEQ+Z03 (Zähleinrichtungsdate n) mindestens einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2288',
      'condition_text': 'Einmal für jede Zeitreihe, die in der DZR berücksichtigt wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2307',
      'condition_text': 'Für jede ID im SG5 LOC+Z21 (Tranche) DE3225 genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2308',
      'condition_text': 'Für jede ID im SG5 LOC+Z16 (Marktlokation) DE3225, mindestens einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2309',
      'condition_text': 'Für jede ID im SG5 LOC+Z17 (Messlokation) DE3225 mindestens einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2310',
      'condition_text': 'Für jede ID im SG5 LOC+Z16 (Marktlokation) DE3225 genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2311',
      'condition_text': 'Für jede ID im SG5 LOC+Z21 (Tranche) DE3225, mindestens einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2312',
      'condition_text': 'Wenn der Objektcode "9992000001256" (Netzlokation) im DE1154 des selben RFF+Z33 nicht vorhanden ist, ist das RFF+Z33 in derselben SG8 SEQ+Z58 (Zuordnung Lokation zum Objektcode des Lokationsbündels) genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2313',
      'condition_text': 'Je SG8 SEQ+Z58 (Zuordnung Lokation zum Objektcode des Lokationsbündels) genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2317',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z04 (Wandlerdaten) das SG10 CCI+++Z25 (Wandler) CAV+MIW/MPW/ MUW vorhanden, ist das Segment mindestens zweimal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2318',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z04 (Wandlerdaten) das SG10 CCI+++Z25 (Wandler) CAV+MBW (Blockstromwandler) vorhanden, ist das Segment genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2335',
      'condition_text': 'Für jede SEQ+Z02 (OBIS- Daten der Marktlokation), welche im PIA+5 die OBIS-Kennzahl 7- 20:99.33.17/ 7-0:33.86.0 übermittelt, genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2344',
      'condition_text': 'Einmal für jede Marktlokation bzw. Tranche, die in der DZÜ / BG-CL / LF- SZR berücksichtigt wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2348',
      'condition_text': 'Für jede ID im SG5 LOC+Z21 (Tranche) DE3225, mit dem Code Z01 / Z02 (Lokation aktuell und zukünftig vorhanden / Lokation zukünftig vorhanden) im DE5479, genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2349',
      'condition_text': 'Für jedes SG5 LOC+Z17 (Messlokation) einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2350',
      'condition_text': 'Für jedes SMGW das im SEQ+Z13 (Smartmeter- Gateway) SG10 CCI+++Z75 CAV+Z30 (Gerätenummer) genannt ist, mindestens einmal je SEQ+Z03 (Zähleinrichtungsdate n) das mit SG8 RFF+Z14 (Referenz auf das Smartmeter- Gateway) auf das SMGW referenziert',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2351',
      'condition_text': 'Einmal je ZP einer BK- SZR, in der die Marktlokation in die Berechnung der abgerechneten Summenzeitreihe aufgenommen wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2352',
      'condition_text': 'Einmal je ZP einer BG- SZR, in der die Marktlokation in die Berechnung der abgerechneten Summenzeitreihe aufge- nommen wurde',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2353',
      'condition_text': 'Für jede SEQ+Z09 (Mengenumwerter- Daten) mindestens einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2354',
      'condition_text': 'Für jede ID im SG5 LOC+Z16 / Z17 / Z18 / Z20 (Marktlokation / Messlokation / Netzlokation / Technische Ressource) DE3225 genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2356',
      'condition_text': 'Je SG5 LOC+Z18 (Netzlokation) ist genau einmal die Segmentgruppe anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2357',
      'condition_text': 'Je SG5 LOC+Z20 (Technische Ressource) ist genau einmal die Segmentgruppe anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2358',
      'condition_text': 'Je SG5 LOC+Z19 (Steuerbare Ressource) ist genau einmal die Segmentgruppe anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2359',
      'condition_text': 'Für jede ID im SG5 LOC+Z16 / Z17 / Z20 (Marktlokation / Messlokation / Technische Ressource) DE3225 genau einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
    dict({
      'condition_key': '2360',
      'condition_text': 'Für jede ID im SG5 LOC+Z18 (Netzlokation) DE3225 mindestens einmal anzugeben',
      'edifact_format': 'UTILMD',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[UTILMD].2
  list([
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[243]',
      'package_key': '6P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[244]',
      'package_key': '7P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[145]',
      'package_key': '8P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[146]',
      'package_key': '9P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [244]',
      'package_key': '10P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [244]',
      'package_key': '11P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [243]',
      'package_key': '12P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[434]',
      'package_key': '18P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [428] ∧ [430]',
      'package_key': '19P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [428] ∧ [431]',
      'package_key': '20P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [432] ∧ [435]',
      'package_key': '21P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [432] ∧ [433]',
      'package_key': '22P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [432] ∧ [435]',
      'package_key': '23P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [432] ∧ [433]',
      'package_key': '24P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [428] ∧ [430]',
      'package_key': '25P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [430] ∧ [436]',
      'package_key': '26P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [428] ∧ [431]',
      'package_key': '27P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[407]',
      'package_key': '28P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [405] ∧ [410]',
      'package_key': '29P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [405] ∧ [411]',
      'package_key': '30P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [396] ∧ [408]',
      'package_key': '31P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [396] ∧ [409]',
      'package_key': '32P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [396] ∧ [408]',
      'package_key': '33P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [396] ∧ [409]',
      'package_key': '34P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [405] ∧ [410]',
      'package_key': '35P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[20] ∧ [406]',
      'package_key': '36P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[54] ∧ [405] ∧ [411]',
      'package_key': '37P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[419]',
      'package_key': '38P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[78]',
      'package_key': '39P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[40]',
      'package_key': '40P',
    }),
    dict({
      'edifact_format': 'UTILMD',
      'package_expression': '[156]',
      'package_key': '43P',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[UTILTS]
  False
# ---
# name: TestCliConditions.test_cli_conditions[UTILTS].1
  list([
    dict({
      'condition_key': '1',
      'condition_text': 'Nur MP-ID aus Sparte Strom',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '2',
      'condition_text': 'Wenn SG5 STS+Z23+Z34 (Formel muss beim Absender angefragt werden) in einem SG5 IDE vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '3',
      'condition_text': 'Wenn SG5 STS+Z23+Z33 (Formel angefügt) vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '5',
      'condition_text': 'Wenn das SG8 RFF+Z19 (Referenz auf eine Messlokation) in derselben SG8 SEQ+Z37 nicht vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '6',
      'condition_text': 'Wenn das SG8 RFF+Z23 (Referenz auf Rechenschritt) in derselben SG8 SEQ+Z37 nicht vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '7',
      'condition_text': 'Wenn in derselben SG8 SEQ+Z37 das SG8 RFF+Z19 (Referenz auf eine Messlokation) vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '8',
      'condition_text': 'Rechenschrittidentifikato r aus einem SG8 SEQ+Z37 (Bestandteil des Rechenschritts) DE1050 desselben SG5 IDE+24',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '9',
      'condition_text': 'Der hier angegebene Rechenschrittidentifikato r darf nicht identisch mit dem Rechenschrittidentifikato r aus diesem SG8 SEQ+Z37 DE1050 sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '10',
      'condition_text': 'wenn vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '11',
      'condition_text': 'Wenn in SG8 SEQ+Z37 SG9 CCI+++Z86 CAV+Z69/Z70 (Addition /Subtraktion) vorhanden, darf es in dem Vorgang beliebig viele weitere SG8 SEQ+Z37 mit identischem Rechenschrittidentifikato r geben, die jedoch ausschließlich die Operatoren Z69/Z70 enthalten dürfen',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '12',
      'condition_text': 'Wenn in SG8 SEQ+Z37 SG9 CCI+++Z86 CAV+Z83 (Positivwert) vorhanden, darf es in dem Vorgang keine weitere SG8 SEQ+Z37 mit identischem Rechenschrittidentifikato r geben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '13',
      'condition_text': 'Wenn in SG8 SEQ+Z37 SG9 CCI+++Z86 CAV+Z80/Z81 (Divisor / Dividend) vorhanden, muss in diesem Vorgang genau eine zweite SG8 SEQ+Z37 mit identischen Rechenschrittidentifikato r vorhanden sein, sodass das eine SG8 SEQ+Z37 den Operator Z80 (Divisor) und das andere SG8 SEQ+Z37 den Operator Z81 (Dividend) enthält',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '14',
      'condition_text': 'Wenn in SG8 SEQ+Z37 SG9 CCI+++Z86 CAV+Z82 (Faktor) vorhanden, darf es in dem Vorgang beliebig viele weitere SG8 SEQ+Z37 mit identischem Rechenschrittidentifikato r geben, die jedoch ausschließlich CAV+Z82 enthalten',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '15',
      'condition_text': 'Wenn in einem SG5 IDE+24 nur eine SEQ+Z37 mit einer SG8 RFF+Z19 (Messlokation) vorhanden ist',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '16',
      'condition_text': 'Der hier angegebene Code des Prüfschritt muss im EBD dem Cluster Zustimmung zugeordnet sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '17',
      'condition_text': 'Der hier angegebene Code des Prüfschritt muss im EBD dem Cluster Ablehnung zugeordnet sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '18',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle LF',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '21',
      'condition_text': 'Wenn in dieser CAV+ZD3 der Wert im DE7110 mit Z32 (sonstiger Zählzeitdefinitionstyp) vorhanden ist',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '22',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MS (Nachrichtenabsender) in der Rolle NB',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '24',
      'condition_text': 'Wenn SG5 STS+Z36+Z45 (Definitionen werden verwendet) vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '25',
      'condition_text': 'Wenn MP-ID in SG2 NAD+MR (Nachrichtenempfänger) in der Rolle LF',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '26',
      'condition_text': 'sofern per ORDERS reklamiert',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '27',
      'condition_text': 'Wenn in SG9 CAV+ZD4+Z26 (keine Verwendung des Hochlastzeitfensters) vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '29',
      'condition_text': 'Wenn in SG8 SEQ+Z43 DTM+Z33 (Zählzeitänderungszeitpu nkt) im DE2379 der Code 303 vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '30',
      'condition_text': 'Der Wert von CCYY in diesem DE muss genau um eins höher sein, als der Wert CCYY des SG5 DTM+Z34 (Gültigkeitsbeginn) DE2380',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '31',
      'condition_text': 'Wenn im DE2379 dieses Segments der Code 303 vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '32',
      'condition_text': 'Der Zeitpunkt in diesem DE muss ≥ dem Zeitpunkt aus dem DE2380 des Gültigkeitsbeginn der ausgerollten Definition (SG5 DTM+Z34) sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '33',
      'condition_text': 'Der Zeitpunkt in diesem DE muss ≤ dem Zeitpunkt aus dem DE2380 des Gültigkeitsende der ausgerollten Definition (SG5 DTM+Z35) sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '34',
      'condition_text': 'Wenn im DE2379 dieses Segments der Code 401 vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '36',
      'condition_text': 'Wenn in SG8 SEQ+Z43 DTM+Z33 (Zählzeitänderungszeitpu nkt) im DE2379 der Code 401 vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '37',
      'condition_text': 'Wenn ein Gültigkeitsende bereits angegeben werden kann.',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '41',
      'condition_text': 'Wenn SG8 SEQ+Z42 (Zählzeitdefinition) vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '42',
      'condition_text': 'Der in diesem Datenlement angegebene Code der Schaltzeitdefinition muss innerhalb eines Vorgangs (IDE) eindeutig sein.',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '43',
      'condition_text': 'Der in diesemDatenlement angegebene Code der Leistungskurvendefinitio n muss innerhalb eines Vorgangs (IDE) eindeutig sein.',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '44',
      'condition_text': 'Der in diesem Datenlement angegebene Code der Zählzeitdefinition muss innerhalb eines Vorgangs (IDE) eindeutig sein.',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '46',
      'condition_text': 'Wenn in SG8 SEQ+Z73 DTM+Z44 (Schaltzeitänderungszeit punkt) im DE2379 der Code 303 vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '47',
      'condition_text': 'Wenn in SG8 SEQ+Z73 DTM+Z44 (Schaltzeitänderungszeit punkt) im DE2379 der Code 401 vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '48',
      'condition_text': 'Wenn in SG8 SEQ+Z74 DTM+Z45 (Leistungskurvenänderun gszeitpunkt) im DE2379 der Code 303 vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '49',
      'condition_text': 'Wenn in SG8 SEQ+Z74 DTM+Z45 (Leistungskurvenänderun gszeitpunkt) im DE2379 der Code 401 vorhanden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '50',
      'condition_text': 'In jedem DE2379 dieses DTM-Segments innerhalb eines IDE+24 (Vorgangs) muss der gleiche Code angegeben werden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '490',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.5 „Übersicht gesetzliche deutsche Sommerzeit (MESZ)“ der Spalten:
        ›	„Sommerzeit (MESZ) von“ Darstellung in UTC und
        ›	„Sommerzeit (MESZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '491',
      'condition_text': '''
        wenn Wert in diesem DE, an der Stelle CCYYMMDDHHMM ein Zeitpunkt aus dem angegeben Zeitraum der Tabelle Kapitel 3.6 „Übersicht gesetzliche deutsche Zeit (MEZ)“ der Spalten: 
        ›	„Winterzeit (MEZ) von“ Darstellung in UTC und
        ›	„Winterzeit (MEZ) bis“ Darstellung in UTC ist.
      ''',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '492',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Strom',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '493',
      'condition_text': 'wenn MP-ID in NAD+MR aus Sparte Gas',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '494',
      'condition_text': 'Das hier genannte Datum muss der Zeitpunkt sein, zu dem das Dokument erstellt wurde, oder ein Zeitpunkt, der davor liegt.',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '500',
      'condition_text': 'Hinweis: Zeitpunkt, ab dem die Berechnungsformel anzuwenden ist',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '501',
      'condition_text': 'Hinweis: Verwendung der ID der Marktlokation',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '502',
      'condition_text': 'Hinweis: Verwendung der ID der Messlokation',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '504',
      'condition_text': 'Hinweis: Wert aus BGM+Z55 DE1004 der ORDERS mit der die Reklamation einer Definition erfolgt ist',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '505',
      'condition_text': 'Hinweis: Jede ausgerollte Zählzeitdefinition ist in einem eigenen IDE anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '506',
      'condition_text': 'Hinweis: Zeitpunkt, ab dem die Übersicht der Zählzeitdefinitionen gültig ist',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '507',
      'condition_text': 'Hinweis: Es ist die Zeit nach der deutschen gesetzlichen Zeit anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '508',
      'condition_text': 'Hinweis: Zeitpunkt, ab dem die Übersicht der Schaltzeitdefinitionen gültig ist',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '509',
      'condition_text': 'Hinweis: Zeitpunkt, ab dem die Übersicht der Leistungskurvendefinitio n gültig ist',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '510',
      'condition_text': 'Hinweis: Für jeden Zählzeitänderungszeitpu nkt (SG8 DTM+Z33) ist diese Sementgruppe einmal anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '511',
      'condition_text': 'Hinweis: Der Zählzeitänderungszeitpu nkt (SG8DTM+Z33) dieser SG8 darf in keiner anderen SG8 „Zählzeitdefinition“ wiederholt werden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '512',
      'condition_text': 'Hinweis: Wenn der Code 303 im DE2379 des Zählzeitänderungszeitpu nkt (SG8 DTM+Z33) genutzt wird, muss genau ein Wert im DE2380 des Zählzeitänderungszeitpu nkt (SG8 DTM+Z33) identisch mit dem Wert aus DE2380 desGültigkeitsbeginn der ausgerollten Definition (SG5 DTM+Z34) sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '513',
      'condition_text': 'Hinweis: Wenn der Code 401 im DE2379 des Zählzeitänderungszeitpu nkt (SG8 DTM+Z33) genutzt wird, muss genau ein Wert = 0000 im DE2380 des Zählzeitänderungszeitpu nkt (SG8 DTM+Z33) sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '514',
      'condition_text': 'Hinweis: Für jeden Schaltzeitänderungszeitp unkt (SG8 DTM+Z44) ist diese Sementgruppe einmal anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '515',
      'condition_text': 'Hinweis: Kein Schaltzeitänderungszeitp unkt (SG8 DTM+Z44) darf mehrfach vorkommen',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '516',
      'condition_text': 'Hinweis: Wenn der Code 303 im DE2379 des Schaltzeitänderungszeitpunkt (SG8 DTM+Z44) genutzt wird, muss genau ein Wert im DE2380 des Schaltzeitänderungszeitp unkt (SG8 DTM+Z44) identisch mit dem Wert aus DE2380 des Gültigkeitsbeginn der ausgerollten Definition (SG5 DTM+Z34) sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '517',
      'condition_text': 'Hinweis: Wenn der Code 401 im DE2379 des Schaltzeitänderungszeitp unkt (SG8 DTM+Z44) genutzt wird, muss genau ein Wert = 0000 im DE2380 des Schaltzeitänderungszeitp unkt (SG8 DTM+Z44) sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '518',
      'condition_text': 'Hinweis: Für jeden Leistungskurvenänderun gszeitpunkt (SG8DTM+Z45) ist diese Sementgruppe einmal anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '519',
      'condition_text': 'Hinweis: Kein Leistungskurvenänderun gszeitpunkt (SG8 DTM+Z45) darf mehrfach vorkommen',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '520',
      'condition_text': 'Hinweis: Wenn der Code 303 im DE2379 des Leistungskurvenänderun gszeitpunkt (SG8 DTM+Z45) genutzt wird, muss genau ein Wert im DE2380 des Leistungskurvenänderun gszeitpunkt (SG8 DTM+Z45) identisch mit dem Wert aus DE2380 des Gültigkeitsbeginn der ausgerollten Definition (SG5 DTM+Z34) sein',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '521',
      'condition_text': 'Hinweis: Wenn der Code 401 im DE2379 des Leistungskurvenänderun gszeitpunkt (SG8 DTM+Z45)',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '522',
      'condition_text': 'Hinweis: Jede ausgerollte Schaltzeitdefinition ist in einem eigenen IDE anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '523',
      'condition_text': 'Hinweis: Jede ausgerollte Leistungskurvendefinitio n ist in einem eigenen IDE anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '524',
      'condition_text': 'Hinweis: Es ist der Code einer Zählzeitdefinition anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '525',
      'condition_text': 'Hinweis: Es ist der Code einer Schaltzeitdefinition anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '526',
      'condition_text': 'Hinweis: Es ist der Code einer Leistungskurvendefinitio n anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '527',
      'condition_text': 'Hinweis: Dieser Code ist anzugeben, wenn es sich um eine einmalig zu übermittelnde Definition handelt',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '528',
      'condition_text': 'Hinweis: Dieser Code ist anzugeben, wenn es sich um eine jährlich zu übermittelnde Definition handelt',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '912',
      'condition_text': 'Format: Wert kann mit maximal 6 Nachkommastellen angegeben werden',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '913',
      'condition_text': 'Format: Mögliche Werte: 1 bis 99999',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '914',
      'condition_text': 'Format: Möglicher Wert: > 0',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '915',
      'condition_text': 'Format: Möglicher Wert: ≠ 1',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '930',
      'condition_text': 'Format: max. 2 Nachkommastellen',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '931',
      'condition_text': 'Format: ZZZ = +00',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '932',
      'condition_text': 'Format: HHMM = 2200',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '933',
      'condition_text': 'Format: HHMM = 2300',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '934',
      'condition_text': 'Format: HHMM = 0400',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '935',
      'condition_text': 'Format: HHMM = 0500',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '947',
      'condition_text': 'Format: MMDDHHMM = 12312300',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '950',
      'condition_text': 'Format: Marktlokations-ID',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '951',
      'condition_text': 'Format: Zählpunktbezeichnung',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '963',
      'condition_text': 'Format: Möglicher Wert: ≤ 100',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '964',
      'condition_text': 'Format: HHMM ≥ 0000',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '965',
      'condition_text': 'Format: HHMM ≤ 2359',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '969',
      'condition_text': 'Format: Möglicher Wer: ≤ 1',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '2000',
      'condition_text': 'Segment ist bis zu viermal je SG9 CCI+Z27 anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '2001',
      'condition_text': 'Segment bzw. Segmentgruppe ist genau einmal anzugeben',
      'edifact_format': 'UTILTS',
    }),
    dict({
      'condition_key': '2002',
      'condition_text': 'Für jeden Code der Zählzeit aus SG8 SEQ+Z42 (Zählzeitdefinition) SG9 CCI+Z39 (Code der Zählzeitdefinition) sind mindestens zwei Register anzugeben, bei denen in dieser SG8 das SG8 RFF+Z27 mit diesem Code gefüllt ist',
      'edifact_format': 'UTILTS',
    }),
  ])
# ---
# name: TestCliConditions.test_cli_conditions[UTILTS].2
  None
# ---
