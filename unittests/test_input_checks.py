from typing import Union

import pytest  # type:ignore[import]

from kohlrahbi import get_valid_pruefis


@pytest.mark.parametrize(
    "input_pruefis, expected_pruefis, known_pruefis",
    [
        pytest.param(
            {"11042": None, "13007": None},
            {"11042": None, "13007": None},
            None,
            id="only valid pruefis",
        ),
        pytest.param(
            {"01042": None, "13007": None},
            {"13007": None},
            None,
            id="invalid pruefi: leading zero",
        ),
        pytest.param(
            {"1042": None, "13007": None},
            {"13007": None},
            None,
            id="invalid pruefi: only four digits",
        ),
        pytest.param(
            {"abc": None, "13007": None},
            {"13007": None},
            None,
            id="invalid pruefi: characters",
        ),
        pytest.param(
            {"abc": None},
            {},
            None,
            id="invalid pruefi: empty result",
        ),
        pytest.param(
            {"11*": None},
            {"11001": None, "11002": None, "11003": None},
            [
                "11001",
                "11002",
                "11003",
                "12001",
                "12002",
                "12003",
                "13001",
                "13002",
                "13003",
            ],
            id="wildcard `*` at end",
        ),
        pytest.param(
            {"*1": None},
            {"11001": None, "12001": None, "13001": None},
            [
                "11001",
                "11002",
                "11003",
                "12001",
                "12002",
                "12003",
                "13001",
                "13002",
                "13003",
            ],
            id="wildcard `*` at begin",
        ),
        pytest.param(
            {"11*1": None},
            {"11001": None},
            [
                "11001",
                "11002",
                "11003",
                "12001",
                "12002",
                "12003",
                "13001",
                "13002",
                "13003",
            ],
            id="wildcard `*` in the middle",  # who should seriously want this?
        ),
        pytest.param(
            {"?1001": None},
            {"11001": None, "21001": None, "31001": None},
            ["11001", "11002", "11003", "12002", "12003", "13003", "21001", "31001"],
            id="wildcard `?` at begin",
        ),
        pytest.param(
            {"11?42": None},
            {"11042": None, "11142": None},
            [
                "11001",
                "11002",
                "11003",
                "11042",
                "11142",
                "12001",
                "12002",
                "12003",
                "13001",
                "13002",
                "13003",
            ],
            id="wildcard `?` in the middle",
        ),
        pytest.param(
            {"1100?": None},
            {
                "11001": None,
                "11002": None,
                "11003": None,
                "11004": None,
                "11005": None,
                "11006": None,
                "11007": None,
                "11008": None,
                "11009": None,
            },
            [
                "11001",
                "11002",
                "11003",
                "11004",
                "11005",
                "11006",
                "11007",
                "11008",
                "11009",
                "11042",
                "11142",
                "12001",
                "12002",
                "12003",
                "13001",
                "13002",
                "13003",
            ],
            id="wildcard `?` at the end",
        ),
        pytest.param(
            {"110??": None},
            {
                "11001": None,
                "11002": None,
                "11003": None,
                "11004": None,
                "11005": None,
                "11006": None,
                "11007": None,
                "11008": None,
                "11009": None,
                "11010": None,
                "11042": None,
            },
            [
                "11001",
                "11002",
                "11003",
                "11004",
                "11005",
                "11006",
                "11007",
                "11008",
                "11009",
                "11010",
                "11042",
                "11142",
                "12001",
                "12002",
                "12003",
                "13001",
                "13002",
                "13003",
            ],
            id="wildcard `??` at the end",
        ),
        pytest.param(
            {"*00?": None},
            {
                "11001": None,
                "11002": None,
                "11003": None,
                "11004": None,
                "11005": None,
                "11006": None,
                "11007": None,
                "11008": None,
                "11009": None,
                "12001": None,
                "12002": None,
                "12003": None,
                "13001": None,
                "13002": None,
                "13003": None,
            },
            [
                "11001",
                "11002",
                "11003",
                "11004",
                "11005",
                "11006",
                "11007",
                "11008",
                "11009",
                "11010",
                "11042",
                "11142",
                "12001",
                "12002",
                "12003",
                "13001",
                "13002",
                "13003",
            ],
            id="wildcard combination `*` and `?`",
        ),
    ],
)
def test_get_only_valid_pruefis(
    input_pruefis: dict[str, Union[str, None]], expected_pruefis: dict[str, str], known_pruefis: list[str] | None
):
    valid_pruefis = get_valid_pruefis(pruefi_to_file_mapping=input_pruefis, all_known_pruefis=known_pruefis)
    assert valid_pruefis == expected_pruefis
