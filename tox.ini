[tox]
envlist =
    test
    lint
    coverage
    typecheck
    formatcheck
skip_missing_interpreters = True
; isolated_build = True
; skipsdist = True

[testenv]
commands = python -m pip install --upgrade pip

[testenv:test]
# the test environment is called by the Github action that runs the unit tests
setenv = PYTHONPATH = {toxinidir}/src
deps =
    -r dev_requirements/requirements-test.txt
commands = pytest --basetemp={envtmpdir} {posargs}

[testenv:lint]
# the lint environment is called by the Github Action that runs the linter
deps =
    -r dev_requirements/requirements-lint.txt
setenv = PYTHONPATH = {toxinidir}/src
# add your fixtures like e.g. pytest_datafiles here
commands =
    pylint kohlrahbi --ignore=version.py

[testenv:typecheck]
# the type_check environment checks the type hints using mypy
setenv = PYTHONPATH = {toxinidir}/src
deps =
     -r dev_requirements/requirements-typecheck.txt
commands =
    mypy --show-error-codes src/kohlrahbi --strict
    mypy --show-error-codes unittests
# mypy --show-error-codes unittests # does not work yet, sadly; Some tox/packaging problems
# add single files (ending with .py) or packages here

[testenv:coverage]
# the coverage environment is called by the Github Action that runs the coverage measurement
deps =
    -r dev_requirements/requirements-coverage.txt
setenv = PYTHONPATH = {toxinidir}/src
commands =
    coverage run -m pytest --basetemp={envtmpdir} {posargs}
    coverage html --omit .tox/*,unittests/*
    coverage report --fail-under 60 --omit .tox/*,unittests/*

[testenv:formatcheck]
deps =
    -r dev_requirements/requirements-format.txt
commands =
    black . --check
    isort . --check

[testenv:dev]
# the dev environment contains everything you need to start developing on your local machine.
deps =
    -r dev_requirements/requirements-dev.txt
    pip-tools
    pre-commit
commands =
    pre-commit install

[testenv:update_requirements]
deps =
    pip-tools
commands =
    pip-compile --upgrade --extra=test --output-file=dev_requirements/requirements-test.txt pyproject.toml
    pip-compile --upgrade --extra=lint --output-file=dev_requirements/requirements-lint.txt pyproject.toml
    pip-compile --upgrade --extra=coverage --output-file=dev_requirements/requirements-coverage.txt pyproject.toml
    pip-compile --upgrade --extra=typecheck --output-file=dev_requirements/requirements-typecheck.txt pyproject.toml
    ; dev requirements needs all dependencies
    pip-compile --upgrade --all-extras --output-file=dev_requirements/requirements-dev.txt pyproject.toml
    ; the following requirements are for tooling which does not need the package dependencies from the pyproject.toml.
    ; they work standalone and are therefore not listed in the pyproject.toml
    pip-compile --upgrade --output-file=dev_requirements/requirements-formatcheck.txt dev_requirements/requirements-formatcheck.in
    pip-compile --upgrade --output-file=dev_requirements/requirements-test_packaging.txt dev_requirements/requirements-test_packaging.in

[testenv:test_packaging]
skip_install = true
deps =
    -r dev_requirements/requirements-test_packaging.txt
commands =
    python -m build
    twine check dist/*
